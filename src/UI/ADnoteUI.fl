# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {ADNoteUI.h} {not_in_source in_header
}

comment {ADNoteUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014-2018, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code.
Modified April 2018
} {selected in_source in_header
}

decl {\#include <FL/Fl_Box.H>
    \#include <FL/Fl_Group.H>
    \#include "Params/ADnoteParameters.h"
    \#include "Misc/SynthEngine.h"
    \#include "UI/MiscGui.h"
    \#include "UI/WidgetPDial.h"
    \#include "UI/WidgetMWSlider.h"
    \#include "FilterUI.h"
    \#include "PresetsUI.h"} {private global
}

decl {\#include "Misc/SynthHelper.h"
    \#include "Misc/MiscFuncs.h"
    \#include "ResonanceUI.h"
    \#include <string>
    \#include "EnvelopeUI.h"
    \#include "LFOUI.h"
    \#include "OscilGenUI.h"} {public global
}

decl {\#include "MasterUI.h"} {private global
}

class ADvoicelistitem {: {public Fl_Group, SynthHelper}
} {
  Function {make_window()} {} {
    Fl_Window ADnoteVoiceListItem {
      xywh {117 302 625 30} type Double box ENGRAVED_BOX hide
      class Fl_Group
    } {
      Fl_Group voicelistitemgroup {
        xywh {38 1 584 25} box FLAT_BOX
        code0 {if (pars->VoicePar[nvoice].Enabled == 0) o->deactivate();}
      } {
        Fl_Value_Slider voicevolume {
          callback {//
    if (Fl::event_button() == 3)
        o->value(100);
    int vol = lrint(o->value());
    if (synth->getGuiMaster()->partui->adnoteui->advoice->nvoice == nvoice)
        synth->getGuiMaster()->partui->adnoteui->advoice->voicevolume->value(vol);

    collect_data(synth, vol, (Fl::event_button() | 0xc8), 0, npart, kititem, 0x80 + nvoice);}
          tooltip Volume xywh {125 3 113 20} type {Horz Knob} box THIN_DOWN_BOX labelsize 8 align 5 maximum 127 step 1
          code0 {o->value(pars->VoicePar[nvoice].PVolume);}
          code1 {o->setValueType(VC_ADDVoiceVolume);o->useCustomTip(true);}
          class mwheel_val_slider_rev
        }
        Fl_Check_Button voiceresonanceenabled {
          callback {//
    bool enab = (o->value() > 0.5);
    synth->getGuiMaster()->partui->adnoteui->advoice->ResonanceEn->value(enab);

    collect_data(synth, enab, (Fl::event_button() | 0xc0), 130, npart, kititem, 0x80 + nvoice);}
          tooltip {Resonance On/Off} xywh {269 5 15 17} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 11 align 4
          code0 {o->value(pars->VoicePar[nvoice].Presonance);}
        }
        Fl_Value_Slider voicelistvibratto {
          callback {//
    if (Fl::event_button() == 3)
        o->value(40);
    int lfodepth = lrint(o->value());
    if (synth->getGuiMaster()->partui->adnoteui->advoice->nvoice == nvoice)
        synth->getGuiMaster()->partui->adnoteui->advoice->voicefreqlfogroup->intensity->value(lfodepth);

    collect_data(synth, lfodepth, (Fl::event_button() | 0xc8), 1, npart, kititem, 0x80 + nvoice, 0, 1);}
          tooltip {Frequency LFO amount} xywh {505 3 115 20} type {Horz Knob} box THIN_DOWN_BOX labelsize 8 align 5 maximum 127 step 1 deactivate
          code0 {o->value(pars->VoicePar[nvoice].FreqLfo->Pintensity);}
          code1 {o->setValueType(VC_LFOdepthFreq);o->useCustomTip(true);}
          class mwheel_val_slider_rev
        }
        Fl_Dial voicepanning {
          callback {//
    if (Fl::event_button() == 3)
        o->value(64);
    int panning = lrint(o->value());
    if (synth->getGuiMaster()->partui->adnoteui->advoice->nvoice == nvoice)
    {
        synth->getGuiMaster()->partui->adnoteui->advoice->voicepan->value(panning);
        synth->getGuiMaster()->partui->adnoteui->advoice->voicerandompan->value(panning < 1);
    }

    collect_data(synth, panning, (Fl::event_button() | 0xc8), 2, npart, kititem, 0x80 + nvoice);}
          tooltip {Voice panning - zero/leftmost is Random} xywh {244 3 20 20} box ROUND_UP_BOX labelsize 10 align 4 maximum 127 step 1
          code0 {o->setValueType(VC_PanningRandom);}
          code1 {o->value(pars->VoicePar[nvoice].PPanning);}
          class WidgetPDial
        }
        Fl_Group voiceoscil {open
          xywh {88 3 30 20} box THIN_DOWN_FRAME color 32 selection_color 71 labelcolor 179
          code0 {osc = new Oscilloscope(o->x(), o->y(), o->w(), o->h(), "");}
          code1 {osc->init(pars->VoicePar[nvoice].OscilSmp,0,pars->VoicePar[nvoice].Poscilphase, synth);}
          code2 {if (pars->VoicePar[nvoice].Pextoscil != -1) {osc->init(pars->VoicePar[pars->VoicePar[nvoice].Pextoscil].OscilSmp, synth);}}
        } {}
        Fl_Box noiselabel {
          label N
          callback {//
    int tmp = pars->VoicePar[nvoice].Type;
    if (tmp == 0)
    {
        o->hide();
        voiceresonanceenabled->activate();
        detunevalueoutput->activate();
        voicedetune->activate();
        voiceoscil->activate();
        return;
    }
    if (tmp == 1)
        o->labelcolor(7);
    else
        o->labelcolor(5);
    o->show();
    voiceresonanceenabled->deactivate();
    detunevalueoutput->deactivate();
    voicedetune->deactivate();
    voiceoscil->deactivate();}
          xywh {93 3 20 20} labelfont 1 labelsize 13 labelcolor 7
        }
        Fl_Value_Output detunevalueoutput {
          callback {o->value(getDetune((pars->VoicePar[nvoice].PDetuneType == 0) ? (pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PDetuneType), 0, pars->VoicePar[nvoice].PDetune) * pars->getBandwidthDetuneMultiplier());}
          xywh {290 3 45 20} box THIN_DOWN_BOX labelsize 10 align 0 minimum -5000 maximum 5000 textfont 1 textsize 10
          code0 {o->step(0.01, 1);}
          code1 {o->value(getDetune(pars->VoicePar[nvoice].PDetuneType, 0, pars->VoicePar[nvoice].PDetune) * pars->getBandwidthDetuneMultiplier());}
        }
        Fl_Slider voicedetune {
          callback {//
    if (Fl::event_button() == 3)
        o->value(0);
    int detune = lrint(o->value());
    collect_data(synth, detune, (Fl::event_button() | 0xd8), 32, npart, kititem, 0x80 + nvoice);}
          tooltip {Fine Detune (cents)} xywh {335 3 164 20} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
          code0 {o->value(pars->VoicePar[nvoice].PDetune - 8192);}
          class mwheel_slider_rev
        }
        Fl_Button {} {
          label Edit
          callback {//
              synth->getGuiMaster()->partui->adnoteui->setVoiceTabs(nvoice);
              synth->getGuiMaster()->partui->adnoteui->fromVoiceList = true;
              if((Fl::event_button() == 3)){
                synth->getGuiMaster()->partui->adnoteui->ADnoteVoiceList->hide();
              }}
          xywh {41 4 40 19} box THIN_UP_BOX labelfont 1 labelsize 12
        }
      }
      Fl_Check_Button voiceenabled {
        label 1
        callback {//
    bool enab = (o->value() > 0.5);
    collect_data(synth, enab, (Fl::event_button() | 0xd8), 129, npart, kititem, 0x80 + nvoice);}
        xywh {20 3 20 20} box THIN_UP_BOX down_box DOWN_BOX color 237 labeltype EMBOSSED_LABEL labelfont 1 labelsize 13 align 4
        code0 {char tmp[10]; snprintf(tmp, 10, "%d", nvoice + 1); o->label(strdup(tmp));}
        code1 {o->value(pars->VoicePar[nvoice].Enabled);}
      }
    }
  }
  Function {ADvoicelistitem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {nvoice = 0; pars = NULL;} {}
  }
  Function {init(ADnoteParameters *parameters, int npart_, int kititem_, int nvoice_)} {} {
    code {//
    synth = parameters->getSynthEngine();
    pars = parameters;
    npart = npart_;
    kititem = kititem_;
    nvoice = nvoice_;
    make_window();
    if (pars->VoicePar[nvoice].PFreqLfoEnabled > 0)
        voicelistvibratto->activate();
    else
        voicelistvibratto->deactivate();
    ADnoteVoiceListItem->show();
    end();} {}
  }
  Function {refreshlist()} {} {
    code {//
        voiceenabled->value(pars->VoicePar[nvoice].Enabled);
        voiceresonanceenabled->value(pars->VoicePar[nvoice].Presonance);
        voicevolume->value(pars->VoicePar[nvoice].PVolume);
        voicedetune->value(pars->VoicePar[nvoice].PDetune - 8192);
        voicepanning->value(pars->VoicePar[nvoice].PPanning);
        pars->setVoicePan(nvoice, voicepanning->value());
        voicelistvibratto->value(pars->VoicePar[nvoice].FreqLfo->Pintensity);
        if (pars->VoicePar[nvoice].Pextoscil != -1)
        {
            osc->init(pars->VoicePar[pars->VoicePar[nvoice].Pextoscil].OscilSmp, 0, pars->VoicePar[nvoice].Poscilphase, synth);
        }
        else
            osc->init(pars->VoicePar[nvoice].OscilSmp, 0, pars->VoicePar[nvoice].Poscilphase, synth);
        if (pars->VoicePar[nvoice].Enabled == 0)
            voicelistitemgroup->deactivate();
        else
            voicelistitemgroup->activate();
        detunevalueoutput->do_callback();
        noiselabel->do_callback();
        ADnoteVoiceListItem->redraw();} {}
  }
  Function {~ADvoicelistitem()} {} {
    code {//
        ADnoteVoiceListItem->hide();} {}
  }
  decl {ADnoteParameters *pars;} {private local
  }
  decl {int nvoice;} {public local
  }
  decl {Oscilloscope *osc;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
}

class ADvoiceUI {: {public Fl_Group, SynthHelper, MiscFuncs}
} {
  Function {make_window()} {} {
    Fl_Window ADnoteVoiceParameters {
      label Voice
      xywh {30 43 760 610} type Double box NO_BOX hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("AddSynth Voice Oscillator").c_str());}
      class Fl_Group
    } {
      Fl_Group voiceparametersgroup {
        xywh {0 0 760 610} box THIN_UP_FRAME color 48
        code0 {if (pars->VoicePar[nvoice].Enabled==0) o->deactivate();}
      } {
        Fl_Group voicemodegroup {
          xywh {0 0 760 610}
        } {
          Fl_Group voiceFMparametersgroup {
            label MODULATOR
            xywh {530 5 230 565} box THIN_UP_FRAME color 48 labelfont 1 labelsize 12 align 17
            code0 {if (pars->VoicePar[nvoice].PFMEnabled==0) o->deactivate();}
          } {
            Fl_Group modfrequency {
              label {Mod FREQUENCY}
              xywh {535 204 220 161} box THIN_UP_BOX labelfont 1 labelsize 11 align 17
            } {
              Fl_Group voiceFMfreqenvgroup {
                label {ADSynth Modulator - Frequency Envelope}
                xywh {540 290 205 70} box FLAT_BOX color 51 align 144
                code0 {o->init(pars->VoicePar[nvoice].FMFreqEnvelope, npart, kititem, nvoice | 0xc0, 1);}
                code1 {if (pars->VoicePar[nvoice].PFMFreqEnvelopeEnabled==0) o->deactivate();}
                class EnvelopeUI
              } {}
              Fl_Check_Button ModFreqEn {
                label On
                callback {//
                    if (o->value() == 0)
                        voiceFMfreqenvgroup->deactivate();
                    else
                        voiceFMfreqenvgroup->activate();
                    o->redraw();
                    send_data(104, o->value(), 0xc8);}
                tooltip {Enable Frequency Envelope} xywh {545 295 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
                code0 {o->value(pars->VoicePar[nvoice].PFMFreqEnvelopeEnabled);}
              }
              Fl_Counter ModCoarseDetune {
                label {Coarse Det.}
                callback {//
                    send_data(101, o->value(), 0xc0);}
                tooltip {Coarse Detune} xywh {685 270 60 15} labelsize 10 align 1 minimum -64 maximum 63 step 1 textfont 1 textsize 11
                code0 {int k = pars->VoicePar[nvoice].PFMCoarseDetune % 1024;}
                code1 {if (k >= 512) k-= 1024;}
                code2 {o->value(k);}
                code3 {o->lstep(10);}
              }
              Fl_Counter ModOctave {
                label Octave
                callback {//
                    send_data(99, o->value(), 0xc8);}
                tooltip Octave xywh {625 270 45 15} type Simple color 237 selection_color 0 labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
                code0 {int k = pars->VoicePar[nvoice].PFMCoarseDetune / 1024;}
                code1 {if (k >= 8) k -= 16;}
                code2 {o->value(k);}
              }
              Fl_Value_Output fmdetunevalueoutput {
                label Detune
                callback {o->value(getDetune((pars->VoicePar[nvoice].PFMDetuneType == 0) ? (pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PFMDetuneType), 0, pars->VoicePar[nvoice].PFMDetune));}
                xywh {542 224 36 16} box THIN_DOWN_BOX labelsize 8 align 5 minimum -5000 maximum 5000 textfont 1 textsize 8
                code0 {o->step(0.01, 1);}
                code1 {o->value(getDetune((pars->VoicePar[nvoice].PFMDetuneType == 0) ? (pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PFMDetuneType), 0, pars->VoicePar[nvoice].PFMDetune));}
              }
              Fl_Slider ModDetune {
                callback {//
                    if (Fl::event_button() == 3)
                        o->value(0);
                    send_data(96, o->value(), 0xd8);}
                tooltip {Fine Detune (cents)} xywh {578 224 168 16} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMDetune-8192);}
                class mwheel_slider_rev
              }
              Fl_Choice ModDetuneType {
                label {Detune Type}
                callback {//
                    send_data(100, o->value(), 0xd0);}
                xywh {540 270 75 15} down_box BORDER_BOX selection_color 49 labelsize 10 align 5 textfont 1 textsize 10
                code0 {//
                    o->add("Default");
                    o->add("L35cents");
                    o->add("L10cents");
                    o->add("E100cents");
                    o->add("E1200cents");}
                code1 {o->value(pars->VoicePar[nvoice].PFMDetuneType);}
              } {}
              Fl_Check_Button Mod440 {
                label 440Hz
                callback {//
send_data(98, o->value(), 0xd0);}
                tooltip {Set the modulator base frequency to 440Hz} xywh {683 242 55 15} down_box DOWN_BOX labelfont 1 labelsize 11
                code0 {o->value(pars->VoicePar[nvoice].PFMFixedFreq);}
              }
            }
            Fl_Group {} {
              label {Mod AMPLITUDE}
              xywh {535 55 220 149} box THIN_UP_BOX labelfont 1 labelsize 11 align 17
            } {
              Fl_Value_Slider ModVolume {
                label Vol
                callback {if (Fl::event_button() == 3)
    o->value(90);
send_data(80, o->value(), 0xc8);}
                tooltip Volume xywh {540 70 160 15} type {Horz Knob} box THIN_DOWN_BOX labelsize 11 align 8 maximum 127 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMVolume);}
                class mwheel_val_slider_rev
              }
              Fl_Value_Slider ModVsense {
                label {V.Sns}
                callback {if (Fl::event_button() == 3)
    o->value(64);
send_data(81, o->value(), 0xc8);}
                tooltip {Velocity Sensing Function - rightmost/max to disable)} xywh {540 90 160 15} type {Horz Knob} box THIN_DOWN_BOX labelsize 11 align 8 maximum 127 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMVelocityScaleFunction);}
                class mwheel_val_slider_rev
              }
              Fl_Group voiceFMampenvgroup {
                label {ADSynth Modulator - Amplitude Envelope} open
                xywh {542 129 205 70} box FLAT_BOX color 51 align 144
                code0 {o->init(pars->VoicePar[nvoice].FMAmpEnvelope, npart, kititem, nvoice | 0xc0, 0);}
                code1 {if (pars->VoicePar[nvoice].PFMAmpEnvelopeEnabled==0) o->deactivate();}
                class EnvelopeUI
              } {}
              Fl_Check_Button ModAmpEn {
                label On
                callback {//
                    if (o->value() == 0)
                        voiceFMampenvgroup->deactivate();
                    else
                        voiceFMampenvgroup->activate();
                    o->redraw();
                    send_data(88, o->value(), 0xc8);}
                tooltip {Enable Amplitude Envelope} xywh {546 134 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
                code0 {o->value(pars->VoicePar[nvoice].PFMAmpEnvelopeEnabled);}
              }
              Fl_Value_Slider ModFdamp {
                label {F.Damp}
                callback {if (Fl::event_button() == 3)
    o->value(0);
send_data(82, o->value(), 0xc8);}
                tooltip {Modulator Damp at Higher frequency} xywh {540 110 160 15} type {Horz Knob} box THIN_DOWN_BOX labelsize 11 align 8 minimum -64 maximum 63 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMVolumeDamp-64);}
                class mwheel_val_slider_rev
              }
            }
            Fl_Group modoscil {
              label {                       }
              xywh {535 365 220 200} box THIN_UP_BOX labelfont 1 labelsize 11 align 17
            } {
              Fl_Text_Display {} {
                label {Local Oscillator}
                xywh {553 385 95 2} box NO_BOX labelfont 1 labelsize 13
              }
              Fl_Group fmoscil {
                xywh {535 425 220 140} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
                code0 {oscFM = new Oscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
                code1 {int nv=nvoice; if (pars->VoicePar[nvoice].PextFMoscil>=0) nv=pars->VoicePar[nvoice].PextFMoscil;}
                code2 {oscFM->init(pars->VoicePar[nv].FMSmp,0,pars->VoicePar[nvoice].PFMoscilphase, synth);}
              } {}
              Fl_Button changeFMoscilbutton {
                label Waveform
                callback {//
                    if (oscedit != NULL)
                        delete oscedit;
                    int nv = nvoice;
                    if (pars->VoicePar[nvoice].PextFMoscil >= 0)
                        nv = pars->VoicePar[nvoice].PextFMoscil;
                    oscedit = new OscilEditor(pars->VoicePar[nv].FMSmp, fmoscil, NULL, NULL, synth, npart, kititem, nvoice + 0xC0);
                    if ((Fl::event_button() == 3))
                        synth->getGuiMaster()->partui->adnoteui->ADnoteVoice->hide();}
                xywh {666 372 62 12} box THIN_UP_BOX labelfont 1 labelsize 9
                code0 {if (pars->VoicePar[nvoice].PextFMoscil>=0) o->labelcolor(FL_BLUE);}
              }
              Fl_Slider ModPhase {
                label Phase
                callback {//
                    send_data(112, o->value(), 0xd8);}
                xywh {659 401 75 12} type {Horz Knob} box THIN_DOWN_BOX labelsize 10 align 1 minimum -64 maximum 63 step 1
                code0 {o->value(64-pars->VoicePar[nvoice].PFMoscilphase);}
                class mwheel_slider_rev
              }
              Fl_Choice ExtModOsc {
                label Use
                callback {//
                    send_data(113, o->value() - 1, 0xd0);}
                xywh {562 400 75 15} down_box BORDER_BOX selection_color 49 labelsize 10 align 1 textfont 1 textsize 10
                code0 {o->add("Internal");}
                code1 {char tmp[50]; for (int i = 0; i < nvoice; ++i) {sprintf(tmp, "Mod.%2d", i + 1); o->add(tmp);};}
                code3 {o->value(pars->VoicePar[nvoice].PextFMoscil + 1);}
              } {}
            }
            Fl_Choice ExtMod {
              label {Oscillator Source}
              callback {//
                  send_data(17, o->value() - 1, 0xd0);}
              xywh {667 32 88 20} down_box BORDER_BOX selection_color 49 labelsize 10 align 5 textfont 1 textsize 10
              code0 {o->add("Local");}
              code1 {char tmp[50]; for (int i = 0; i < nvoice; ++i) {sprintf(tmp, "Voice %2d", i + 1); o->add(tmp);};}
              code2 {o->value(pars->VoicePar[nvoice].PFMVoice + 1);}
              code3 {if (lrint(o->value())) {modoscil->deactivate(); modfrequency->deactivate();}}
            } {}
          }
          Fl_Choice ModType {
            label {Type:}
            callback {//
                if (o->value() == 0)
                    voiceFMparametersgroup->deactivate();
                else
                    voiceFMparametersgroup->activate();
                o->redraw();
                send_data(16, o->value(), 0xc8);}
            xywh {535 32 90 20} down_box BORDER_BOX color 237 selection_color 49 labelsize 11 align 5 textsize 11
            code0 {o->value(pars->VoicePar[nvoice].PFMEnabled);}
          } {
            MenuItem {} {
              label OFF
              xywh {40 40 100 20} labelfont 1
            }
            MenuItem {} {
              label MORPH
              xywh {50 50 100 20} labelfont 1
            }
            MenuItem {} {
              label RING
              xywh {60 60 100 20} labelfont 1
            }
            MenuItem {} {
              label PM
              xywh {70 70 100 20} labelfont 1
            }
            MenuItem {} {
              label FM
              xywh {80 80 100 20} labelfont 1
            }
            MenuItem {} {
              label PWM
              xywh {90 90 100 20} labelfont 1
            }
          }
          Fl_Group {} {
            label FREQUENCY
            xywh {5 280 525 120} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
          } {
            Fl_Group voicefreqenvgroup {
              label {ADSynth Voice - Frequency Envelope}
              xywh {10 325 205 70} box FLAT_BOX color 51 align 144
              code0 {o->init(pars->VoicePar[nvoice].FreqEnvelope, npart, kititem, nvoice | 0x80, 1);}
              code1 {if (pars->VoicePar[nvoice].PFreqEnvelopeEnabled==0) o->deactivate();}
              class EnvelopeUI
            } {}
            Fl_Check_Button FreqEn {
              label On
              callback {//
                  if (o->value() == 0)
                      voicefreqenvgroup->deactivate();
                  else
                      voicefreqenvgroup->activate();
                  o->redraw();
                  send_data(40, o->value(), 0xc8);}
              tooltip {Enable Frequency Envelope} xywh {15 330 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
              code0 {o->value(pars->VoicePar[nvoice].PFreqEnvelopeEnabled);}
            }
            Fl_Group voicefreqlfogroup {
              label {Frequency LFO     }
              xywh {215 325 230 70} box FLAT_BOX color 47 align 144
              code0 {o->init(pars->VoicePar[nvoice].FreqLfo, npart, kititem, 128 + nvoice, 1);}
              code1 {if (pars->VoicePar[nvoice].PFreqLfoEnabled==0) o->deactivate();}
              class LFOUI
            } {}
            Fl_Check_Button FreqLfoEn {
              label On
              callback {//
    bool enab = (o->value() > 0.5);
    if (enab)
    {
        voicefreqlfogroup->activate();
        synth->getGuiMaster()->partui->adnoteui->voicelistitem[nvoice]->voicelistvibratto->activate();
    }
    else
    {
        voicefreqlfogroup->deactivate();
        synth->getGuiMaster()->partui->adnoteui->voicelistitem[nvoice]->voicelistvibratto->deactivate();
    }
    o->redraw();

    send_data(41, o->value(), 0xc8);}
              tooltip {Enable Frequency LFO} xywh {220 330 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
              code0 {o->value(pars->VoicePar[nvoice].PFreqLfoEnabled);}
            }
            Fl_Counter Octave {
              label Octave
              callback {//
                  send_data(35, o->value(), 0xc8);}
              tooltip Octave xywh {464 306 45 15} type Simple color 237 selection_color 0 labelsize 10 align 1 minimum -8 maximum 7 step 1 value 4 textfont 1 textsize 11
              code0 {int k = pars->VoicePar[nvoice].PCoarseDetune / 1024;}
              code1 {if (k >= 8) k -= 16;}
              code2 {o->value(k);}
            }
            Fl_Counter CoarseDetune {
              label {Coarse Det.}
              callback {//
                  send_data(37, o->value(), 0xc0);}
              tooltip {Coarse Detune} xywh {455 375 60 20} labelsize 10 align 1 minimum -64 maximum 63 step 1 textfont 1 textsize 11
              code0 {int k = pars->VoicePar[nvoice].PCoarseDetune % 1024;}
              code1 {if (k >= 512) k -= 1024;}
              code2 {o->value(k);}
              code3 {o->lstep(10);}
            }
            Fl_Value_Output detunevalueoutput {
              label Detune
              callback {o->value(getDetune((pars->VoicePar[nvoice].PDetuneType==0)?(pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PDetuneType),0,pars->VoicePar[nvoice].PDetune)*pars->getBandwidthDetuneMultiplier());}
              xywh {10 306 38 16} box THIN_DOWN_BOX labelsize 10 align 5 minimum -5000 maximum 5000 textfont 1 textsize 10
              code0 {o->step(0.01, 1);}
              code1 {o->value(getDetune((pars->VoicePar[nvoice].PDetuneType==0)?(pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PDetuneType),0,pars->VoicePar[nvoice].PDetune)*pars->getBandwidthDetuneMultiplier());}
            }
            Fl_Slider Detune {
              callback {//
    if (Fl::event_button() == 3)
        o->value(0);
    int detune = lrint(o->value());
    send_data(32, detune, 0xd8);}
              tooltip {Fine Detune (cents)} xywh {48 306 397 16} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
              code0 {o->value(pars->VoicePar[nvoice].PDetune-8192);}
              class mwheel_slider_rev
            }
            Fl_Check_Button Freq440 {
              label 440Hz
              callback {//
                  int x = lrint(o->value());
                  if (x == 0 && Mod440->value() == 0)
                      fixedfreqetdial->deactivate();
                  else
                      fixedfreqetdial->activate();
                  send_data(34, o->value(), 0xc0);}
              tooltip {Set the voice base frequency to 440Hz} xywh {340 286 55 15} down_box DOWN_BOX labelfont 1 labelsize 11
              code0 {o->value(pars->VoicePar[nvoice].Pfixedfreq);}
            }
            Fl_Dial fixedfreqetdial {
              label {Eq.T.}
              callback {//
send_data(33, o->value(), 0xc8);}
              tooltip {How the frequency varies according to the keyboard (leftmost for fixed frequency)} xywh {400 284 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].PfixedfreqET);}
              code1 {if (pars->VoicePar[nvoice].Pfixedfreq==0) o->deactivate();}
              code2 {o->init(0);}
              code3 {o->setValueType(VC_FixedFreqET);}
              class WidgetPDial
            }
            Fl_Choice FreqDetunetype {
              label {Detune Type}
              callback {//
send_data(36, o->value(), 0xd0);}
              xywh {450 340 75 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
              code0 {o->add("Default");o->add("L35cents");o->add("L10cents");o->add("E100cents");o->add("E1200cents");}
              code1 {o->value(pars->VoicePar[nvoice].PDetuneType);}
            } {}
            Fl_Dial bend {
              label Bend
              callback {//
send_data(38, o->value(), 0xc8);}
              tooltip {Pitch bend scaling for this voice} xywh {70 284 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].PBendAdjust);}
              code1 {o->init(88);}
              code2 {o->setValueType(VC_PitchBend);}
              class WidgetPDial
            }
            Fl_Dial offset {
              label Offset
              callback {//
send_data(39, o->value(), 0xc8);}
              tooltip {Offset of the frequency in Hz.} xywh {130 284 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].POffsetHz);}
              code1 {o->init(64);}
              code2 {o->setValueType(VC_FreqOffsetHz);}
              class WidgetPDial
            }
          }
          Fl_Group voiceoscil {
            xywh {82 457 445 145} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
            code0 {osc = new Oscilloscope(o->x(),o->y(),o->w(),o->h(), "");}
            code1 {//
                int nv = nvoice;
                if (pars->VoicePar[nvoice].Pextoscil >= 0)
                    nv = pars->VoicePar[nvoice].Pextoscil;}
            code2 {//
                osc->init(pars->VoicePar[nv].OscilSmp, 0,
                          pars->VoicePar[nvoice].Poscilphase, synth);}
          } {}
          Fl_Button changevoiceoscilbutton {
            label Waveform
            callback {//
    if (oscedit)
        delete oscedit;
    int nv = nvoice;
    if (pars->VoicePar[nvoice].Pextoscil >= 0)
        nv=pars->VoicePar[nvoice].Pextoscil;
    oscedit = new OscilEditor(pars->VoicePar[nv].OscilSmp, voiceoscil, NULL, NULL, synth, npart, kititem, nvoice + 0x80);
    if ((Fl::event_button() == 3))
        synth->getGuiMaster()->partui->adnoteui->ADnoteVoice->hide();}
            xywh {5 535 72 20} box THIN_UP_BOX labelfont 1 labelsize 11
            code0 {if (pars->VoicePar[nvoice].Pextoscil>=0) o->labelcolor(FL_BLUE);}
          }
          Fl_Box {} {
            label Oscillator
            xywh {5 481 75 18} labelfont 1 labelsize 12 align 128
          }
          Fl_Slider VoiceOscPhase {
            label Phase
            callback {//
                if (Fl::event_button() == 3)
                    o->value(0);


                send_data(136, o->value(), 0xd8);}
            xywh {5 573 72 12} type {Horz Knob} box THIN_DOWN_BOX labelsize 10 align 1 minimum -64 maximum 63 step 1
            code0 {o->value(64-pars->VoicePar[nvoice].Poscilphase);}
            class mwheel_slider_rev
          }
          Fl_Box {} {
            xywh {163 35 82 35} box THIN_UP_FRAME
          }
          Fl_Check_Button ResonanceEn {
            label Resonance
            callback {//
    bool enab = (o->value() > 0.5);
    pars->VoicePar[nvoice].Presonance = enab;
    synth->getGuiMaster()->partui->adnoteui->voicelistitem[nvoice]->voiceresonanceenabled->value(enab);
    send_data(130, enab, 0xc0);}
            tooltip {Resonance On/Off} xywh {195 50 17 19} down_box DOWN_BOX labelsize 12 align 1
            code0 {o->value(pars->VoicePar[nvoice].Presonance);}
          }
          Fl_Choice UseOsc {
            label Use
            callback {//
                send_data(137, o->value() - 1, 0xd0);}
            xywh {5 512 72 15} down_box BORDER_BOX selection_color 49 labelsize 10 align 1 textfont 1 textsize 10
            code0 {o->add("Internal");}
            code1 {char tmp[50]; for (int i = 0; i < nvoice; ++i) {sprintf(tmp, "Voice %2d", i + 1); o->add(tmp);};}
            code3 {o->value(pars->VoicePar[nvoice].Pextoscil + 1);}
          } {}
          Fl_Check_Button UnisonEn {
            label Unison
            callback {//
send_data(56, o->value(), 0xd0);}
            tooltip {Enable/Disable} xywh {31 424 19 15} down_box DOWN_BOX labelfont 1 labelsize 12 align 1
            code0 {int tmp = (pars->VoicePar[nvoice].Unison_size);}
            code1 {o->value(tmp > 1);}
          }
          Fl_Group unisongroup {
            xywh {80 403 447 50} box PLASTIC_UP_BOX color 231 deactivate
            code0 {int tmp = pars->VoicePar[nvoice].Unison_size; if (tmp > 1) o->activate();}
            code1 {unisonsize->labelcolor(FL_BLACK);int i = -1; while (true){ i++; if(pars->ADnote_unison_sizes[i] == 0) break; if (pars->ADnote_unison_sizes[i] == tmp){ unisonsize->labelcolor(FL_RED); break;}}}
          } {
            Fl_Spinner unisonsize {
              label Size
              callback {//
send_data(53, o->value(), 0xc0);}
              tooltip {Number of unison sub-voices} xywh {90 424 40 16} box THIN_UP_BOX color 7 labelfont 1 labelsize 11 align 5 minimum 2 maximum 50 value 2 textsize 12
              code0 {int tmp = pars->VoicePar[nvoice].Unison_size;}
              code1 {if (tmp < 2) tmp = 2;}
              code2 {o->value(tmp);}
            }
            Fl_Dial UnisonStereo {
              label Stereo
              callback {//
send_data(50, o->value(), 0xc8);}
              tooltip {Stereo Spread} xywh {349 420 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].Unison_stereo_spread);}
              code1 {o->init(64);}
              class WidgetPDial
            }
            Fl_Dial UnisonVib {
              label {Vib.}
              callback {//
send_data(51, o->value(), 0xc8);}
              tooltip Vibratto xywh {384 420 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].Unison_vibratto);}
              code1 {o->init(64);}
              class WidgetPDial
            }
            Fl_Choice UnisonInvert {
              label Invert
              callback {//
send_data(54, o->value(), 0xc0);}
              tooltip {Phase Invert} xywh {451 425 67 15} down_box BORDER_BOX labelsize 11 align 1 textfont 1 textsize 10
              code0 {//
                  o->add("None");
                  o->add("Random");
                  for (int i = 2; i <= 5; ++i)
                  {
                      string tmp = asString(100 / i) + string(" %");
                      o->add(tmp.c_str());
                  }}
              code1 {o->value(pars->VoicePar[nvoice].Unison_invert_phase);}
            } {}
            Fl_Slider UnisonFreqSpread {
              label {Frequency Spread}
              callback {//
                  if (Fl::event_button() == 3)
                      o->value(60);
                  unisonspreadoutput->do_callback();
                  send_data(48, o->value(), 0xd8);}
              tooltip {Frequency Spread of the Unison} xywh {181 425 120 16} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 9 maximum 127 step 1 value 64
              code0 {o->value(pars->VoicePar[nvoice].Unison_frequency_spread);}
              class mwheel_slider_rev
            }
            Fl_Value_Output unisonspreadoutput {
              label {(cents)}
              callback {o->value(pars->getUnisonFrequencySpreadCents(nvoice));}
              xywh {143 425 38 16} box THIN_DOWN_BOX labelsize 10 align 5 maximum 1000 textfont 1 textsize 10
              code0 {o->step(0.1, 1);}
              code1 {o->value(pars->getUnisonFrequencySpreadCents(nvoice));}
            }
            Fl_Dial UnisonVspeed {
              label {V.speed}
              callback {//
send_data(52, o->value(), 0xc8);}
              tooltip {Vibratto Average Speed} xywh {420 420 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].Unison_vibratto_speed);}
              code1 {o->init(64);}
              class WidgetPDial
            }
            Fl_Dial UnisonPhRnd {
              label {Ph.rnd}
              callback {//
send_data(49, o->value(), 0xc8);}
              tooltip {Phase randomness} xywh {315 420 25 25} box ROUND_UP_BOX labelsize 10 align 9 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].Unison_phase_randomness);}
              code1 {o->init(127);}
              class WidgetPDial
            }
          }
        }
        Fl_Group amplitudegroup {
          label AMPLITUDE
          xywh {5 70 240 210} box UP_FRAME labelfont 1 labelsize 12 align 17
        } {
          Fl_Dial voicevolume {
            label Volume
            callback {//
    if (Fl::event_button() == 3)
        o->value(100);
    int vol = lrint(o->value());
    synth->getGuiMaster()->partui->adnoteui->voicelistitem[nvoice]->voicevolume->value(vol);
    send_data(0, vol, 0xc8);}
            tooltip Volume xywh {42 87 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
            code0 {o->setValueType(VC_ADDVoiceVolume);}
            code1 {o->value(pars->VoicePar[nvoice].PVolume);}
            class WidgetPDial
          }
          Fl_Dial voicevsns {
            label {Vel Sens}
            callback {//
send_data(1, o->value(), 0xc8);}
            tooltip {Velocity Sensing Function - rightmost/max disables)} xywh {107 87 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
            code0 {o->value(pars->VoicePar[nvoice].PAmpVelocityScaleFunction);}
            code1 {o->init(127);}
            code2 {o->setValueType(VC_AmpVelocitySense);}
            class WidgetPDial
          }
          Fl_Group voiceampenvgroup {
            label {ADSynth Voice - Amplitude Envelope}
            xywh {10 135 205 70} box FLAT_BOX color 51 align 144
            code0 {o->init(pars->VoicePar[nvoice].AmpEnvelope, npart, kititem, nvoice | 0x80, 0);}
            code1 {if (!pars->VoicePar[nvoice].PAmpEnvelopeEnabled) o->deactivate();}
            class EnvelopeUI
          } {}
          Fl_Dial voicepan {
            label Pan
            callback {//
    int pan = lrint(o->value());
    send_data(2, pan, 0xd8);}
            tooltip {Voice panning - leftmost/zero gives random panning} xywh {174 87 34 34} box ROUND_UP_BOX labelsize 10 align 6 maximum 127 step 1
            code0 {o->setValueType(VC_PanningRandom);}
            code1 {o->value(pars->VoicePar[nvoice].PPanning);}
            code2 {o->init(64);}
            class WidgetPDial
          }
          Fl_Light_Button voicerandompan {
            label Rand
            callback {//
    voicepan->value(0);
    o->value(1);
    send_data(2, 0, 0xd0);}
            tooltip {Voice random panning On/Off} xywh {196 122 7 13} box NO_BOX color 35 selection_color 88 labelsize 10 align 72
            code0 {o->value(pars->randomVoicePan(nvoice));}
          }
          Fl_Check_Button AmpEnvEn {
            label On
            callback {//
                if (o->value() == 0)
                    voiceampenvgroup->deactivate();
                else
                    voiceampenvgroup->activate();
                o->redraw();
                send_data(8, o->value(), 0xc8);}
            tooltip {Enable Amplitude Envelope} xywh {15 139 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PAmpEnvelopeEnabled);}
          }
          Fl_Group voiceamplfogroup {
            label {Amplitude LFO     }
            xywh {10 205 230 70} box FLAT_BOX color 47 align 144
            code0 {o->init(pars->VoicePar[nvoice].AmpLfo, npart, kititem, 128 + nvoice, 0);}
            code1 {if (pars->VoicePar[nvoice].PAmpLfoEnabled==0) o->deactivate();}
            class LFOUI
          } {}
          Fl_Check_Button AmpLfoEn {
            label On
            callback {//
                if (o->value() == 0)
                    voiceamplfogroup->deactivate();
                else
                    voiceamplfogroup->activate();
                o->redraw();
                send_data(9, o->value(), 0xc8);}
            tooltip {Enable Amplitude LFO} xywh {15 210 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PAmpLfoEnabled);}
          }
          Fl_Check_Button VolumeMinus {
            label Minus
            callback {//
send_data(4, o->value(), 0xc0);}
            tooltip {Reverse phase relative to other voices} xywh {10 75 50 10} down_box DOWN_BOX labelsize 12
            code0 {o->value(pars->VoicePar[nvoice].PVolumeminus);}
          }
        }
        Fl_Group voicefiltergroup {
          label {FILTER      }
          xywh {245 35 285 245} box UP_FRAME labelfont 1 labelsize 12 align 17
          code0 {if (pars->VoicePar[nvoice].PFilterEnabled==0) o->deactivate();}
        } {
          Fl_Group voicefilter {
            label {ADsynth Voice - Filter}
            xywh {250 60 275 75} box FLAT_BOX color 50 align 144
            code0 {o->init(pars->VoicePar[nvoice].VoiceFilter,&pars->VoicePar[nvoice].PFilterVelocityScale, &pars->VoicePar[nvoice].PFilterVelocityScaleFunction, npart, kititem, 128 + nvoice);}
            class FilterUI
          } {}
          Fl_Group voicefilterenvgroup {
            label {ADSynth Voice - Filter Envelope}
            xywh {250 135 275 70} box FLAT_BOX color 51 align 144
            code0 {o->init(pars->VoicePar[nvoice].FilterEnvelope, npart, kititem, nvoice | 0x80, 2);}
            code1 {if (pars->VoicePar[nvoice].PFilterEnvelopeEnabled==0) o->deactivate();}
            class EnvelopeUI
          } {}
          Fl_Check_Button FilterEnvEn {
            label On
            callback {//
                send_data(72, o->value(), 0xd8);}
            tooltip {Enable Filter Envelope} xywh {255 140 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PFilterEnvelopeEnabled);}
          }
          Fl_Group voicefilterlfogroup {
            label {Filter LFO     }
            xywh {250 205 230 70} box FLAT_BOX color 47 align 144
            code0 {o->init(pars->VoicePar[nvoice].FilterLfo, npart, kititem, 128 + nvoice, 2);}
            code1 {if (pars->VoicePar[nvoice].PFilterLfoEnabled==0) o->deactivate();}
            class LFOUI
          } {}
          Fl_Check_Button FilterLfoEn {
            label On
            callback {//
                send_data(73, o->value(), 0xc8);}
            tooltip {Enable Filter LFO} xywh {255 210 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PFilterLfoEnabled);}
          }
        }
        Fl_Group {} {
          label 1
          xywh {10 40 31 26} labeltype EMBOSSED_LABEL labelfont 1 labelsize 22 align 16 hide
          code0 {//
              char tmp[2]; tmp[0] = nvoice + 49; tmp[1] = 0; o->copy_label(tmp);}
        } {}
        Fl_Box {} {
          xywh {5 35 65 35} box THIN_UP_FRAME
        }
        Fl_Choice SoundType {
          callback {//
              int x = lrint(o->value());
              send_data(138, x, 0xd0);}
          tooltip {Oscillator Type (sound/noise)} xywh {5 456 72 20} down_box BORDER_BOX selection_color 49 labelsize 10 when 6 textfont 1 textsize 10
          code0 {o->value(pars->VoicePar[nvoice].Type);}
          code1 {if (pars->VoicePar[nvoice].Type!=0) voicemodegroup->deactivate();}
        } {
          MenuItem {} {
            label Sound
            xywh {5 5 100 20} labelfont 1 labelsize 11 labelcolor 2
          }
          MenuItem {} {
            label Noise
            xywh {15 15 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Noise
            xywh {25 25 100 20} labelfont 1 labelsize 11 labelcolor 5
          }
        }
        Fl_Group {} {
          xywh {69 35 95 35} box THIN_UP_FRAME
        } {
          Fl_Value_Slider Delay {
            label Delay
            callback {if (Fl::event_button() == 3)
    o->value(0);

send_data(128, o->value(), 0xc8);}
            tooltip {Time before the voice activates} xywh {73 51 84 12} type {Horz Knob} box THIN_DOWN_BOX labelsize 11 align 1 maximum 127 step 1
            code0 {o->value(pars->VoicePar[nvoice].PDelay);}
            code1 {o->setValueType(VC_ADDVoiceDelay);o->useCustomTip(true);}
            class mwheel_val_slider_rev
          }
        }
        Fl_Check_Button bypassfiltercheckbutton {
          label {Bypass Global}
          callback {//
send_data(64, o->value(), 0xc0);}
          xywh {415 41 14 14} down_box DOWN_BOX labelsize 12 align 8
          code0 {o->value(pars->VoicePar[nvoice].Pfilterbypass);}
        }
        Fl_Check_Button FilterEn {
          label On
          callback {//
              bypassfiltercheckbutton->redraw();
              send_data(68, o->value(), 0xd8);}
          tooltip {Enable Filter} xywh {250 41 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
          code0 {o->value(pars->VoicePar[nvoice].PFilterEnabled);}
        }
        Fl_Box noiselabel {
          label Noise
          callback {switch (pars->VoicePar[nvoice].Type)
{
    case 1:
        o->copy_label("White Noise");
        o->labelcolor(7);
        break;
    case 2:
        o->copy_label("Pink Noise");
        o->labelcolor(5);
        break;
    default:
        o->hide();
        return;
}
o->show();}
          xywh {105 497 400 65} labelfont 1 labelsize 50 labelcolor 7
          code0 {o->hide(); int tmp = pars->VoicePar[nvoice].Type;}
          code1 {if (tmp == 1) {o->copy_label("White Noise"); o->labelcolor(7);} else if (tmp > 1) {o->copy_label("Pink Noise"); o->labelcolor(5);}}
          code2 {if (tmp > 0) o->show();}
        }
      }
      Fl_Check_Button voiceonbutton {
        label On
        callback {//
    send_data(129, o->value(), 0xd8);}
        xywh {14 43 46 20} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1
        code0 {o->value(pars->VoicePar[nvoice].Enabled);}
      }
    }
  }
  Function {ADvoiceUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {//
        nvoice = 0;
        pars = NULL;
        oscedit = NULL;} {}
  }
  Function {send_data(int control, float value, int type)} {} {
    code {//
collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, nvoice | 0x80);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char voice = getData->data.engine & 0x1f;
    int tmp;
    bool val_bool = (value > 0.5f);

    if (voice != nvoice && control != 129)
        return;

    switch(control)
    {
        case 0:
            voicevolume->value(value);
            synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voicevolume->value(value);
            break;

        case 1:
            voicevsns->value(value);
            break;

        case 2:
            voicepan->value(value);
            voicerandompan->value(value == 0);
            synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voicepanning->value(value);
            break;

        case 4:
            VolumeMinus->value(val_bool);
            break;

        case 8:
            AmpEnvEn->value(val_bool);
            if (value == 0)
                    voiceampenvgroup->deactivate();
                else
                    voiceampenvgroup->activate();
            break;

        case 9:
            AmpLfoEn->value(val_bool);
            if (value == 0)
                    voiceamplfogroup->deactivate();
                else
                    voiceamplfogroup->activate();
            break;

        case 16:
            ModType->value((int)value);
            if (value == 0)
                    voiceFMparametersgroup->deactivate();
                else
                    voiceFMparametersgroup->activate();
            break;

        case 17:
            tmp = (int) value;
            ExtMod->value(tmp + 1);
            if (tmp >= 0)
                  {
                      modoscil->deactivate();
                      modfrequency->deactivate();
                  }
                  else
                  {
                      modoscil->activate();
                      modfrequency->activate();
                  }
                  voiceFMparametersgroup->redraw();
            break;

        case 32:
            Detune->value(value);
            detunevalueoutput->do_callback();
            synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voicedetune->value(value);
            synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->detunevalueoutput->do_callback();
            break;

        case 33:
            fixedfreqetdial->value(value);
            break;

        case 34:
            Freq440->value(val_bool);
            if (value == 0 && Mod440->value() == 0)
                fixedfreqetdial->deactivate();
            else
                fixedfreqetdial->activate();
            break;

        case 35:
            Octave->value((int) value);
            break;

        case 36:
            FreqDetunetype->value((int) value);
            detunevalueoutput->do_callback();
            break;

        case 37:
            CoarseDetune->value((int) value);
            break;

        case 38:
            bend->value(value);
            break;

        case 39:
            offset->value(value);
            break;

        case 40:
            FreqEn->value(val_bool);
            if (value == 0)
                voicefreqenvgroup->deactivate();
            else
                voicefreqenvgroup->activate();
            break;

        case 41:
            FreqLfoEn->value(val_bool);
             if (value == 0)
                 voicefreqlfogroup->deactivate();
             else
                 voicefreqlfogroup->activate();
            break;

        case 48:
            UnisonFreqSpread->value(value);
            unisonspreadoutput->do_callback();
            break;

        case 49:
            UnisonPhRnd->value(value);
            break;

        case 50:
            UnisonStereo->value(value);
            break;

        case 51:
            UnisonVib->value(value);
            break;

        case 52:
            UnisonVspeed->value(value);
            break;

        case 53:
            {
                tmp = (int) value;
                unisonsize->value(tmp);
                int colr = FL_BLACK;
                int i = 0;
                while(pars->ADnote_unison_sizes[i] != 0)
                {
                    if (pars->ADnote_unison_sizes[i] == tmp)
                    {
                        colr = FL_RED;
                        break;
                    }
                    ++ i;
                }
                unisonsize->labelcolor(colr);
                unisongroup->redraw();
            }
            break;

        case 54:
            UnisonInvert->value(value);
            break;

        case 56:
            tmp = (int) value;
            UnisonEn->value(tmp);
            if (tmp == 0)
            {
                unisonsize->value(2);
                unisongroup->deactivate();
            }
            else
            {
                tmp = lrint(unisonsize->value());
                unisongroup->activate();
                int colr = FL_BLACK;
                int i = -1;
                while (true)
                {
                    ++i;
                    if (pars->ADnote_unison_sizes[i] == 0)
                        break;
                    if (pars->ADnote_unison_sizes[i] == tmp)
                    {
                        colr = FL_RED;
                        break;
                    }
                }
                unisonsize->labelcolor(colr);
                unisongroup->redraw();
            }
            break;

        case 68:
            FilterEn->value(val_bool);
            if (val_bool)
                  voicefiltergroup->activate();
              else
                  voicefiltergroup->deactivate();
              bypassfiltercheckbutton->redraw(); // yes it's needed!
            break;

        case 72:
            FilterEnvEn->value(val_bool);
            if (val_bool)
                voicefilterenvgroup->activate();
            else
                voicefilterenvgroup->deactivate();
            FilterEnvEn->redraw(); // yes it's needed!
            break;

        case 73:
            FilterLfoEn->value(val_bool);
            if (val_bool)
                voicefilterlfogroup->activate();
            else
                voicefilterlfogroup->deactivate();
            FilterLfoEn->redraw(); // yes it's needed!
            break;

        case 80:
            ModVolume->value(value);
            break;

        case 81:
            ModVsense->value(value);
            break;

        case 82:
            ModFdamp->value(value);
            break;

        case 88:
            ModAmpEn->value(val_bool);
            if (val_bool)
                voiceFMampenvgroup->activate();
            else
                voiceFMampenvgroup->deactivate();
            break;

        case 96:
            ModDetune->value(value);
            fmdetunevalueoutput->do_callback();
            break;

        case 98:
            tmp = (val_bool);
            Mod440->value(tmp);
            if (tmp == 0 && lrint(Freq440->value() == 0))
                fixedfreqetdial->deactivate();
            else
                fixedfreqetdial->activate();
            break;
        case 99:
            ModOctave->value((int) value);
            break;

        case 100:
            ModDetuneType->value((int) value);
            fmdetunevalueoutput->do_callback();
            break;

        case 101:
            ModCoarseDetune->value((int) value);
            break;

        case 104:
            ModFreqEn->value(val_bool);
            if (value == 0)
                voiceFMfreqenvgroup->deactivate();
            else
                voiceFMfreqenvgroup->activate();
            break;

        case 112:
            ModPhase->value(value);
            oscFM->phase = 64 - lrint(value);
            fmoscil->redraw();
            break;

        case 113:
            tmp = int(value);
            ExtModOsc->value(tmp + 1);
            if (tmp < 0)
            {
                tmp = voice;
                changeFMoscilbutton->labelcolor(FL_BLACK);
            }
            else
                changeFMoscilbutton->labelcolor(FL_BLUE);
            oscFM->init(pars->VoicePar[tmp].FMSmp, synth);
            voiceFMparametersgroup->redraw();
            break;

        case 128:
            Delay->value(value);
            break;

        case 129:
            tmp = (val_bool);
            voiceonbutton->value(tmp);
            synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voiceenabled->value(tmp);
            synth->getGuiMaster()->partui->adnoteui->setVoiceTabs(voice, false);
            synth->getGuiMaster()->partui->adnoteui->setTabColour(voice);
            if (tmp)
            {
                voiceparametersgroup->activate();
                synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voicelistitemgroup->activate();
            }
            else
            {
                voiceparametersgroup->deactivate();
                synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voicelistitemgroup->deactivate();
            }
            voiceonbutton->redraw();
            break;

        case 130:
            tmp = (val_bool);
            ResonanceEn->value(tmp);
            synth->getGuiMaster()->partui->adnoteui->voicelistitem[voice]->voiceresonanceenabled->value(tmp);
            break;

        case 136:
            tmp = (int)value;
            VoiceOscPhase->value(tmp);
            osc->phase = 64 - tmp;
            voiceoscil->redraw();
            break;

        case 137:
            tmp = int(value);
            UseOsc->value(tmp + 1);
            if (tmp < 0)
            {
                tmp = voice;
                changevoiceoscilbutton->labelcolor(FL_BLACK);
            }
            else
                changevoiceoscilbutton->labelcolor(FL_BLUE);
            changevoiceoscilbutton->redraw();
            osc->init(pars->VoicePar[tmp].OscilSmp, synth);
            osc->redraw();
            break;

        case 138:
            tmp = lrint(value);
            SoundType->value(tmp);
            if (tmp)
                voicemodegroup->deactivate();
            else
                voicemodegroup->activate();
            noiselabel->do_callback();
            break;
    }} {}
  }
  Function {init(ADnoteParameters *parameters,int npart_, int kititem_, int nvoice_)} {} {
    code {//
    synth = parameters->getSynthEngine();
        pars = parameters;
        npart = npart_;
        kititem = kititem_;
        nvoice = nvoice_;
        make_window();
        end();
        if (nvoice == 0)
        {
            UseOsc->deactivate();
            ExtMod->deactivate();
            ExtModOsc->deactivate();
        }
        ADnoteVoiceParameters->show();} {}
  }
  Function {~ADvoiceUI()} {} {
    code {//
        ADnoteVoiceParameters->hide();
        hide();
        if (oscedit)
        {
            delete oscedit;
        }} {}
  }
  decl {int nvoice;} {public local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
  decl {ADnoteParameters *pars;} {private local
  }
  decl {OscilEditor *oscedit;} {public local
  }
  decl {Oscilloscope *osc;} {private local
  }
  decl {Oscilloscope *oscFM;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class ADnoteUI {: {public PresetsUI_, SynthHelper}
} {
  Function {make_window()} {private
  } {
    Fl_Window ADnoteGlobalParameters {
      label {ADsynth Global Parameters of the Instrument}
      xywh {151 81 535 405} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("AddSynth Global").c_str());}
      code1 {o->position(synth->getGuiMaster()->addNoteX, synth->getGuiMaster()->addNoteY);}
    } {
      Fl_Group {} {
        label FREQUENCY
        xywh {5 255 525 115} box THIN_UP_BOX labelfont 1 labelsize 12 align 17
      } {
        Fl_Group freqenv {
          label {ADSynth Global - Frequency Envelope}
          xywh {10 295 205 70} box FLAT_BOX color 51 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.FreqEnvelope, npart, kititem, 0, 1);}
          class EnvelopeUI
        } {}
        Fl_Counter octave {
          label Octave
          callback {//
    send_data(35, o->value(), 0xc8);}
          tooltip Octave xywh {450 275 45 15} type Simple color 237 selection_color 0 labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
          code0 {int k = pars->GlobalPar.PCoarseDetune / 1024; if (k >= 8) k -= 16;}
          code2 {o->value(k);}
        }
        Fl_Counter coarsedet {
          label {Coarse det.}
          callback {//
    send_data(37, o->value(), 0xc0);}
          tooltip {Coarse Detune} xywh {455 345 60 20} labelsize 10 align 5 minimum -64 maximum 63 step 1 textfont 1 textsize 11
          code0 {int k = pars->GlobalPar.PCoarseDetune % 1024; if (k >= 512) k -= 1024;}
          code2 {o->value(k);}
          code3 {o->lstep(10);}
        }
        Fl_Group freqlfo {
          label {Frequency LFO     }
          xywh {215 295 230 70} box FLAT_BOX color 47 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.FreqLfo, npart, kititem, 0, 1);}
          class LFOUI
        } {}
        Fl_Slider freq {
          callback {//
    if (Fl::event_button() == 3)
        o->value(0);
    detunevalueoutput->do_callback();
    send_data(32, o->value(), 0xc8);}
          tooltip {Fine Detune (cents)} xywh {57 275 385 15} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
          code0 {o->value(pars->GlobalPar.PDetune - 8192);}
          class mwheel_slider_rev
        }
        Fl_Value_Output detunevalueoutput {
          label Detune
          callback {o->value(getDetune(pars->GlobalPar.PDetuneType,0,pars->GlobalPar.PDetune));}
          xywh {12 275 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 textfont 1 textsize 10
          code0 {o->step(0.01, 1);}
          code1 {o->value(getDetune(pars->GlobalPar.PDetuneType, 0, pars->GlobalPar.PDetune));}
        }
        Fl_Choice detunetype {
          label {Detune Type}
          callback {//
    send_data(36, o->value() + 1, 0xc0);}
          xywh {450 315 75 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {//
              o->add("L35cents");
              o->add("L10cents");
              o->add("E100cents");
              o->add("E1200cents");}
          code1 {o->value(pars->GlobalPar.PDetuneType-1);}
        } {}
        Fl_Dial relBwidth {
          label relBW
          callback {//
    send_data(39, o->value(), 0xc8);}
          tooltip {Bandwidth - how the relative fine detune of the voice are changed} xywh {500 270 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PBandwidth);}
          code1 {o->init(64);}
          class WidgetPDial
        }
      }
      Fl_Group amplitudegrp {
        label AMPLITUDE
        xywh {5 5 240 250} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Dial globalvolume {
          label Volume
          callback {//
send_data(0, o->value(), 0xc8);}
          tooltip Volume xywh {39 22 35 35} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_InstrumentVolume);}
          code1 {o->value(pars->GlobalPar.PVolume);}
          code2 {o->init(90);}
          class WidgetPDial
        }
        Fl_Dial vsns {
          label {Vel Sens}
          callback {send_data(1, o->value(), 0xc8);}
          tooltip {Velocity Sensing Function - rightmost/max to disable} xywh {106 22 35 35} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PAmpVelocityScaleFunction);}
          code1 {o->init(64);}
          code2 {o->setValueType(VC_AmpVelocitySense);}
          class WidgetPDial
        }
        Fl_Dial globalpan {
          label Pan
          callback {//
    globalrandompan->value(o->value() < 0.1f);
    send_data(2, o->value(), 0xc8);}
          tooltip {Global panning - leftmost/zero gives random panning} xywh {173 22 35 35} box ROUND_UP_BOX labelsize 10 align 6 maximum 127 step 1
          code0 {o->setValueType(VC_PanningRandom);}
          code1 {o->value(pars->GlobalPar.PPanning);}
          code2 {o->init(64);}
          class WidgetPDial
        }
        Fl_Light_Button globalrandompan {
          label Rand
          callback {//
    globalpan->value(0);
    o->value(1);
    send_data(2, 0, 0xc0);}
          xywh {196 57 7 13} box NO_BOX color 35 selection_color 88 labelsize 10 align 8
          code0 {o->value(pars->randomGlobalPan());}
        }
        Fl_Dial depop {
          label {D.Pop}
          callback {//
send_data(120, o->value(), 0xc8);}
          tooltip {Pop Suppression} xywh {85 227 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.Fadein_adjustment);}
          code1 {o->init(20);}
          class WidgetPDial
        }
        Fl_Dial pstr {
          label {P.Str.}
          callback {//
send_data(121, o->value(), 0xc8);}
          tooltip {Punch Strength} xywh {125 227 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchStrength);}
          code1 {o->init(0);}
          class WidgetPDial
        }
        Fl_Dial pt {
          label {P.t.}
          callback {//
send_data(122, o->value(), 0xc8);}
          tooltip {Punch Time (duration)} xywh {155 227 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchTime);}
          code1 {o->init(60);}
          class WidgetPDial
        }
        Fl_Dial pstc {
          label {P.Stc.}
          callback {//
send_data(123, o->value(), 0xc8);}
          tooltip {Punch Stretch} xywh {185 227 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchStretch);}
          code1 {o->init(64);}
          class WidgetPDial
        }
        Fl_Dial pvel {
          label {P.Vel.}
          callback {//
send_data(124, o->value(), 0xc8);}
          tooltip {Punch Velocity Sensing} xywh {215 227 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchVelocitySensing);}
          code1 {o->init(72);}
          class WidgetPDial
        }
        Fl_Group ampenv {
          label {ADSynth Global - Amplitude Envelope}
          xywh {10 75 205 70} box FLAT_BOX color 51 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.AmpEnvelope, npart, kititem, 0, 0);}
          class EnvelopeUI
        } {}
        Fl_Group amplfo {
          label {Amplitude LFO          }
          xywh {10 145 230 70} box FLAT_BOX color 47 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.AmpLfo, npart, kititem, 0, 0);}
          class LFOUI
        } {}
        Fl_Check_Button rndgrp {
          label {Rnd Grp}
          callback {pars->GlobalPar.Hrandgrouping = lrint(o->value());
send_data(113, o->value(), 0xc0);}
          tooltip {How the Harmonic Amplitude is applied to voices that use the same oscillator} xywh {8 234 63 18} down_box DOWN_BOX labelsize 11
          code0 {o->value(pars->GlobalPar.Hrandgrouping);}
        }
      }
      Fl_Group {} {
        label FILTER
        xywh {245 5 285 250} box THIN_UP_BOX labelfont 1 labelsize 12 align 17
      } {
        Fl_Group filterenv {
          label {ADSynth Global - Filter Envelope}
          xywh {250 110 275 70} box FLAT_BOX color 51 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.FilterEnvelope, npart, kititem, 0, 2);}
          class EnvelopeUI
        } {}
        Fl_Group filterlfo {
          label {Filter LFO}
          xywh {250 180 230 70} box FLAT_BOX color 47 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.FilterLfo, npart, kititem, 0, 2);}
          class LFOUI
        } {}
        Fl_Group filterui {
          label {ADsynth Global - Filter}
          xywh {250 35 275 75} box FLAT_BOX color 50 labelsize 12 align 144
          code0 {o->init(pars->GlobalPar.GlobalFilter, &pars->GlobalPar.PFilterVelocityScale, &pars->GlobalPar.PFilterVelocityScaleFunction, npart, kititem, 0);}
          class FilterUI
        } {}
      }
      Fl_Check_Button stereo {
        label { Stereo}
        callback {//
send_data(112, o->value(), 0xc8);}
        xywh {8 220 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelsize 11
        code0 {o->value(pars->GlobalPar.PStereo);}
      }
      Fl_Button {} {
        label {Show Voice List}
        callback {//
    for (int i = 0; i < NUM_VOICES; ++i)
        voicelistitem[i]->refreshlist();
    ADnoteVoiceList->show();
    if (Fl::event_button() == 3)
        ADnoteGlobalParameters->hide();}
        xywh {191 375 121 25} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label {Show Voice Parameters}
        callback {//
    voicelistitem[nvoice]->refreshlist();
    ADnoteVoice->show();
    ADnoteVoice->redraw();
    synth->getGuiMaster()->partui->adnoteui->fromVoiceList = false;
    if ((Fl::event_button() == 3))
        ADnoteGlobalParameters->hide();}
        xywh {5 375 180 25} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Close
        callback {synth->getGuiMaster()->addNoteX = ADnoteGlobalParameters->x();
synth->getGuiMaster()->addNoteY = ADnoteGlobalParameters->y();
ADnoteGlobalParameters->hide();
if (Fl::event_button() == 3)
{
    if (synth->getGuiMaster()->partui->partKitOn)
        synth->getGuiMaster()->partui->instrumentkitlist->show();
    else
        synth->getGuiMaster()->partui->instrumenteditwindow->show();
}}
        xywh {476 375 54 25} box THIN_UP_BOX labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Resonance
        callback {//
    resui->resonancewindow->redraw();
    resui->Show(true);
    if ((Fl::event_button() == 3))
        ADnoteGlobalParameters->hide();}
        tooltip Resonance xywh {318 375 90 25} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars);}
        xywh {414 380 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
        xywh {444 380 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
    }
    Fl_Window ADnoteVoice {
      label {ADsynth Voice Parameters}
      xywh {635 95 760 610} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("AddSynth Voice").c_str());}
    } {
      Fl_Spinner currentvoicecounter {
        label {Current Voice}
        callback {//
            editVoice(lrint(o->value()) - 1)}
        xywh {35 583 40 24} labelfont 1 labelsize 12 align 8 maximum 8 textfont 1 hide
      }
      Fl_Group advoice {
        xywh {0 0 764 615} box BORDER_BOX
        code0 {o->init(pars, npart, kititem, nvoice);}
        code1 {o->show();}
        class ADvoiceUI
      } {}
      Fl_Box {} {
        label VOICE
        xywh {444 8 63 17} labelfont 1 labelsize 12
      }
      Fl_Tabs voiceTabs {
        callback {//
if(o->value() == g1)
{
    editVoice(0);
}
else if(voiceTabs->value() == g2)
{
    editVoice(1);
}
else if(voiceTabs->value() == g3)
{
    editVoice(2);
}
else if(voiceTabs->value() == g4)
{
    editVoice(3);
}
else if(voiceTabs->value() == g5)
{
    editVoice(4);
}
else if(voiceTabs->value() == g6)
{
    editVoice(5);
}
else if(voiceTabs->value() == g7)
{
    editVoice(6);
}
else if(voiceTabs->value() == g8)
{
    editVoice(7);
}}
        xywh {5 0 525 30} box PLASTIC_UP_BOX color 40 selection_color 231 labelfont 1 align 4
      } {
        Fl_Group g1 {
          label {   1   } open
          xywh {40 50 40 27} labelfont 1
          code0 {setTabColour(0);}
        } {}
        Fl_Group g2 {
          label {   2   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(1);}
        } {}
        Fl_Group g3 {
          label {   3   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(2);}
        } {}
        Fl_Group g4 {
          label {   4   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(3);}
        } {}
        Fl_Group g5 {
          label {   5   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(4);}
        } {}
        Fl_Group g6 {
          label {   6   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(5);}
        } {}
        Fl_Group g7 {
          label {   7   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(6);}
        } {}
        Fl_Group g8 {
          label {   8   } open
          xywh {40 50 40 27} labelfont 1 hide
          code0 {setTabColour(7);}
        } {}
      }
      Fl_Button {} {
        label Close
        callback {ADnoteVoice->hide();
if (Fl::event_button() == 3)
{
    if (fromVoiceList)
        ADnoteVoiceList->show();
    else
        ADnoteGlobalParameters->show();
}}
        xywh {650 575 90 25} box THIN_UP_BOX labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars,nvoice);}
        xywh {555 580 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this,nvoice);}
        xywh {585 580 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
    }
    Fl_Window ADnoteVoiceList {
      label {ADsynth Voices list}
      xywh {101 233 650 260} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("AddSynth Voice List").c_str());}
    } {
      Fl_Text_Display {} {
        label {No.}
        xywh {24 15 30 10} box NO_BOX labelfont 1 labelsize 11
      }
      Fl_Text_Display {} {
        label Volume
        xywh {182 15 30 10} box NO_BOX labelfont 1 labelsize 11
      }
      Fl_Text_Display {} {
        label Detune
        xywh {410 15 25 10} box NO_BOX labelfont 1 labelsize 11
      }
      Fl_Text_Display {} {
        label Pan
        xywh {250 15 30 10} box NO_BOX labelfont 1 labelsize 11
      }
      Fl_Text_Display {} {
        label {Vibrato Depth}
        xywh {570 15 30 10} box NO_BOX labelfont 1 labelsize 11
      }
      Fl_Text_Display {} {
        label Res
        xywh {281 15 25 10} box NO_BOX labelfont 1 labelsize 11
      }
      Fl_Button {} {
        label Close
        callback {ADnoteVoiceList->hide();
if (Fl::event_button() == 3)
    ADnoteGlobalParameters->show();}
        xywh {582 235 62 20} labelfont 1 labelsize 12
      }
      Fl_Scroll {} {open
        xywh {5 15 640 214} type VERTICAL box THIN_UP_BOX
      } {
        Fl_Pack {} {
          xywh {17 27 620 200}
          code0 {//
              for (int i = 0; i < NUM_VOICES; ++i)
              {
                  voicelistitem[i] = new ADvoicelistitem(4, 8, 620, 25, "");
                  voicelistitem[i]->init(pars, npart, kititem, i);
              }}
        } {}
      }
      Fl_Text_Display {} {
        label Wave
        xywh {105 15 30 10} box NO_BOX labelfont 1 labelsize 11
      }
    }
  }
  Function {setVoiceTabs(int num, bool edit = true)} {} {
    code {//
switch (num)
{
    case 0:
        voiceTabs->value(g1);
        if (edit)
            editVoice(0);
        break;
    case 1:
        voiceTabs->value(g2);
        if (edit)
            editVoice(1);
        break;
    case 2:
        voiceTabs->value(g3);
        if (edit)
            editVoice(2);
        break;
    case 3:
        voiceTabs->value(g4);
        if (edit)
            editVoice(3);
        break;
    case 4:
        voiceTabs->value(g5);
        if (edit)
            editVoice(4);
        break;
    case 5:
        voiceTabs->value(g6);
        if (edit)
            editVoice(5);
        break;
    case 6:
        voiceTabs->value(g7);
        if (edit)
            editVoice(6);
        break;
    case 7:
        voiceTabs->value(g8);
        if (edit)
            editVoice(7);
        break;
}} {}
  }
  Function {setTabColour(int num)} {} {
    code {//
int set = 16;
if (pars->VoicePar[num].Enabled)
    set = 0;

switch (num)
{
    case 0:
        g1->labelcolor(set);
        break;
    case 1:
         g2->labelcolor(set);
        break;
    case 2:
        g3->labelcolor(set);
        break;
    case 3:
        g4->labelcolor(set);
        break;
    case 4:
        g5->labelcolor(set);
        break;
    case 5:
        g6->labelcolor(set);
        break;
    case 6:
        g7->labelcolor(set);
        break;
    case 7:
        g8->labelcolor(set);
        break;
}} {}
  }
  Function {send_data(int control, float value, int type)} {} {
    code {//
collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, 0);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    bool val_bool = (value > 0.5f);
    switch(control)
    {
        case 0:
            globalvolume->value(value);
            break;

        case 1:
            vsns->value(value);
            break;

        case 2:
            globalpan->value(value);
            globalrandompan->value(value < 0.1f);
            amplitudegrp->changed();
            break;

        case 32:
            freq->value(value);
            detunevalueoutput->do_callback();
            break;

        case 35:
            octave->value((int) value);
            break;

        case 36:
            detunetype->value((int) value);
            break;

        case 37:
            coarsedet->value((int) value);
            break;

        case 39:
            relBwidth->value(value);
            break;

        case 112:
            stereo->value(val_bool);
            break;

        case 113:
            rndgrp->value(val_bool);
            break;

        case 120:
            depop->value(value);
            break;

        case 121:
            pstr->value(value);
            break;

        case 122:
            pt->value(value);
            break;

        case 123:
            pstc->value(value);
            break;

        case 124:
            pvel->value(value);
            break;

    }} {}
  }
  Function {ADnoteUI(ADnoteParameters *parameters, int npart_, int kititem_)} {} {
    code {//
        synth = parameters->getSynthEngine();
        pars = parameters;
        npart = npart_;
        kititem = kititem_;
        nvoice = 0;
        resui = new ResonanceUI(pars->GlobalPar.Reson, npart, kititem, 0);
        make_window();} {}
  }
  Function {~ADnoteUI()} {return_type virtual
  } {
    code {//
        ADnoteVoiceList->hide();
        ADnoteGlobalParameters->hide();
        ADnoteVoice->hide();
        delete ADnoteVoiceList;
        delete ADnoteGlobalParameters;
        delete ADnoteVoice;
        delete resui;} {}
  }
  Function {refresh()} {} {
    code {//
        globalvolume->value(pars->GlobalPar.PVolume);
        vsns->value(pars->GlobalPar.PAmpVelocityScaleFunction);
        globalpan->value(pars->GlobalPar.PPanning);

        stereo->value(pars->GlobalPar.PStereo);
        rndgrp->value(pars->GlobalPar.Hrandgrouping);
        pstr->value(pars->GlobalPar.PPunchStrength);
        pt->value(pars->GlobalPar.PPunchTime);
        pstc->value(pars->GlobalPar.PPunchStretch);
        pvel->value(pars->GlobalPar.PPunchVelocitySensing);
        detunevalueoutput->value(getDetune(pars->GlobalPar.PDetuneType, 0, pars->GlobalPar.PDetune));
        freq->value(pars->GlobalPar.PDetune - 8192);

        int k = pars->GlobalPar.PCoarseDetune / 1024;
        if (k >= 8)
            k -= 16;
        octave->value(k);

        detunetype->value(pars->GlobalPar.PDetuneType - 1);
        k = pars->GlobalPar.PCoarseDetune % 1024;
        if (k >= 512)
            k -= 1024;
        coarsedet->value(k);
        amplfo->refresh();
        freqlfo->refresh();
        filterlfo->refresh();

        ampenv->refresh();
        freqenv->refresh();
        filterenv->refresh();
        filterui->refresh();
        for (int i = 0; i < NUM_VOICES; ++i)
            voicelistitem[i]->refreshlist();

        resui->refresh();
        currentvoicecounter->do_callback();} {}
  }
  Function {editVoice(int nvoice_)} {return_type void
  } {
    code {//
        nvoice = nvoice_;
        advoice->hide();
        ADnoteVoice->remove(advoice);
        delete advoice;
        advoice = new ADvoiceUI(0, 0, 765, 585);
        ADnoteVoice->add(advoice);
        currentvoicecounter->value(nvoice + 1);
        advoice->init(pars, npart, kititem, nvoice);
        advoice->show();
        ADnoteVoice->redraw();
        ADnoteVoice->show();} {}
  }
  decl {ADnoteParameters *pars;} {private local
  }
  decl {ResonanceUI *resui;} {public local
  }
  decl {int nvoice;} {public local
  }
  decl {ADvoicelistitem *voicelistitem[NUM_VOICES];} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
  decl {bool fromVoiceList;} {public local
  }
}
