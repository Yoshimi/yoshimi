# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {LFOUI.h} {not_in_source in_header
}

comment {LFOUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009, Alan Calvert
Copyright 2017-2018, Will Godfrey & others

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original
Modified January 2018
} {in_source in_header
}

decl {\#include <iostream>} {public local
}

decl {\#include "UI/MiscGui.h"} {public local
}

decl {\#include "UI/WidgetPDial.h"} {public local
}

decl {\#include <FL/Fl_Group.H>} {public local
}

decl {\#include <FL/Fl_Box.H>} {public local
}

decl {\#include <FL/fl_draw.H>} {public local
}

decl {\#include <FL/fl_ask.H>} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

decl {\#include "Params/LFOParams.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public global
}

decl {\#include "MasterUI.h"} {private global
}

class LFOUI {selected : {public Fl_Group, PresetsUI_}
} {
  Function {LFOUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {synth = NULL;
pars=NULL;} {}
  }
  Function {~LFOUI()} {} {
    code {lfoui->hide();
    hide();} {}
  }
  Function {make_window()} {} {
    Fl_Window lfoui {
      xywh {228 588 230 70} type Double color 50 labelfont 1 labelsize 12 hide
      class Fl_Group
    } {
      Fl_Group lfoparamswindow {
        xywh {0 0 230 70} box PLASTIC_UP_BOX color 223 labelfont 1 labelsize 10 align 17
      } {
        Fl_Dial freq {
          label {Freq.}
          callback {//
          send_data(group, 0, o->value(), 0x48);}
          tooltip {LFO Frequency} xywh {5 20 30 30} box ROUND_UP_BOX labelsize 10 step 1e-05
          code0 {o->setValueType(VC_LFOfreq);}
          code1 {if (engine < 0x80){if (group == 1) o->init(0.551f); else o->init(0.63f);}}
          code2 {if (engine >= 0x80){if (group == 0) o->init(0.708f); else o->init(0.393f);}}
          class WidgetPDial
        }
        Fl_Dial intensity {
          label Depth
          callback {//
          int depth = lrint(o->value());
          if (engine >= 0x80 && engine < 0x88 && group == 1) // special case to sync voice list vibrato
              synth->getGuiMaster()->partui->adnoteui->voicelistitem[engine &0xf]->voicelistvibratto->value(depth);
          send_data(group, 1, depth, 0xc8);}
          tooltip {LFO Amount} xywh {40 20 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(getLFOdepthType(group));}
          code1 {if (engine < 0x80) o->init(0); else if (group == 0) o->init(32); else if (group == 1) o->init(40); else o->init(20);}
          class WidgetPDial
        }
        Fl_Dial delay {
          label Delay
          callback {//
          send_data(group, 2, o->value(), 0xc8);}
          tooltip {LFO delay} xywh {110 20 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_LFOdelay);}
          code1 {if (engine >= 0x80 && group == 0) o->init(30); else o->init(0);}
          class WidgetPDial
        }
        Fl_Dial startphase {
          label Start
          callback {//
          send_data(group, 3, o->value(), 0xc8);}
          tooltip {LFO Startphase (leftmost is Random)} xywh {75 20 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_LFOstartphase);}
          code1 {if (engine >= 0x80 && group == 1) o->init(0); else o->init(64);}
          class WidgetPDial
        }
        Fl_Dial randomness {
          label {A.R.}
          callback {//
          send_data(group, 4, o->value(), 0xc8);}
          tooltip {LFO Amplitude Randomness} xywh {180 7 20 20} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->init(0);}
          code1 {o->setValueType(VC_percent127);}
          class WidgetPDial
        }
        Fl_Choice LFOtype {
          label Type
          callback {//
          send_data(group, 5, o->value(), 0xc0);}
          tooltip {LFO function} xywh {180 40 45 15} down_box BORDER_BOX labelsize 10 align 2 textsize 8
        } {
          MenuItem {} {
            label SINE
            xywh {20 20 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label TRI
            xywh {30 30 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label SQR
            xywh {30 30 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label {R.up}
            xywh {40 40 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label {R.dn}
            xywh {50 50 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label E1dn
            xywh {60 60 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label E2dn
            xywh {70 70 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Check_Button continous {
          label {C.}
          callback {//
          send_data(group, 6, o->value(), 0xc0);}
          tooltip {Continuous LFO} xywh {165 35 15 15} down_box DOWN_BOX labelsize 10 align 2
        }
        Fl_Dial freqrand {
          label {F.R.}
          callback {//
          send_data(group, 7, o->value(), 0xc8);}
          tooltip {LFO Frequency Randomness} xywh {205 7 20 20} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->init(0);}
          code1 {o->setValueType(VC_percent127);}
          class WidgetPDial
        }
        Fl_Dial stretch {
          label {Str.}
          callback {//
          send_data(group, 8, o->value(), 0xc8);}
          tooltip {LFO frequency stretch} xywh {144 30 20 20} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->init(64);}
          code1 {o->setValueType(VC_LFOStretch);}
          class WidgetPDial
        }
        Fl_Button {} {
          label C
          callback {//
          synth->getGuiMaster()->getPresetsUi()->copy(pars);}
          xywh {145 10 15 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 10 labelcolor 7
        }
        Fl_Button {} {
          label P
          callback {//
          synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
          xywh {162 10 15 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 10 labelcolor 7
        }
        Fl_Box lfotype {
          label LFO
          xywh {58 5 100 11} labelfont 1 labelsize 10
        }
      }
    }
  }
  Function {refresh()} {} {
    code {//
    freq->value(pars->Pfreq);
    intensity->value(pars->Pintensity);
    startphase->value(pars->Pstartphase);
    delay->value(pars->Pdelay);
    continous->value(pars->Pcontinous);
    stretch->value(pars->Pstretch);
    randomness->value(pars->Prandomness);
    freqrand->value(pars->Pfreqrand);
    LFOtype->value(pars->PLFOtype);} {}
  }
  Function {send_data(int group, int control, float value, int type)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, engine, 0, group);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char part = getData->data.part;
    unsigned char eng = getData->data.engine;
    unsigned char par = getData->data.parameter;

    if (part != npart || (eng >= 128 && eng != engine))
        return;

    switch(control)
    {
        case 0:
            freq->value(value);
            break;

        case 1:
            intensity->value(value);
            if (engine >= 128 && engine < 136 && par == 1) // rather special to sync voice list vibrato
                synth->getGuiMaster()->partui->adnoteui->voicelistitem[engine &0xf]->voicelistvibratto->value(value);
            break;

        case 2:
            delay->value(value);
            break;

        case 3:
            startphase->value(value);
            break;

        case 4:
            randomness->value(value);
            break;

        case 5:
            LFOtype->value((int)value);
            break;

        case 6:
            continous->value(value != 0);
            break;

        case 7:
            freqrand->value(value);
            break;

        case 8:
            stretch->value(value);
            break;
    }} {}
  }
  Function {init(LFOParams *lfopars_, int npart_, int kititem_, int engine_, int group_)} {} {
    code {//
    pars=lfopars_;
    synth = pars->getSynthEngine();
    npart = npart_;
    kititem = kititem_;
    engine = engine_;
    group = group_;
    make_window();
    end();

    refresh();

    lfoui->resize(this->x(),this->y(),this->w(),this->h());
    lfotype->label(this->label());} {}
  }
  decl {LFOParams *pars;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
  decl {int group;} {private local
  }
  decl {int engine;} {private local
  }
}
