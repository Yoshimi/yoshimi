# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {SubNoteUI.h} {not_in_source in_header
}

comment {SubNoteUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2015-2018, Will Godfrey & others

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code

Modified April 2018
} {in_source in_header
}

decl {\#include "UI/MiscGui.h"} {public local
}

decl {\#include "UI/WidgetPDial.h"} {public local
}

decl {\#include "UI/WidgetMWSlider.h"} {public local
}

decl {\#include "EnvelopeUI.h"} {public local
}

decl {\#include "FilterUI.h"} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

decl {\#include "Misc/SynthHelper.h"} {public local
}

decl {\#include "Params/SUBnoteParameters.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public global
}

decl {\#include "MasterUI.h"} {private global
}

class SUBnoteharmonic {: {public Fl_Group}
} {
  Function {make_window()} {private
  } {
    Fl_Window harmonic {
      xywh {791 751 90 310} type Double hide
      class Fl_Group
    } {
      Fl_Slider mag {
        callback {//
        int x = 0;
        if (Fl::event_button() != 3)
            x = 127 - lrint(o->value());
        else
        {
            if (n == 0)
                x = 127;
            o->value(127 - x);
        }

        send_data(6, n, x, 0xc8);

        if (x == 0)
            o->selection_color(0);
        else
            o->selection_color(222);}
        tooltip {Harmonic's magnitude} xywh {0 15 12 131} type {Vert Knob} box FLAT_BOX selection_color 222 maximum 127 step 1 value 127
        code0 {o->value(127-pars->Phmag[n]);}
        code1 {if (pars->Phmag[n]==0) o->selection_color(0);}
        class mwheel_slider
      }
      Fl_Slider bw {
        callback {//
        int x = 64;
        if (Fl::event_button() != 3)
            x = 127 - lrint(o->value());
        else
            o->value(x - 1);

        send_data(7, n, x, 0xc8);

        if (x == 64)
            o->selection_color(0);
        else
            o->selection_color(222);}
        tooltip {Harmonic's bandwidth multiplier} xywh {0 156 12 126} type {Vert Knob} box FLAT_BOX selection_color 222 maximum 127 step 1 value 63
        code0 {o->setValueType(VC_SubBandwidthRel);}
        code1 {o->useCustomTip(true);}
        code2 {o->value(127-pars->Phrelbw[n]);}
        code3 {if (pars->Phrelbw[n]==64) o->selection_color(0);}
        class mwheel_slider
      }
      Fl_Box {} {
        xywh {12 217 5 3} box FLAT_BOX color 39
        code0 {if (n+1==MAX_SUB_HARMONICS) o->hide();}
      }
      Fl_Box {} {
        label 01
        xywh {0 285 12 15} labelfont 1 labelsize 9 align 16
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
      Fl_Box {} {
        label 01
        xywh {0 0 12 15} labelfont 1 labelsize 9 align 16
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
    }
  }
  Function {SUBnoteharmonic(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {n=0;} {}
  }
  Function {send_data(int insert, int control, float value, int type)} {} {
    code {//
        collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, 1, insert);} {}
  }
  Function {init(SUBnoteParameters *pars_, int n_, int npart_, int kititem_)} {} {
    code {//
    pars=pars_;
    synth = pars->getSynthEngine();
    n=n_;
    npart = npart_;
    kititem = kititem_;
    make_window();
    harmonic->show();
    end();} {}
  }
  Function {refresh()} {} {
    code {//
    mag->value(127-pars->Phmag[n]);
    if (pars->Phmag[n]==0) mag->selection_color(0);
        bw->value(127-pars->Phrelbw[n]);} {}
  }
  Function {~SUBnoteharmonic()} {} {
    code {//
    harmonic->hide();
    hide();} {}
  }
  decl {SUBnoteParameters *pars;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int n;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
}

class SUBnoteUI {selected : {public PresetsUI_, SynthHelper}
} {
  Function {make_window()} {} {
    Fl_Window SUBparameters {
      label {SUBsynth Parameters}
      xywh {1 21 735 475} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("SubSynth").c_str());}
      code1 {o->position(synth->getGuiMaster()->subNoteX, synth->getGuiMaster()->subNoteY);}
    } {
      Fl_Scroll {} {
        xywh {5 140 435 330} type HORIZONTAL box THIN_UP_BOX when 1
      } {
        Fl_Pack harmonics {
          xywh {5 148 435 300} type HORIZONTAL
          code0 {new Fl_Box(0,0,9,o->h());}
          code1 {for (int i=0;i<MAX_SUB_HARMONICS;i++){h[i]=new SUBnoteharmonic(0,0,17,o->h(),"");h[i]->init(pars, i, npart, kititem);}}
          code2 {new Fl_Box(0,0,3,o->h());}
        } {}
      }
      Fl_Button {} {
        label Close
        callback {//
        synth->getGuiMaster()->subNoteX = SUBparameters->x();
        synth->getGuiMaster()->subNoteY = SUBparameters->y();
        SUBparameters->hide();
        if ((Fl::event_button() == 3))
        {
            if (synth->getGuiMaster()->partui->partKitOn)
                synth->getGuiMaster()->partui->instrumentkitlist->show();
            else
                synth->getGuiMaster()->partui->instrumenteditwindow->show();
        }}
        xywh {625 446 105 20} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Group {} {
        label AMPLITUDE
        xywh {5 5 215 135} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Dial vol {
          label Volume
          callback {//
          send_data (0, o->value(), 0xc8);}
          tooltip Volume xywh {37 20 29 29} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_InstrumentVolume);}
          code1 {o->value(pars->PVolume);}
          code2 {o->init(96);}
          class WidgetPDial
        }
        Fl_Dial vsns {
          label {Veloc Sens}
          callback {//
          send_data (1, o->value(), 0xc8);}
          tooltip {Velocity sensing} xywh {98 20 29 29} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(pars->PAmpVelocityScaleFunction);}
          code1 {o->init(90);}
          code2 {o->setValueType(VC_AmpVelocitySense);}
          class WidgetPDial
        }
        Fl_Dial pan {
          label Pan
          callback {//
          randompan->value(o->value() < 1);
          send_data (2, o->value(), 0xc8);}
          tooltip {Panning - zero/leftmost is Random} xywh {157 20 29 29} box ROUND_UP_BOX labelsize 10 align 6 maximum 127 step 1
          code0 {o->setValueType(VC_PanningRandom);}
          code1 {o->value(pars->PPanning);}
          code2 {o->init(64);}
          class WidgetPDial
        }
        Fl_Light_Button randompan {
          label Rand
          callback {//
          pan->value(0);
          o->value(1);
          send_data (2, 0, 0xc0);}
          xywh {179 49 7 13} box NO_BOX color 35 selection_color 88 labelsize 10 align 8
          code0 {o->value(pars->randomPan());}
        }
        Fl_Group ampenv {
          label {SUBsynth - Amplitude Envelope}
          xywh {10 65 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->AmpEnvelope, npart, kititem, 1, 0);}
          class EnvelopeUI
        } {}
      }
      Fl_Group {} {
        xywh {504 406 226 35} box THIN_UP_FRAME
      } {
        Fl_Counter filterstages {
          label {Filter Stages}
          callback {//
          send_data (80, o->value(), 0xc0);}
          tooltip {How many times the noise is filtered} xywh {520 421 45 15} type Simple labelfont 1 labelsize 10 align 1 minimum 1 maximum 5 step 1 value 1 textsize 10
          code0 {o->value(pars->Pnumstages);}
        }
        Fl_Choice magtype {
          label {Mag.Type}
          callback {//
          send_data (81, o->value(), 0xc0);}
          xywh {590 421 65 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 1 textsize 11
          code0 {o->value(pars->Phmagtype);}
        } {
          MenuItem {} {
            label Linear
            xywh {20 20 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-40dB}
            xywh {30 30 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-60dB}
            xywh {40 40 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-80dB}
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-100dB}
            xywh {60 60 100 20} labelfont 1 labelsize 11
          }
        }
        Fl_Choice start {
          label Start
          callback {//
          send_data (82, o->value(), 0xc0);}
          xywh {670 421 50 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 1 textsize 11
          code0 {o->value(pars->Pstart);}
        } {
          MenuItem {} {
            label Zero
            xywh {30 30 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label RND
            xywh {40 40 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Max.}
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
        }
      }
      Fl_Group freqsettingsui {
        label FREQUENCY
        xywh {440 5 290 135} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Group freqenvelopegroup {
          label {SUBsynth - Frequency Envelope}
          xywh {445 65 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->FreqEnvelope, npart, kititem, 1, 1);}
          code1 {if (pars->PFreqEnvelopeEnabled == 0) o->deactivate();}
          class EnvelopeUI
        } {}
        Fl_Check_Button freqee {
          label On
          callback {//
          if (o->value() == 0)
              freqenvelopegroup->deactivate();
          else
              freqenvelopegroup->activate();
          o->show();
          freqsettingsui->redraw();
          send_data (40, o->value(), 0xc8);}
          xywh {445 67 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
          code0 {o->value(pars->PFreqEnvelopeEnabled);}
        }
        Fl_Counter octave {
          label Octave
          callback {//
          send_data (35, o->value(), 0xc8);}
          tooltip Octave xywh {446 18 45 15} type Simple color 237 selection_color 0 labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
          code0 {int k=pars->PCoarseDetune/1024;if (k>=8) k-=16;}
          code2 {o->value(k);}
        }
        Fl_Counter coarsedet {
          label {Coarse Det.}
          callback {//
          int k = (int) o->value();
          if (k < 0)
              k += 1024;

          send_data (37, k, 0xc0);}
          tooltip {Coarse Detune} xywh {658 111 60 20} labelsize 10 align 1 minimum -64 maximum 63 step 1 textfont 1 textsize 11
          code0 {int k=pars->PCoarseDetune%1024;if (k>=512) k-=1024;}
          code2 {o->value(k);}
          code3 {o->lstep(10);}
        }
        Fl_Slider detune {
          callback {//
          if (Fl::event_button() == 3)
              o->value(0);

          send_data (32, o->value(), 0xd8);}
          tooltip {Fine Detune (cents)} xywh {491 47 234 15} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
          code0 {o->value(pars->PDetune-8192);}
          class mwheel_slider_rev
        }
        Fl_Value_Output detunevalueoutput {
          label Detune
          callback {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
          xywh {445 47 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 textfont 1 textsize 10
          code0 {o->step(0.01, 1);}
          code1 {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
        }
        Fl_Check_Button hz440 {
          label 440Hz
          callback {//
          int x = (int) o->value();

          if (x == 0)
              fixedfreqetdial->deactivate();
          else
              fixedfreqetdial->activate();
          send_data (34, x, 0xc0);}
          tooltip {set the base frequency to 440Hz} xywh {620 24 48 15} down_box DOWN_BOX labelfont 1 labelsize 10 align 24
          code0 {o->value(pars->Pfixedfreq);}
        }
        Fl_Dial fixedfreqetdial {
          label {Eq.T.}
          callback {//
          send_data (33, o->value(), 0xc8);}
          tooltip {How the frequency varies according to the keyboard (leftmost for fixed frequency)} xywh {675 21 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
          code0 {o->value(pars->PfixedfreqET);}
          code1 {if (pars->Pfixedfreq==0) o->deactivate();}
          code2 {o->init(0);}
          code3 {o->setValueType(VC_FixedFreqET);}
          class WidgetPDial
        }
        Fl_Choice detunetype {
          label {Detune Type}
          callback {//

          send_data (36, o->value(), 0xd0);}
          xywh {655 78 70 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {o->add("L35cents");o->add("L10cents");o->add("E100cents");o->add("E1200cents");}
          code1 {o->value(pars->PDetuneType-1);}
        } {}
        Fl_Dial bend {
          label Bend
          callback {//
          send_data(38, o->value(), 0xc8);}
          tooltip {Pitch bend range scaling} xywh {500 21 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
          code0 {o->value(pars->PBendAdjust);}
          code1 {o->init(88);}
          code2 {o->setValueType(VC_PitchBend);}
          class WidgetPDial
        }
        Fl_Dial offset {
          label Offset
          callback {//
          send_data(39, o->value(), 0xc8);}
          tooltip {Offset of the frequency in Hz.} xywh {558 21 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
          code0 {o->value(pars->POffsetHz);}
          code1 {o->init(64);}
          code2 {o->setValueType(VC_FreqOffsetHz);}
          class WidgetPDial
        }
      }
      Fl_Box {} {
        xywh {440 406 64 35} box THIN_UP_FRAME
      }
      Fl_Check_Button stereo {
        label { Stereo}
        callback {//
        send_data (112, o->value(), 0xc8);}
        xywh {444 415 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
        code0 {o->value(pars->Pstereo);}
      }
      Fl_Button {} {
        label Clear
        callback {//
        for (int i = 0; i < MAX_SUB_HARMONICS; i++)
        {
            h[i]->mag->value(127);
            h[i]->mag->selection_color(0);
            pars->Phmag[i] = 0;
            h[i]->bw->value(64);
            h[i]->bw->selection_color(0);
            pars->Phrelbw[i] = 64;
        }

        h[0]->mag->selection_color(222);
        h[0]->mag->value(0);
        SUBparameters->redraw();
        send_data (96, o->value(), 0xc0);}
        tooltip {Clear the harmonics} xywh {445 446 70 20} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Group bandwidthsettingsui {
        label BANDWIDTH
        xywh {220 5 220 135} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Group bandwidthenvelopegroup {
          label {SUBsynth - BandWidth Envelope}
          xywh {225 65 210 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->BandWidthEnvelope, npart, kititem, 1, 3);}
          code1 {if (pars->PBandWidthEnvelopeEnabled==0) o->deactivate();}
          class EnvelopeUI
        } {}
        Fl_Check_Button bwee {
          label On
          callback {//
          if (o->value() == 0)
              bandwidthenvelopegroup->deactivate();
          else
              bandwidthenvelopegroup->activate();
          o->show();
          bandwidthsettingsui->redraw();
          send_data (18, o->value(), 0xc8);}
          xywh {225 67 34 12} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 10
          code0 {o->value(pars->PBandWidthEnvelopeEnabled);}
        }
        Fl_Value_Slider bandwidth {
          label {Band Width}
          callback {//
          if (Fl::event_button() == 3)
              o->value(40);

          send_data (16, o->value(), 0xc8);}
          tooltip {Base bandwidth, approximate} xywh {225 40 115 15} type {Horz Knob} box THIN_DOWN_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->setValueType(VC_SubBandwidth);}
          code1 {o->useCustomTip(true);}
          code2 {o->value(pars->Pbandwidth);}
          class mwheel_val_slider_rev
        }
        Fl_Value_Slider bwidthscale {
          label {B.Width Scale}
          callback {//
          if (Fl::event_button() == 3)
              o->value(0);

          send_data (17, o->value(), 0xc8);}
          tooltip {Freq-dep. bw. scaling} xywh {344 40 90 15} type {Horz Knob} box THIN_DOWN_BOX labelsize 10 align 1 minimum -64 maximum 63 step 1
          code0 {o->setValueType(VC_SubBandwidthScale); o->setGraphicsType(VC_SubBandwidthScale);}
          code1 {o->useCustomTip(true);}
          code2 {o->value(pars->Pbwscale-64);}
          class mwheel_val_slider_rev
        }
      }
      Fl_Group globalfiltergroup {
        label { FILTER }
        xywh {440 221 290 185} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
        code0 {if (pars->PGlobalFilterEnabled==0) o->deactivate();}
      } {
        Fl_Group filterenv {
          label {SUBsynth - Filter Envelope}
          xywh {447 328 275 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->GlobalFilterEnvelope, npart, kititem, 1, 2);}
          class EnvelopeUI
        } {}
        Fl_Group filterui {
          label {SUBsynth - Filter}
          xywh {447 246 275 75} box FLAT_BOX color 50 align 144
          code0 {o->init(pars->GlobalFilter,&pars->PGlobalFilterVelocityScale,&pars->PGlobalFilterVelocityScaleFunction, npart, kititem, 1);}
          class FilterUI
        } {}
      }
      Fl_Check_Button filtere {
        label On
        callback {//
        if (o->value() == 0)
            globalfiltergroup->deactivate();
        else
            globalfiltergroup->activate();
        o->show();
        globalfiltergroup->redraw();
        send_data (64, o->value(), 0xc8);}
        xywh {446 227 36 13} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11
        code0 {o->value(pars->PGlobalFilterEnabled);}
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars);}
        xywh {540 449 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
        xywh {576 449 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Group {} {
        label OVERTONES
        xywh {440 140 290 81} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Choice spreadtype {
          label {Overtone Positions}
          callback {//
          send_data (51, o->value(), 0xc0);}
          xywh {460 171 87 20} down_box BORDER_BOX labelsize 10 align 2 textsize 10
          code0 {o->value(pars->POvertoneSpread.type);}
        } {
          MenuItem {} {
            label Harmonic
            xywh {5 5 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label ShiftU
            xywh {15 15 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label ShiftL
            xywh {25 25 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label PowerU
            xywh {25 25 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label PowerL
            xywh {35 35 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Sine
            xywh {45 45 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Power
            xywh {55 55 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Shift
            xywh {25 25 34 20} labelfont 1 labelsize 11
          }
        }
        Fl_Dial spreadpar1 {
          label Par1
          callback {//
          send_data (48, o->value(), 0xc8);}
          xywh {570 166 30 30} box ROUND_UP_BOX labelsize 10 maximum 255 step 1
          code0 {o->value(pars->POvertoneSpread.par1);}
          code1 {o->init(0);}
          class WidgetPDial
        }
        Fl_Dial spreadpar2 {
          label Par2
          callback {//
          send_data (49, o->value(), 0xc8);}
          xywh {625 166 30 30} box ROUND_UP_BOX labelsize 10 maximum 255 step 1
          code0 {o->value(pars->POvertoneSpread.par2);}
          code1 {o->init(0);}
          class WidgetPDial
        }
        Fl_Dial spreadpar3 {
          label ForceH
          callback {//
          send_data (50, o->value(), 0xc8);}
          tooltip {Move towards closest harmonic} xywh {680 166 30 30} box ROUND_UP_BOX labelsize 10 maximum 255 step 1
          code0 {o->value(pars->POvertoneSpread.par3);}
          code1 {o->init(0);}
          code2 {o->setValueType(VC_percent255);}
          class WidgetPDial
        }
      }
    }
  }
  Function {refresh()} {} {
    code {//
    for (int i = 0; i < MAX_SUB_HARMONICS; ++i)
        h[i]->refresh();
    vol->value(pars->PVolume);
    vsns->value(pars->PAmpVelocityScaleFunction);
    pan->value(pars->PPanning);

    bandwidth->value(pars->Pbandwidth);
    bwidthscale->value(pars->Pbwscale-64);
    bwee->value(pars->PBandWidthEnvelopeEnabled);
    if (pars->PBandWidthEnvelopeEnabled == 0)
        bandwidthenvelopegroup->deactivate();
    else
        bandwidthenvelopegroup->activate();
    bwee->show();
    bandwidthsettingsui->redraw();

    detunevalueoutput->value(getDetune(pars->PDetuneType,0,pars->PDetune));
    freqee->value(pars->PFreqEnvelopeEnabled);
    if (pars->PFreqEnvelopeEnabled == 0)
        freqenvelopegroup->deactivate();
    else
        freqenvelopegroup->activate();
    freqee->show();
    freqsettingsui->redraw();

    detune->value(pars->PDetune - 8192);
    hz440->value(pars->Pfixedfreq);

    fixedfreqetdial->value(pars->PfixedfreqET);

    int k = pars->PCoarseDetune / 1024;
    if (k >= 8)
        k -= 16;
    octave->value(k);

    detunetype->value(pars->PDetuneType - 1);

    k = pars->PCoarseDetune % 1024;
    if (k >= 512)
        k -= 1024;
    coarsedet->value(k);

    filtere->value(pars->PGlobalFilterEnabled);
    if (pars->PGlobalFilterEnabled == 0)
        globalfiltergroup->deactivate();
    else
        globalfiltergroup->activate();
    filtere->show();
    globalfiltergroup->redraw();

    stereo->value(pars->Pstereo);
    filterstages->value(pars->Pnumstages);
    magtype->value(pars->Phmagtype);
    start->value(pars->Pstart);

    ampenv->refresh();
    bandwidthenvelopegroup->refresh();
    freqenvelopegroup->refresh();
    filterui->refresh();
    filterenv->refresh();} {}
  }
  Function {send_data(int control, float value, int type)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, 1);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char insert = getData->data.insert;
    bool val_bool = (value > 0.5f);
    if (insert == 6)
    {
        h[control]->mag->value(127 - (int) value);
        return;
    }
    if (insert == 7)
    {
        h[control]->bw->value(127 - (int) value);
        return;
    }

    switch(control)
    {
        case 0:
            vol->value(value);
            break;

        case 1:
            vsns->value(value);
            break;

        case 2:
            pan->value(value);
            randompan->value(value == 0);
            break;

        case 16:
            bandwidth->value(value);
            break;

        case 17:
            bwidthscale->value(value);
            break;

        case 18:
            bwee->value(val_bool);
            break;

        case 32:
            detune->value(value);
            detunevalueoutput->do_callback();
            break;

        case 33:
            fixedfreqetdial->value(value);
            break;

        case 34:
            hz440->value(value > 0.5f);
            if (value == 0)
                fixedfreqetdial->deactivate();
            else
                fixedfreqetdial->activate();
            break;

        case 35:
            octave->value(lrint(value));
            break;

        case 36:
            detunetype->value(value);
            break;

        case 37:
            coarsedet->value(value);
            break;

        case 38:
            bend->value(value);
            break;

        case 39:
            offset->value(value);
            break;

        case 40:
            freqee->value(value);
            break;

        case 48:
            spreadpar1->value((unsigned int) value);
            break;

        case 49:
            spreadpar2->value((unsigned int) value);
            break;

        case 50:
            spreadpar3->value((unsigned int) value);
            break;

        case 51:
            spreadtype->value((int) value);
            break;

        case 64:
            filtere->value(val_bool);
            if (val_bool)
                globalfiltergroup->activate();
            else
                globalfiltergroup->deactivate();
            globalfiltergroup->redraw();
            break;

        case 80:
            filterstages->value((int) value);
            break;
        case 81:
            magtype->value((int) value);
            break;

        case 82:
            start->value((int) value);
            break;

        case 96:
            for (int i = 0; i < MAX_SUB_HARMONICS; i++)
            {
                h[i]->mag->value(127);
                h[i]->mag->selection_color(0);
                h[i]->bw->value(64);
                h[i]->bw->selection_color(0);
            }
            h[0]->mag->selection_color(222);
            h[0]->mag->value(0);
            break;

        case 112:
            stereo->value(val_bool);
            break;
    }} {}
  }
  Function {SUBnoteUI(SUBnoteParameters *parameters, int npart_, int kititem_)} {} {
    code {//
    pars = parameters;
    synth = pars->getSynthEngine();
    npart = npart_;
    kititem = kititem_;
    make_window();} {}
  }
  Function {~SUBnoteUI()} {return_type virtual
  } {
    code {//
    SUBparameters->hide();
    delete(SUBparameters);} {}
  }
  decl {SUBnoteParameters *pars;} {private local
  }
  decl {SUBnoteharmonic *h[MAX_SUB_HARMONICS];} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
}
