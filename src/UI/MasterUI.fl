# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {MasterUI.h} {not_in_source in_header
}

comment {MasterUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014-2017, Will Godfrey & others

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original.

Modified July 2017


} {in_source in_header
}

decl {\#include <string>} {public local
}

decl {\#include <iostream>} {public local
}

decl {using namespace std;} {public local
}

decl {\#include "UI/MiscGui.h"} {public local
}

decl {\#include "ADnoteUI.h"} {public local
}

decl {\#include "SUBnoteUI.h"} {public local
}

decl {\#include "EffUI.h"} {public local
}

decl {\#include "VirKeyboardUI.h"} {public local
}

decl {\#include "ConfigUI.h"} {public local
}

decl {\#include "BankUI.h"} {public local
}

decl {\#include "PartUI.h"} {public local
}

decl {\#include "MicrotonalUI.h"} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

decl {\#include "ParametersUI.h"} {public local
}

decl {\#include "VectorUI.h"} {public local
}

decl {\#include "ConsoleUI.h"} {public local
}

decl {\#include "MasterMiscUI.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public local
}

decl {\#include "Misc/MiscFuncs.h"} {public local
}

decl {\#include "MidiLearnUI.h"} {public local
}

decl {extern bool mainCreateNewInstance(unsigned int forceId);} {private global
}

class MasterUI {selected : {private MiscFuncs}
} {
  Function {MasterUI(SynthEngine *_synth)} {} {
    code {//
      synth = _synth;
      presetsui = NULL;
      ninseff = 0;
      nsyseff = 0;
      npart = 0;
      panelgroup = 0;
      for (int i = 0; i < NUM_SYS_EFX; ++i)
        for (int j = 0; j < NUM_SYS_EFX; ++j)
          syseffsend[i][j] = NULL;
      microtonalui = NULL;
      bankui = NULL;
      virkeyboard = NULL;
      configui = NULL;
      presetsui = NULL;
      paramsui = NULL;
      yoshiLog = NULL;
      laststatefile = synth->getRuntime().StateFile;} {}
  }
  Function {~MasterUI()} {} {
    code {//
      saveWindowData();
      masterwindow->hide();
      aboutwindow->hide();
      delete aboutwindow;
      syseffsendwindow->hide();
      delete syseffsendwindow;
      panelwindow->hide();
      delete panelwindow;
      if (microtonalui)
      {
        microtonalui->Hide();
        delete microtonalui;
      }
      if (bankui)
      {
        bankui->Hide();
        delete bankui;
      }
      if (virkeyboard)
      {
        virkeyboard->Hide();
        delete virkeyboard;
      }
      if (configui)
      {
        configui->Hide();
        delete configui;
      }
      if (presetsui)
      {
        presetsui->Hide();
        delete presetsui;
      }
      if (paramsui)
      {
        paramsui->Hide();
        delete paramsui;
      }
      if (vectorui)
      {
        vectorui->Hide();
        delete vectorui;
      }
      if (midilearnui)
      {
        midilearnui->Hide();
        delete midilearnui;
      }

      if (yoshiLog)
      {
        yoshiLog->Hide();
        delete yoshiLog;
      }
      delete masterwindow;} {}
  }
  Function {Init(const char *_label)} {} {
    code {//
      instance = synth->getUniqueId();

      filename = synth->getRuntime().ConfigDir + "/" +synth->getRuntime().programCmd();
      if (instance > 0)
      {
          filename += ("-" + asString(instance));
      }
      partmax = synth->getRuntime().NumAvailableParts;
      filename += ".windows";
      microtonalui = new MicrotonalUI(&synth->microtonal, synth);
      bankui = new BankUI(&npart, synth);
      virkeyboard = new VirKeyboard(synth);
      configui = new ConfigUI(synth);
      presetsui = new PresetsUI(synth);
      paramsui = new ParametersUI(synth);
      vectorui = new VectorUI(synth, bankui, paramsui);
      midilearnui = new MidiLearnUI(synth);
      yoshiLog = new ConsoleUI();

      make_window();
      loadWindowData();
      if(synth->getIsLV2Plugin())
      {
      	masterwindow->label(_label);
      }
      else
      {
	setMasterLabel(synth->getRuntime().paramsLoad);
      }
      masterwindow->show();

      // these don't have access to synth ->
      microtonalui->microtonaluiwindow->copy_label(synth->makeUniqueName("Scales").c_str());
      yoshiLog->logConsole->copy_label(synth->makeUniqueName("Console").c_str());

      if (panelO)
          mixerpanel->do_callback();
      if (instrumentsO)
          bankui->Show();
      if (banksO)
          bankui->bankuiwindow->show();
      if (presetsO)
          configui->presets->show();
      if (rootsO)
          bankui->rootuiwindow->show();
      if (scalesO)
          microtonalui->microtonaluiwindow->show();
      if (virkbdO)
          virkeyboard->Show();
      if (settingsO)
          configui->Show();
      if (yoshiLogO)
          yoshiLog->Show();
      if (vectorO)
          vectorui->Show();
      if (mlearnO)
          midilearnui->Show();
      if (controllersO)
          partui->ctlwindow->show();
      if (midictlO)
          partui->ctlmidi->show();
      if (inseditO)
          partui->instrumenteditwindow->show();
      //if (kitlistO)
          //partui->instrumentkitlist->show();
      //if (partfxO)
          //partui->partfx->show();} {}
  }
  Function {make_window()} {} {
    Fl_Window masterwindow {
      label {Yoshimi meets ZynAddSubFX}
      callback {//
    if (synth->getRuntime().configChanged)
    {
        int r = fl_choice("Parameters Changed", "Save Changes", "Cancel", "Don't Save");
        switch (r)
        {
            case 0:
                synth->getRuntime().configChanged = false;
                // this seems backwards but it *always* saves.
                // seeing configChanged makes it reload the old settings first.
                synth->guiClosed(true);
                break;
            case 2:
                synth->guiClosed(true);
                break;
            default:
                break;
        }
    }
    else
    {
        synth->guiClosed(true);
    }}
      xywh {300 438 385 465} type Double labelfont 13 labelsize 12 hide xclass Yoshimi
    } {
      Fl_Box {} {
        xywh {279 28 103 85} box ENGRAVED_FRAME
      }
      Fl_Menu_Bar mastermenu {
        xywh {-7 0 395 25} labelsize 12 textsize 12
        class ClearMenuBar
      } {
        Submenu {} {
          label {&Yoshimi}
          xywh {0 0 96 20} labelsize 12
        } {
          MenuItem {} {
            label {&About...}
            callback {aboutwindow->show();}
            tooltip {Copyright and version info} xywh {15 15 100 20} labelsize 12
          }
          MenuItem newinstanceid {
            label {&New instance...}
            callback {if(synth->getIsLV2Plugin())
    return;

const char *sId = fl_input("Accept next, or enter desired instance id...", "next");
if (sId == NULL)
    return;
unsigned int forceId = 0;
if (sId)
    forceId = string2uint(sId);
mainCreateNewInstance(forceId);}
            xywh {0 0 31 21} labelsize 12
          }
          MenuItem {} {
            label {&Settings...}
            callback {configui->Show();}
            tooltip {View, change, save settings} xywh {25 25 100 20} labelsize 12
          }
          MenuItem {} {
            label {&MIDI Learn...}
            callback {midilearnui->Show();}
            xywh {0 0 34 20} labelsize 12
          }
          MenuItem {} {
            label {E&xit}
            callback {masterwindow->do_callback();}
            xywh {10 10 100 20} labelsize 12
          }
        }
        Submenu {} {
          label {&Instruments}
          xywh {0 0 100 20} labelsize 12
        } {
          MenuItem {} {
            label {S&how Stored...}
            callback {bankui->Show();}
            xywh {20 20 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Load External...}
            callback {//
                const char *filename;
                filename = fl_file_chooser("Load:", "({*.xiz})", NULL, 0);
                if (filename == NULL)
                    return;
	        synth->writeRBP(5, npart,miscMsgPush(filename));}
            tooltip {Load an instrument (.xiz) file} xywh {30 30 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Save External...}
            callback {//
    if (synth->part[npart]->Pname == "Simple Sound")
    {
        fl_alert("Nothing to save!");
        return;
    }
    char *filename = fl_file_chooser("Save:", "({*.xiz})", synth->part[npart]->Pname.c_str(), 0);
    if (filename == NULL)
        return;
    filename = fl_filename_setext(filename, ".xiz");
    if (isRegFile(string(filename)))
        if (fl_choice("The file exists. \\nOverwrite it?", NULL, "No", "Yes") < 2)
            return;
    synth->actionLock(lockmute);
    bool result = synth->part[npart]->saveXML(string(filename));
    synth->actionLock(unlock);
    if (!result)
        fl_alert("Failed to save instrument file");
    updatepanel();}
            tooltip {Save current instrument to an .xiz file} xywh {20 20 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Clear}
            callback {//
    if(fl_choice("Clear parameters of instrument %d ?", NULL, "No", "Yes", npart + 1) > 1)
        send_data(96, 0, 0xd0, npart);}
            xywh {35 35 100 20} labelsize 12
          }
        }
        Submenu Parameters {
          label {&Patch Sets}
          xywh {0 0 70 20} labelsize 12
          code0 {o = o; // suppress warning}
          code1 {vector <string> listType = *synth->getHistory(2);}
          code2 {if (listType.size() == 0) RecentParams->deactivate(); else RecentParams->activate();}
        } {
          MenuItem {} {
            label {S&how Patch Banks...}
            callback {bankui->bankuiwindow->show();}
            xywh {30 30 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Load External...}
            callback {//
                do_load_master(true, NULL);}
            tooltip {Load a patch set (.xmz) file} xywh {0 0 34 21} labelsize 12
          }
          MenuItem Save {
            label {&Save External...}
            callback {//
    bool valid = false;
    for(int npart = 0; npart < NUM_MIDI_PARTS; npart ++)
        if (synth->part[npart]->Pname != "Simple Sound")
        {
            valid = true;
            npart = NUM_MIDI_PARTS;
        }
    if (valid)
        do_save_master();
    else
        fl_alert("Nothing to save!");}
            tooltip {Save current parameters to an .xmz file} xywh {0 0 34 21} labelsize 12
          }
          MenuItem RecentParams {
            label {&Recent Sets...}
            callback {paramsui->Recent->position(masterwindow->x() + masterwindow->w() - paramsui->Recent->w(),masterwindow->y()+20);
paramsui->Show(2);}
            xywh {0 0 34 21} labelsize 12
          }
        }
        Submenu {} {
          label {Pat&hs}
          xywh {0 0 65 20} labelsize 12
        } {
          MenuItem {} {
            label {&Bank Root Dirs...}
            callback {bankui->rootuiwindow->show();}
            xywh {30 30 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Preset Dirs...}
            callback {configui->presets->show();}
            xywh {0 0 34 20} labelsize 12
          }
        }
        Submenu Scales {
          label {&Scales}
          tooltip {Clear all parameters to default settings} xywh {0 0 60 20} labelsize 12
          code0 {o = o; // suppress warning}
          code1 {vector <string> listType = *synth->getHistory(3);}
          code2 {if (listType.size() == 0) RecentScale->deactivate(); else RecentScale->activate();}
        } {
          MenuItem {} {
            label {S&how Settings...}
            callback {microtonalui->Show();}
            xywh {20 20 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Load...}
            callback {//

    const char *filename = fl_file_chooser("Open:", "({*.xsz})", NULL, 0);
    if (filename != NULL)
        do_load_scale(string(filename));}
            xywh {35 35 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Save...}
            callback {//
                char *filename;
                filename = fl_file_chooser("Save:", "({*.xsz})", NULL, 0);
                if (filename == NULL)
                    return;
                filename = fl_filename_setext(filename, ".xsz");
                if (isRegFile(string(filename)))
                    if (fl_choice("The file exists. \\nOverwrite it?", NULL, "No", "Yes") < 2)
                        return;
                send_data(89, 0, 0xc0, 0xf0, 0xff, 0xff, 0xff, miscMsgPush(string(filename)));}
            xywh {25 25 100 20} labelsize 12
          }
          MenuItem RecentScale {
            label {&Recent Scales...}
            callback {paramsui->Recent->position(masterwindow->x() + masterwindow->w() - paramsui->Recent->w(),masterwindow->y()+20);
paramsui->Show(3);}
            xywh {20 20 34 21} labelsize 12
          }
          MenuItem {} {
            label {&Clear}
            callback {\#
    if (fl_choice("Set scales to the defaults?", NULL, "No", "Yes") > 1)
    {
        synth->microtonal.defaults();
        synth->setAllPartMaps();
        if (NULL != microtonalui)
            delete microtonalui;
        microtonalui = new MicrotonalUI(&synth->microtonal, synth);
        send_data(96, 0, 0xd0, 0xe8);
    }}
            xywh {0 0 34 20} labelsize 12
          }
        }
        Submenu {} {
          label {S&tate}
          xywh {0 0 60 20} labelsize 12
          code0 {o = o; // suppress warning}
          code1 {vector <string> listType = *synth->getHistory(4);}
          code2 {if (listType.size() == 0) RecentState->deactivate(); else RecentState->activate();}
        } {
          MenuItem loadState {
            label {&Load...}
            callback {// for Alessandro
    char *fle = fl_file_chooser("Load:", "({*.state})", laststatefile.c_str(), 0);
    if (fle)
    {
        setState(fle);
        RecentState->activate();
    }
    else
        refresh_master_ui(0x80 | (miscMsgPush(" ") << 8));}
            tooltip {Load session state} xywh {0 0 34 21} labelsize 12
          }
          MenuItem saveState {
            label {&Save...}
            callback {// for Alessandro

                char *fle = fl_file_chooser("Save:", "({*.state})",
                                            laststatefile.c_str(), 0);
                if (fle)
                {
                    send_data(93, 0, 0xc0, 0xf0, 0xff, 0xff, 0xff, miscMsgPush(string(fle)));
                    laststatefile = string(fle);
                    RecentState->activate();
                }}
            tooltip {Save session state} xywh {10 10 34 21} labelsize 12
          }
          MenuItem RecentState {
            label {&Recent States...}
            callback {paramsui->Recent->position(masterwindow->x() + masterwindow->w() - paramsui->Recent->w(),masterwindow->y()+20);
paramsui->Show(4);}
            xywh {10 10 34 21} labelsize 12
          }
        }
      }
      Fl_Group MasterControls {
        label {Master  }
        xywh {3 24 380 91} labeltype NO_LABEL labelsize 11 labelcolor 96 align 22
      } {
        Fl_Dial globalfinedetune {
          label Detune
          callback {//
    send_data(32, o->value(), 0xc8);}
          tooltip {Global Fine Detune} xywh {286 32 40 40} box ROUND_UP_BOX color 29 labelsize 10 maximum 127 step 1 value 64
          code0 {o->setValueType(VC_GlobalFineDetune);}
          code1 {o->value(synth->microtonal.Pglobalfinedetune);}
          code2 {o->init(64);}
          class WidgetPDial
        }
        Fl_Button {} {
          label Reset
          callback {//
    if (fl_choice("Set *ALL* dynamic values to their defaults?", NULL, "No", "Yes") > 1)
    {
        send_data(96, o->value(), 0xc0);
    }}
          tooltip {Clear all dynamic settings} xywh {7 60 70 24} box PLASTIC_UP_BOX color 228 selection_color 32 labelfont 1 labelsize 11 align 16
        }
        Fl_Button {} {
          label {Stop!}
          callback {//
              send_data(128, o->value(), 0xc0);}
          tooltip {Cease all sound immediately!} xywh {7 30 70 24} box PLASTIC_UP_BOX color 88 selection_color 0 labelfont 1 labelsize 11 align 16
        }
        Fl_Dial mastervolumedial {
          label Volume
          callback {send_data(0, o->value(), 0x48);}
          tooltip {Master Volume} xywh {335 32 40 40} box ROUND_UP_BOX color 29 labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_MasterVolume);}
          code1 {o->value(synth->Pvolume);}
          code2 {o->init(90);}
          class WidgetPDial
        }
        Fl_Button {} {
          label {Virtual Keyboard}
          callback {virkeyboard->Show();}
          tooltip {Virtual Keyboard} xywh {85 60 110 24} box PLASTIC_UP_BOX color 228 labelsize 11 labelcolor 32
        }
        Fl_Button mixerpanel {
          label {Mixer Panel}
          callback {//
                updatepanel();
                panelwindow->show();}
          tooltip {Mixer Panel Window} xywh {85 30 110 24} box PLASTIC_UP_BOX color 228 labelsize 11 labelcolor 32
        }
        Fl_Button Reports {
          label Reports
          callback {yoshiLog->Show();}
          tooltip {Message Log} xywh {203 60 70 24} box PLASTIC_UP_BOX color 228 labelsize 11
          code0 {if (synth->getRuntime().toConsole == false)Reports->deactivate();}
        }
        Fl_Button vectors {
          label Vectors
          callback {//
	vectorui->Show();}
          tooltip {Vector Setup Window} xywh {203 30 70 24} box PLASTIC_UP_BOX color 228 labelsize 11 labelcolor 32
        }
      }
      Fl_Tabs sysinsgroup {
        label {System/Insert}
        callback {//
            if (o->value() == SystemEffectsGrp)
                showSysEfxUI();
           else if (o->value() == InsertionEffectsGrp)
               showInsEfxUI();}
        xywh {3 88 379 68} box PLASTIC_UP_BOX color 44 selection_color 221 labeltype NO_LABEL labelsize 12 align 5
      } {
        Fl_Group SystemEffectsGrp {
          label {  System Effects  }
          xywh {3 116 379 40} color 221 selection_color 31 labelfont 1 labelsize 12 align 4
        } {
          Fl_Spinner syseffnocounter {
            label Effect
            callback {//
              nsyseff = o->value() - 1;
              sysefftype->value(synth->sysefx[nsyseff]->geteffect());
              syseffectui->refresh(synth->sysefx[nsyseff], 0xf1, nsyseff);
              send_data(0, o->value() - 1, 0xc0, 0xf1);}
            xywh {40 126 36 20} labeltype NO_LABEL labelsize 11 align 0 maximum 4 textfont 1 textsize 11
            code0 {o->range(1, NUM_SYS_EFX);}
            code1 {o->value(nsyseff + 1);}
          }
          Fl_Choice sysefftype {
            label Type
            callback {//
              synth->actionLock(lockmute);
              synth->sysefx[nsyseff]->changeeffect(o->value());
              synth->actionLock(unlock);
              syseffectui->refresh(synth->sysefx[nsyseff], 0xf1, nsyseff);
              showSysEfxUI();
              send_data(1, o->value(), 0xc0, 0xf1);}
            xywh {120 126 96 20} down_box BORDER_BOX labeltype NO_LABEL labelsize 10 align 16
            code0 {o->value(synth->sysefx[nsyseff]->geteffect());}
          } {
            MenuItem {} {
              label {No Effect}
              xywh {10 10 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Reverb
              xywh {20 20 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Echo
              xywh {30 30 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Chorus
              xywh {40 40 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Phaser
              xywh {50 50 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label AlienWah
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Distortion
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label EQ
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label DynFilter
              xywh {90 90 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Button {} {
            label {Send to}
            callback {syseffsendwindow->show();}
            xywh {256 126 62 20} box THIN_UP_BOX labelfont 1 labelsize 11 labelcolor 97
          }
          Fl_Button {} {
            label C
            callback {presetsui->copy(synth->sysefx[nsyseff]);}
            xywh {350 122 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
          Fl_Button {} {
            label P
            callback {//
    synth->actionLock(lockmute);
    presetsui->paste(synth->sysefx[nsyseff], syseffectui);
    synth->actionLock(unlock);}
            xywh {350 137 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
        }
        Fl_Group InsertionEffectsGrp {
          label { Insertion Effects }
          xywh {3 116 379 40} color 221 selection_color 31 labelfont 1 labelsize 12 labelcolor 33 align 4 hide
        } {
          Fl_Spinner inseffnocounter {
            label Effect
            callback {//
              ninseff = o->value() - 1;
              insefftype->value(synth->insefx[ninseff]->geteffect());
              inseffpart->value(synth->Pinsparts[ninseff] + 2);
              inseffectui->refresh(synth->insefx[ninseff], 0xf2, ninseff);
              if (synth->Pinsparts[ninseff] != -1)
              {
                insefftype->activate();
                inseffectui->activate();
                inseffectuigroup->activate();
              }
              else
              {
                insefftype->deactivate();
                inseffectui->deactivate();
                inseffectuigroup->deactivate();
              }
              send_data(0, o->value() - 1, 0xc0, 0xf2);}
            xywh {40 126 36 20} labeltype NO_LABEL labelsize 11 align 20 maximum 8 textfont 1 textsize 11
            code0 {o->range(1, NUM_INS_EFX);}
            code1 {o->value(ninseff + 1);}
          }
          Fl_Choice insefftype {
            label Type
            callback {//
              synth->actionLock(lockmute);
              synth->insefx[ninseff]->changeeffect(o->value());
              synth->actionLock(unlock);
              inseffectui->refresh(synth->insefx[ninseff], 0xf2, ninseff);
              showInsEfxUI();
              send_data(1, o->value(), 0xc0, 0xf2);}
            xywh {120 126 96 20} down_box BORDER_BOX labeltype NO_LABEL labelsize 11 align 0 textsize 12
            code0 {o->value(synth->insefx[ninseff]->geteffect());}
            code1 {if (synth->Pinsparts[ninseff]== -1) o->deactivate();}
          } {
            MenuItem {} {
              label {No Effect}
              xywh {25 25 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Reverb
              xywh {35 35 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Echo
              xywh {45 45 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Chorus
              xywh {55 55 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Phaser
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label AlienWah
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Distortion
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label EQ
              xywh {90 90 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label DynFilter
              xywh {100 100 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Choice inseffpart {
            label {To }
            callback {//
              synth->Pinsparts[ninseff] = o->value() - 2;
              if (o->value() == 1)
              {
                inseffectuigroup->deactivate();
                insefftype->deactivate();
                inseffectui->deactivate();
              }
              else
              {
                inseffectuigroup->activate();
                insefftype->activate();
                inseffectui->activate();
              }
              synth->insefx[ninseff]->cleanup();
              send_data(2, o->value() - 2, 0xc0, 0xf2);}
            xywh {242 126 96 20} down_box BORDER_BOX labelfont 1 labelsize 10 textfont 1 textsize 11
            code0 {setinspartlist();}
            code3 {o->value(synth->Pinsparts[ninseff]+2);}
          } {}
          Fl_Button {} {
            label C
            callback {presetsui->copy(synth->insefx[ninseff]);}
            xywh {350 122 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
          Fl_Button {} {
            label P
            callback {//
              synth->actionLock(lockmute);
              presetsui->paste(synth->insefx[ninseff], inseffectui);
              synth->actionLock(unlock);}
            xywh {350 137 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
        }
      }
      Fl_Group syseffectuigroup {
        xywh {3 158 384 95} box FLAT_BOX color 48 labeltype NO_LABEL
        code0 {o->show();}
      } {
        Fl_Group syseffectui {open
          xywh {3 158 384 95} labeltype NO_LABEL
          code0 {o->init(synth->sysefx[nsyseff], 0xf1, nsyseff);o->activate();o->show();}
          class EffUI
        } {}
      }
      Fl_Group inseffectuigroup {
        xywh {3 158 384 95} box FLAT_BOX color 48
        code0 {o->hide();}
      } {
        Fl_Group inseffectui {open
          xywh {3 158 379 95} color 52
          code0 {o->init(synth->insefx[ninseff], 0xf2, ninseff);o->hide();}
          code1 {if (synth->Pinsparts[ninseff]== -1) o->deactivate();}
          class EffUI
        } {}
      }
      Fl_Group partuigroup {
        xywh {3 255 380 170} box ENGRAVED_FRAME
      } {
        Fl_Group partui {
          xywh {3 255 379 170} color 47
          code0 {o->init(synth->part[0],0,bankui);}
          code1 {o->show();}
          class PartUI
        } {}
      }
      Fl_Group {} {
        xywh {3 427 379 36} box DOWN_BOX color 43 labelsize 12
      } {
        Fl_Box vumeter {
          label {VU-Meter}
          xywh {3 429 379 34} color 48 selection_color 75
          code0 {o->init(-1, synth);}
          class VUMeter
        }
      }
      Fl_Spinner masterkeyshift {
        label {Key Shift}
        callback {//
    send_data(35, o->value(), 0xc0);}
        tooltip {Shift pitch +/- N semitones} xywh {336 88 38 20} labelsize 10 minimum -36 maximum 36 textsize 10
        code0 {o->range(MIN_KEY_SHIFT, MAX_KEY_SHIFT);o->step(1.0);}
        code1 {o->value(synth->Pkeyshift - 64);}
      }
      Fl_Spinner npartcounter {
        label Part
        callback {//
    int nval = o->value() - 1;
    synth->getRuntime().currentPart = nval;
    partNew(nval);
    send_data(14, nval, 0xc0);}
        xywh {36 264 40 20} labelsize 11 when 6 minimum 0 maximum 127 textsize 11
        code0 {o->range(1.0, partmax);}
        code1 {o->value(synth->getRuntime().currentPart + 1);}
        code2 {bankui->init(o);}
      }
      Fl_Spinner maxparts {
        label of
        callback {//
    int tmp = o->value();
    if (tmp == 48)
    {
        if (partmax == 32)
            tmp = 64;
        else
            tmp = 32;
        o->value(tmp);
    }
    partmax = tmp;
    updatepart();
    updatepanel();
    setinspartlist();
    send_data(15, tmp, 0xc0);}
        tooltip {Set the number of available parts} xywh {93 264 40 20} labelsize 11 minimum 16 maximum 64 step 16 value 16 textsize 11
        code0 {o->value(partmax);}
      }
    }
    Fl_Window aboutwindow {
      label {About Yoshimi}
      xywh {4 20 365 290} type Double color 54 labelfont 13 labelsize 13 when 0 hide
    } {
      Fl_Box {} {
        label {Yoshimi
meets
ZynAddSubFX}
        xywh {10 17 345 70} labeltype EMBOSSED_LABEL labelfont 13 labelsize 18 labelcolor 216 align 16 when 0
      }
      Fl_Box {} {
        label {copyright notice}
        xywh {25 93 315 91} color 51 selection_color 30 labelfont 13 labelsize 11 align 208 when 0
        code0 {o->copy_label(string("Copyright (c) 2002-2009 Nasca O. PAUL and others"
                               "\\nCopyright 2009-2011, Alan Calvert"
                               "\\nCopyright 2012-2013, Jeremy Jongepier and others"
                               "\\nCopyright 2014-2017, Will Godfrey and others"
                               "\\nLV2 plugin Copyright 2014, Andrew Deryabin"
                               "\\nSplash Image Copyright 2017, Jesper Lloyd").c_str());}
      }
      Fl_Box {} {
        label {copy terms}
        xywh {10 198 340 53} labelsize 11 align 144 when 0
        code0 {//
            o->copy_label(string("This is free software, and comes with ABSOLUTELY NO WARRANTY; "
                                 "you may redistribute it and/or modify it under the terms of "
                                 "GPL version 2, or (at your option) any later version.\\n\\n").c_str());}
      }
      Fl_Box {} {
        label { version}
        xywh {55 254 240 20} labelfont 1 labelsize 12 labelcolor 145
        code0 {//
            o->copy_label((string("Yoshimi version ")
                           + string( YOSHIMI_VERSION )).c_str());}
      }
      Fl_Button {} {
        label Close
        callback {aboutwindow->hide();}
        xywh {305 253 43 22} box THIN_UP_BOX labelsize 11
      }
    }
    Fl_Window syseffsendwindow {
      label {Sys Send}
      xywh {4 20 120 250} type Double labelfont 13 labelsize 13 hide
    } {
      Fl_Scroll {} {
        xywh {10 45 107 170} box FLAT_BOX
        code0 {//
            for (int neff1 = 0; neff1 < NUM_SYS_EFX; neff1++)
                for (int neff2 = neff1 + 1; neff2 < NUM_SYS_EFX; neff2++)}
        code1 {{
                syseffsend[neff1][neff2] =
                    new SysEffSend(o->x()+(neff2 - 1) * 35, o->y() + 20 + neff1 * 52, 30, 30);
                syseffsend[neff1][neff2]->label("aaa");
                syseffsend[neff1][neff2]->init(neff1, neff2, synth);
                syseffsend[neff1][neff2]->setValueType(VC_FXSysSend);
            }}
      } {}
      Fl_Button {} {
        label Close
        callback {syseffsendwindow->hide();}
        xywh {20 220 80 25} box THIN_UP_BOX
      }
      Fl_Box {} {
        label {Send system effect's output to other system effects}
        xywh {5 5 110 35} labelsize 10 align 192
      }
    }
    Fl_Window panelwindow {
      label {Yoshimi Mixer Panel}
      xywh {6 48 550 675} type Double labelfont 13 labelsize 13 hide
      code0 {if (synth->getRuntime().single_row_panel) Panelbox1->hide();}
      code1 {o->copy_label(synth->makeUniqueName("Mixer Panel").c_str());}
    } {
      Fl_Pack Panelpack1 {
        xywh {8 10 533 286} type HORIZONTAL
        code0 {//
          for (int i = 0; i < 8; i++)
          {
              panellistitem[i] = new Panellistitem(0, 0, 70, 260, "");
              panellistitem[i]->init(i, bankui, synth);
          }}
        code1 {o->spacing(-3);}
      } {}
      Fl_Box Panelbox1 {
        xywh {-4 316 563 7} box THIN_DOWN_BOX deactivate
      }
      Fl_Pack Panelpack2 {
        xywh {8 325 533 286} type HORIZONTAL
        code0 {//
            for (int i = 8; i < 16; i++)
            {
                 panellistitem[i] = new Panellistitem(0, 0, 70, 260, "");
                 panellistitem[i]->init(i, bankui, synth);
            }}
        code1 {o->spacing(-3);}
      } {}
      Fl_Box PanelBox2 {
        xywh {-4 632 563 7} box THIN_DOWN_BOX deactivate
      }
      Fl_Button Panelclose {
        label Close
        callback {panelwindow->hide();}
        xywh {482 645 55 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Button {} {
        label {Change to 1 x 16}
        callback {//
            Panelbox1->hide();
            synth->getRuntime().single_row_panel = 1;
            updatepanel();}
        xywh {356 645 116 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Button {} {
        label {Change to 2 x 8}
        callback {//
            synth->getRuntime().single_row_panel = 0;
            updatepanel();
            Panelbox1->show();}
        xywh {821 314 116 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Choice Panelgroups {
        label {Part Group}
        callback {panelgroup = o->value() * NUM_MIDI_CHANNELS;
Panelsmallgroups->value(o->value());
updatepanel();}
        xywh {12 653 86 18} down_box BORDER_BOX labelsize 12 align 1 textsize 12
      } {
        MenuItem {} {
          label {1 to 16}
          xywh {0 0 34 20}
        }
        MenuItem {} {
          label {17 to 32}
          xywh {0 0 34 20}
        }
        MenuItem {} {
          label {33 to 48}
          xywh {0 0 34 20}
        }
        MenuItem {} {
          label {49 to 64}
          xywh {0 0 34 20}
        }
      }
      Fl_Choice Panelsmallgroups {
        label {Part Group}
        callback {panelgroup = o->value() * NUM_MIDI_CHANNELS;
Panelgroups->value(o->value());
updatepanel();}
        xywh {12 653 86 18} down_box BORDER_BOX labelsize 12 align 1 textsize 12
      } {
        MenuItem {} {
          label {1 to 16}
          xywh {10 10 34 20}
        }
        MenuItem {} {
          label {17 to 32}
          xywh {10 10 34 20}
        }
      }
      Fl_Spinner CSspinner {
        label CC
        callback {CSpend->show();}
        xywh {216 653 50 18} labelsize 12 align 1 minimum 0 maximum 127 value 115 textsize 12
        code0 {CS_CC = synth->getRuntime().channelSwitchCC;}
        code1 {if (CS_CC < 128) o->value(CS_CC); else o->value(115);}
      }
      Fl_Button CSpend {
        label Pending
        callback {//
    int candidate = CSspinner->value();
    if (candidate == CS_CC)
    {
        o->hide();
        return;
    }


    string name = synth->getRuntime().testCCvalue(candidate);
    if (!name.empty())
    {
        fl_alert("In use for %s",name.c_str());
        if (CS_CC < 128)
        {
        CSspinner->value(CS_CC);
        CSspinner->redraw();
        }
    }
    else
    {
        CS_CC = candidate;
        o->hide();
    }
    send_data(49, CSspinner->value(), 0xc0);}
        tooltip {Click to set} xywh {276 651 70 20} box PLASTIC_UP_BOX color 90 labelsize 12 hide
      }
      Fl_Choice channelswitch {
        label Solo
        callback {//
    if (o->value() == 0)
    {
        CS_CC = 128;
        CSspinner->value(115);
        CSspinner->hide();
        CSpend->hide();
    }
    else
    {
        CSspinner->show();
        if(CS_CC == 128)
        	CSpend->show();
    }
    send_data(48, o->value(), 0xc0);}
        tooltip {Assign groups of parts to Ch 1, singly enabled by MIDI} xywh {130 653 53 18} down_box BORDER_BOX labelsize 12 align 1 textsize 12
        code1 {o->value(synth->getRuntime().channelSwitchType);}
        code2 {if (o->value() == 0) CSspinner->hide(); else CSspinner->show();}
        code3 {CS_CC = o->value();}
      } {
        MenuItem switchoff {
          label Off
          xywh {40 40 34 20} labelsize 12
        }
        MenuItem switchrow {
          label Row
          xywh {40 40 34 20} labelsize 12
        }
        MenuItem switchcolumn {
          label Col
          xywh {40 40 34 20} labelsize 12
        }
        MenuItem switchloop {
          label Loop
          xywh {0 0 34 20} labelsize 12
        }
      }
    }
  }
  Function {send_data(int control, float value, int type, int part = 0xff, int engine = 0xff, int insert = 0xff, int parameter = 0xff, int par2 = 0xff)} {} {
    code {//
if (parameter == 0)
{
    collect_data(synth, 0, (Fl::event_button() | type), control, part, 0xff, 0xff, 0xff, 0xff, par2);
    return;
}
if (part == 0xff)
    part = 0xf0;
int eng;
if (part == 0xf1)
    eng = nsyseff;
else if (part == 0xf2)
    eng = ninseff;
else
    eng = 0xff;
collect_data(synth, value, (Fl::event_button() | type), control, part, 0xff, eng, insert, parameter, par2);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char npart = getData->data.part;
    unsigned char engine = getData->data.engine;
    unsigned char insert = getData->data.insert;
    int nval = (int) value;
    if (npart == 0xf1)
    {
        if (insert == 16)
        {
            syseffsend[engine][control]->value(value);
        }
        else
        {
            if (control == 1 && nsyseff == engine)
            {
                sysefftype->value((int) value);
                syseffectui->refresh(synth->sysefx[nsyseff], 0xf1, nsyseff); // needs improving
            }
        }
        Fl::check();
        return;
    }
    else if (npart == 0xf2 && ninseff == engine)
    {
        if (control == 1)
        {
            insefftype->value((int) value);
            inseffectui->refresh(synth->insefx[nsyseff], 0xf1, ninseff); // needs improving
        }
        else if (control == 2)
        {
            inseffpart->value((int) value + 2);
            if (value == -1)
                insefftype->deactivate();
            else
                insefftype->activate();
        }
        Fl::check();
        return;
    }

    switch(control)
    {
    	case 0:
    	    mastervolumedial->value(value);
    	    break;

        case 14:
    	    partuigroup->remove(partui);
            delete partui;
            partui = new PartUI(0, 0, 765, 525);
            partuigroup->add(partui);
            partui->init(synth->part[nval], nval, bankui);
            partui->redraw();
            npart = nval;
            npartcounter->value(nval + 1);
            npartcounter->redraw();
            updatepanel();
            break;

        case 15:
            partmax = lrint(value);
            npartcounter->range(1, partmax);
            updatepart();
            updatepanel();
            setinspartlist();
            break;

        case 32:
    	    globalfinedetune->value(value);
    	    break;

    	case 35:
    	    masterkeyshift->value(value);
            break;

        case 48:
        case 49:
            updatepanel();
            break;

        case 88:
            microtonalui->Hide();
            microtonalui->make_window();
            break;

	case 96:
	    if (npart == 0xff)
	        return; // this is done elsewhere
	    partNew(npart);
            break;

        case 128:
            virkeyboard->relaseallkeys();
            vumeter->init(-1, synth);
            for(int i = 0; i < NUM_MIDI_CHANNELS; ++i)
            {
              	if(panelwindow)
              	{
	         if(panellistitem[i]->partVUMeter)
	             panellistitem[i]->partVUMeter->resetPart();
              	 }
            }
            break;
    }
    Fl::check();} {}
  }
  Function {updatesendwindow()} {} {
    code {//
        for (int neff1 = 0; neff1 < NUM_SYS_EFX; ++neff1)
            for (int neff2 = neff1 + 1; neff2 < NUM_SYS_EFX; ++neff2)
                syseffsend[neff1][neff2]->value(synth->Psysefxsend[neff1][neff2]);} {}
  }
  Function {updatelistitem(int part)} {} {
    code {//
    int tmp = part % NUM_MIDI_CHANNELS;
    panellistitem[tmp]->refresh();} {}
  }
  Function {updatepanel()} {} {
    code {//
        for (int npart = 0; npart < partmax; ++npart)
        {
            if (npart < NUM_MIDI_CHANNELS)
            	panellistitem[npart]->refresh();
            vectorui->setInstrumentLabel(npart);
        }

        if (synth->getRuntime().single_row_panel)
        {
        	panelwindow->size(1085,345);
	        Panelpack2->position(544,10);
	        Panelclose->position(1018,314);
	        Panelgroups->position(12,323);
	        Panelsmallgroups->position(12,323);
	        channelswitch->position(130,323);
	        CSspinner->position(216,323);
	        CSpend->position(276,321);
        }
        else
        {
	        panelwindow->size(550,675);
	        Panelpack2->position(8,325);
	        Panelclose->position(482,645);
	        Panelgroups->position(12,653);
	        Panelsmallgroups->position(12,653);
	        channelswitch->position(130,653);
	        CSspinner->position(216,653);
	        CSpend->position(276,651);
        }

        if (partmax == 64)
            Panelgroups->show();
        else
            Panelgroups->hide();
        if (partmax == 32)
            Panelsmallgroups->show();
        else
            Panelsmallgroups->hide();

        int oldswitch = channelswitch->value();
        channelswitch->value(synth->getRuntime().channelSwitchType);
        if (synth->getRuntime().channelSwitchType > 0)
        {
            if (oldswitch == 0)
            {
                CSspinner->value(115);
                CSpend->show();
            }
            else
            {
                CSspinner->value(synth->getRuntime().channelSwitchCC);
                CSpend->hide();
            }
            CSspinner->show();
        }
        else
        {
            synth->getRuntime().channelSwitchCC = 128;
            CSspinner->hide();
            CSpend->hide();
        }
        panelwindow->changed();} {}
  }
  Function {partNew(int _npart)} {} {
    code {//
    int nval = _npart;
    partuigroup->remove(partui);
    delete partui;
    partui = new PartUI(0, 0, 765, 525);
    partuigroup->add(partui);
    partui->init(synth->part[nval], nval, bankui);
    partui->redraw();
    npartcounter->value(nval + 1);
    npartcounter->redraw();
    npart = nval;
    updatepanel();} {}
  }
  Function {updatepart()} {} {
    code {//
    if (checkmaxparts())
    {
        npart = 0;
        npartcounter->value(npart + 1);
        npartcounter->do_callback();
        maxparts->value(partmax);
        maxparts->redraw();
        return;
    }

    if (synth->partonoffRead(npart))
        partui->partgroupui->activate();
    else
        partui->partgroupui->deactivate();

    partui->partGroupEnable->value(synth->partonoffRead(npart));
    partui->partpan->value(synth->part[npart]->Ppanning);
    partui->partvol->value(synth->part[npart]->Pvolume);
    partui->partkeylimit->value(synth->part[npart]->Pkeylimit);
    partui->velocitysense->value(synth->part[npart]->Pvelsns);
    partui->velocityoffset->value(synth->part[npart]->Pveloffs);
    partui->partkeyshift->value(synth->part[npart]->Pkeyshift - 64);
    partui->minkcounter->value(synth->part[npart]->Pminkey);
    partui->maxkcounter->value(synth->part[npart]->Pmaxkey);
    partui->enportamento->value(synth->part[npart]->ctl->portamento.portamento);

    if (synth->part[npart]->Ppolymode)
        partui->keymode->value(0);
    else
        partui->keymode->value(1);
    if (!synth->part[npart]->Ppolymode && synth->part[npart]->Plegatomode)
        partui->keymode->value(2);

    maxparts->value(partmax);
    maxparts->redraw();
    npartcounter->value(npart + 1);
    npartcounter->redraw();
    partui->checkEngines();} {}
  }
  Function {updatepartprogram(int _npart)} {} {
    code {//
    if (vectorui)
        vectorui->setInstrumentLabel(_npart);
    if (_npart != npart)
        return;

    if (partui->part->Prcvchn <  NUM_MIDI_CHANNELS)
    {
        partui->midich->value(partui->part->Prcvchn + 1);
        partui->midich->textcolor(FL_BLACK);
    }
    else
    {
         partui->midich->textcolor(FL_WHITE);
         partui->midich->redraw();
    }
    npartcounter->do_callback();
    updatepanel();} {}
  }
  Function {updateeffects(int data)} {} {
    code {//
    int partnum = data >> 24;
    int effclass = (data >> 22) & 3;
    //int type = (data >> 12) & 3;
    int parameter = (data >> 8) & 0x7f;

    if (effclass == 2)
    {
         // will be part effects
    }
    else if (effclass == 1)
    {
        ninseff = parameter & 0x3f;
        sysinsgroup->value(InsertionEffectsGrp);
        showInsEfxUI();
        inseffnocounter->value(ninseff + 1);
        inseffpart->value(partnum);
        if (partnum != 1) // off
        {
            insefftype->activate();
            inseffectui->activate();
        }
        else
        {
            insefftype->deactivate();
            inseffectui->deactivate();
        }
        insefftype->value(synth->insefx[ninseff]->geteffect());
        inseffectui->refresh(synth->insefx[ninseff], 0xf2, ninseff);
    }
    else
    {
        nsyseff = parameter & 0x3f;
        sysinsgroup->value(SystemEffectsGrp);
        syseffnocounter->value(nsyseff + 1);
       // if (type == 1)
       // {
        // effect output volume to be done!
      //  }
        sysefftype->value(synth->sysefx[nsyseff]->geteffect());
        syseffectui->refresh(synth->sysefx[nsyseff], 0xf1, nsyseff);
        showSysEfxUI();
    }} {}
  }
  Function {updatecontrollers(int _npart)} {} {
    code {//
    if (npart == _npart)
        partui->ctlmidirefresh();} {}
  }
  Function {setMasterLabel(string name)} {} {
    code {//
    string prefix;
    string panel;
    if  (name.size())
    {
    	prefix = synth->makeUniqueName(name);
    	panel = synth->makeUniqueName("Mixer Panel - "+name);
    }
    else
    {
    	prefix = synth->makeUniqueName("");
    	prefix = prefix.substr(0, prefix.length() - 3);
    	panel = prefix + " : Mixer Panel";
    }
    masterwindow->copy_label(prefix.c_str());
    panelwindow->copy_label(panel.c_str());
    masterwindow->changed();} {}
  }
  Function {do_load_scale(string fname)} {} {
    code {//
    send_data(88, 0, 0xd0, 0xf0, 0xff, 0xff, 0xff, miscMsgPush(fname));} {}
  }
  Function {do_load_master(bool updatehistory, const char* file)} {} {
    code {//
        const char *fname;
        if (NULL != file)
            fname = file;
        else
        {
            fname = fl_file_chooser("Open:", "({*.xmz})", NULL, 0);
            if (fname == NULL)
                return;
        }
        send_data(80, 0, 0xc0, 240, 255, 255, 0, miscMsgPush(fname));} {}
  }
  Function {do_save_master(const char* file = NULL)} {} {
    code {//
    const char *fname;
    bool result = false;
    if (file == NULL)
    {
        char *tmp = fl_file_chooser("Save:", "({*.xmz})", NULL, 0);
        if (tmp == NULL)
            return;
        tmp = fl_filename_setext(tmp, ".xmz");
        fname = tmp;
        result = isRegFile(tmp);
        if (result)
        {
            result = false;
            if (fl_choice("The file exists. Overwrite it?", NULL, "No", "Yes") < 2)
                return;
        }
    }
    else
        fname = file;
    result = synth->saveXML(fname);
    if (!result)
        fl_alert("Could not save the file.");
    else
    {
        synth->addHistory(fname, 2);
        RecentParams->activate();
        setMasterLabel(findleafname(synth->lastPatchSetSeen()));
    }
    updatepanel();} {}
  }
  Function {refresh_master_ui(int type)} {} {
    code {//
    if (microtonalui) // not taking chances!
        delete microtonalui;
    partmax = synth->getRuntime().NumAvailableParts;
    maxparts->value(partmax);
    checkmaxparts();
    npartcounter->value((synth->getRuntime().currentPart) + 1);
    npartcounter->do_callback();
    nsyseff = 0;
    syseffnocounter->value(nsyseff + 1);
    syseffnocounter->do_callback();
    ninseff = 0;
    inseffnocounter->value(nsyseff + 1);
    inseffnocounter->do_callback();
    sysinsgroup->value(SystemEffectsGrp);
    sysinsgroup->do_callback();
    masterkeyshift->value(synth->Pkeyshift - 64);
    mastervolumedial->value(synth->Pvolume);
    globalfinedetune->value(synth->microtonal.Pglobalfinedetune);
    microtonalui = new MicrotonalUI(&synth->microtonal, synth);
    if (type & 0x80)
        setMasterLabel(miscMsgPop((type >> 8) & 0xff));
    else
    	setMasterLabel(findleafname(synth->lastPatchSetSeen()));
    updatesendwindow();
    updatepanel();
    vectorui->updateAll();
    bankui->Hide();
    if (synth->getRuntime().toConsole == false)
        Reports->deactivate();
    else
        Reports->activate();
    if (type & 1)
    	configui->update_config(4);
    if (type & 2)
        vectorui->setLoadLabelRemote(type >> 16, miscMsgPop((type >> 8) & 0xff));} {}
  }
  Function {checkmaxparts()} {return_type bool
  } {
    code {//
    bool changed = false;
    if(panelgroup >= partmax)
    {
        panelgroup = 0;
        Panelgroups->value(0);
        Panelsmallgroups->value(0);
        changed = true;
    }
    npartcounter->range(1, partmax);
    if (npart >= partmax)
    {
        npartcounter->value(1);
        changed = true;
    }
    return changed;} {}
  }
  Function {strategicRetreat(void)} {} {
    code {fl_alert("Bad things happened,\\nYoshimi strategically retreats.");} {}
  }
  Function {Log(string msg)} {} {
    code {yoshiLog->log(msg);} {}
  }
  Function {showSysEfxUI(void)} {private
  } {
    code {//
      inseffectui->hide();
      inseffectui->deactivate();
      inseffectuigroup->hide();
      inseffectuigroup->deactivate();

      syseffectui->activate();
      syseffectui->show();
      syseffectuigroup->activate();
      syseffectuigroup->show();} {}
  }
  Function {showInsEfxUI(void)} {private
  } {
    code {//
      syseffectui->hide();
      syseffectui->deactivate();
      syseffectuigroup->hide();
      syseffectuigroup->deactivate();

      inseffectui->activate();
      inseffectui->show();
      inseffectuigroup->activate();
      inseffectuigroup->show();} {}
  }
  Function {setinspartlist()} {} {
    code {//
    inseffpart->clear();
    inseffpart->add("Master Out");
    inseffpart->add("Off");
    int size = synth->getRuntime().NumAvailableParts;
    for (int i = 0; i < size; ++i)
    {
        string num = string("00") + asString(i + 1);
        inseffpart->add((string("Part ") + asString(i + 1)).c_str());
    }
    int current = synth->Pinsparts[ninseff];
    if (current >= size)
    {
        current = -1; // off is safe
        synth->Pinsparts[ninseff] = current;
    }
    inseffpart->value(current + 2);} {}
  }
  Function {getPresetsUi()} {return_type {PresetsUI *}
  } {
    code {return presetsui;} {}
  }
  Function {resetPartsClip()} {} {
    code {//
        for (int i = 0; i < NUM_MIDI_CHANNELS; i++)
        {
            if(panellistitem[i] && panellistitem[i]->partVUMeter)
            {
                panellistitem[i]->partVUMeter->resetPart(true);
            }
        }} {}
  }
  Function {setState(string filename)} {} {
    code {//
    send_data(92, 0, 0xc0, 0xf0, 0xff, 0xff, 0xff, miscMsgPush(filename));} {}
  }
  Function {setPartWindowTitle(string prefix)} {return_type string
  } {
    code {//
    string extension = " - Part " + asString(partui->npart + 1) + " " + partui->part->Pname;
    if (partui->part->Pkitmode)
        extension += ", Kit ";
    return synth->makeUniqueName(prefix + extension);} {}
  }
  Function {setPartActive(int _npart, bool active)} {} {
    code {//
    if (_npart == npart)
    {
        partui->partGroupEnable->value(active);
        if (active)
        {
            partui->partgroupui->activate();
            partui->toSysEfx->activate();
        }
        else
        {
            partui->partgroupui->deactivate();
            partui->toSysEfx->deactivate();
        }
    }} {}
  }
  Function {setPartVolWidget(int _npart, float _value)} {} {
    code {//
            if (_npart == npart)
                partui->partvol->value(_value);} {}
  }
  Function {setPartPanWidget(int _npart, float _value)} {} {
    code {//
            if (_npart == npart)
                partui->partpan->value(_value);} {}
  }
  Function {setPanelPartVolWidget(int _npart, float _value)} {} {
    code {//
        panellistitem[_npart]->partvolume->value(_value);} {}
  }
  Function {setPanelPartPanWidget(int _npart, float _value)} {} {
    code {//
        panellistitem[_npart]->partpanning->value(_value);} {}
  }
  Function {setPartMidiWidget(int _npart, unsigned char _value)} {} {
    code {//
            if (_npart == npart)
                partui->midich->value(_value);
            partui->midich->textcolor(FL_BLACK);} {}
  }
  Function {setPanelPartMidiWidget(int _npart, unsigned char _value)} {} {
    code {//
        panellistitem[_npart]->partrcv->value(_value);
        panellistitem[_npart]->partrcv->textcolor(FL_BLACK);
        panellistitem[_npart]->partrcv->redraw();} {}
  }
  Function {setPanelPartLabel(int _npart, int _engine)} {} {
    code {//
    panellistitem[_npart % NUM_MIDI_CHANNELS]->setPartLabel(_engine);} {}
  }
  Function {showInstrumentEditWindow(int _npart)} {} {
    code {//
        if (_npart == npart)
            partui->instrumenteditwindow->show();} {}
  }
  Function {updateBankRootDirs()} {} {
    code {bankui->readbankcfg();} {}
  }
  Function {updatepaths(int type)} {} {
    code {//
    if (type == 0)
    {
        bankui->readbankcfg();
        bankui-> rescan_for_banks(false);
    }} {}
  }
  Function {ShowAlert(int num)} {} {
    code {fl_alert("%s", miscMsgPop(num).c_str());} {}
  }
  Function {getSynth()} {return_type {SynthEngine *}
  } {
    code {return synth;} {}
  }
  Function {loadWindowData()} {} {
    code {//

    bool ok = false;
    bool tmpWindows;
    int masterX;
    int masterY;
    int masterO;

    windows = fopen(filename.c_str(), "r");
    if (windows == NULL)
        NewWindows = true;
    else
        NewWindows = false;
    ok = !NewWindows;
    tmpWindows = NewWindows;
    // we carry on anyway to set defaults
    ok = getData(ok,
                "master",
                 masterX,
                 masterY,
                 masterO);
    ok = getData(ok,
                "panel",
                 panelX,
                 panelY,
                 panelO);
    ok = getData(ok,
                "instruments",
                 instrumentsX,
                 instrumentsY,
                 instrumentsO);
    ok = getData(ok,
                "banks",
                 banksX,
                 banksY,
                 banksO);
    ok = getData(ok,
                "roots",
                 rootsX,
                 rootsY,
                 rootsO);
    ok = getData(ok,
                "presets",
                 presetsX,
                 presetsY,
                 presetsO);
    ok = getData(ok,
                "scales",
                 scalesX,
                 scalesY,
                 scalesO);
    if (NewWindows)
    {
         NewWindows = false;
         virkbdX = 400;
         virkbdY = 1;
         virkbdO = 1;
    }
    ok = getData(ok,
                "virtkeybd",
                 virkbdX,
                 virkbdY,
                 virkbdO);
    NewWindows = tmpWindows;
    ok = getData(ok,
                "settings",
                 settingsX,
                 settingsY,
                 settingsO);
    ok = getData(ok,
                "yoshiLog",
                 yoshiLogX,
                 yoshiLogY,
                 yoshiLogO);
    ok = getData(ok,
                "vectors",
                 vectorX,
                 vectorY,
                 vectorO);
    ok = getData(ok,
                "MIDIlearn",
                 mlearnX,
                 mlearnY,
                 mlearnO);
    ok = getData(ok,
                "controllers",
                 controllersX,
                 controllersY,
                 controllersO);
    ok = getData(ok,
                "midicontrols",
                 midictlX,
                 midictlY,
                 midictlO);
    ok = getData(ok,
                "instrumentedit",
                 inseditX,
                 inseditY,
                 inseditO);
    ok = getData(ok,
                "kitlist",
                 kitlistX,
                 kitlistY,
                 kitlistO);
    ok = getData(ok,
                "partFX",
                 partfxX,
                 partfxY,
                 partfxO);

    ok = getData(ok,
                "SUBnote",
                 subNoteX,
                 subNoteY,
                 subNoteO);
    ok = getData(ok,
                "PADnote",
                 padNoteX,
                 padNoteY,
                 padNoteO);
    ok = getData(ok,
                "ADDnote",
                 addNoteX,
                 addNoteY,
                 addNoteO);

   if (windows != NULL)
        fclose(windows);

    masterwindow->position(masterX, masterY);
    panelwindow->position(panelX, panelY);
    bankui->instrumentuiwindow->position(instrumentsX, instrumentsY);
    bankui->bankuiwindow->position(banksX, banksY);
    bankui->rootuiwindow->position(rootsX, rootsY);
    configui->presets->position(presetsX, presetsY);
    microtonalui->microtonaluiwindow->position(scalesX, scalesY);
    virkeyboard->virkeyboardwindow->position(virkbdX, virkbdY);
    configui->configwindow->position(settingsX, settingsY);
    yoshiLog->logConsole->position(yoshiLogX, yoshiLogY);
    vectorui->vectorwindow->position(vectorX, vectorY);
    midilearnui->midilearnwindow->position(mlearnX, mlearnY);
    partui->ctlwindow->position(controllersX, controllersY);
    partui->ctlmidi->position(midictlX, midictlY);
    partui->instrumenteditwindow->position(inseditX, inseditY);
    partui->instrumentkitlist->position(kitlistX, kitlistY);
    partui->partfx->position(partfxX, partfxY);} {}
  }
  Function {saveWindowData()} {} {
    code {//
    windows = fopen(filename.c_str(), "w");

    putData("master",
             masterwindow->x(),
             masterwindow->y(),
             masterwindow->visible());
    putData("panel",
             panelwindow->x(),
             panelwindow->y(),
             panelwindow->visible());
    putData("instruments",
             bankui->instrumentuiwindow->x(),
             bankui->instrumentuiwindow->y(),
             bankui->instrumentuiwindow->visible());
    putData("banks",
             bankui->bankuiwindow->x(),
             bankui->bankuiwindow->y(),
             bankui->bankuiwindow->visible());
    putData("roots",
             bankui->rootuiwindow->x(),
             bankui->rootuiwindow->y(),
             bankui->rootuiwindow->visible());
    putData("presets",
             configui->presets->x(),
             configui->presets->y(),
             configui->presets->visible());
    putData("scales",
             microtonalui->microtonaluiwindow->x(),
             microtonalui->microtonaluiwindow->y(),
             microtonalui->microtonaluiwindow->visible());
    putData("virtkeybd",
             virkeyboard->virkeyboardwindow->x(),
             virkeyboard->virkeyboardwindow->y(),
             virkeyboard->virkeyboardwindow->visible());
    putData("settings",
             configui->configwindow->x(),
             configui->configwindow->y(),
             configui->configwindow->visible());
    putData("yoshiLog",
             yoshiLog->logConsole->x(),
             yoshiLog->logConsole->y(),
             yoshiLog->logConsole->visible());
    putData("vectors",
             vectorui->vectorwindow->x(),
             vectorui->vectorwindow->y(),
             vectorui->vectorwindow->visible());
    putData("MIDIlearn",
             midilearnui->midilearnwindow->x(),
             midilearnui->midilearnwindow->y(),
             midilearnui->midilearnwindow->visible());

    if (partui->ctlwindow->x())
    	putData("controllers",
                 partui->ctlwindow->x(),
                 partui->ctlwindow->y(),
                 partui->ctlwindow->visible());
    else // no window so store previous values
        putData("controllers",
                 controllersX,
                 controllersY,
                 controllersO);

    if (partui->ctlwindow->x())
    	putData("midcontrols",
                 partui->ctlmidi->x(),
                 partui->ctlmidi->y(),
                 partui->ctlmidi->visible());
    else // no window so store previous values
        putData("controllers",
                 midictlX,
                 midictlY,
                 midictlO);

    if (partui->instrumenteditwindow->x())
        putData("instrumentedit",
                 partui->instrumenteditwindow->x(),
                 partui->instrumenteditwindow->y(),
                 partui->instrumenteditwindow->visible());
    else
        putData("instrumentedit",
                 inseditX,
                 inseditY,
                 inseditO);

    if (partui->instrumentkitlist->x())
        putData("kitlist",
                 partui->instrumentkitlist->x(),
                 partui->instrumentkitlist->y(),
                 partui->instrumentkitlist->visible());
    else
        putData("kitlist",
                 kitlistX,
                 kitlistY,
                 kitlistO);

    if(partui->partfx->x())
        putData("partFX",
                 partui->partfx->x(),
                 partui->partfx->y(),
                 partui->partfx->visible());
    else
        putData("partFX",
                 partfxX,
                 partfxY,
                 partfxO);

    putData("SUBnote",
             subNoteX,
             subNoteY,
             subNoteO);
    putData("PADnote",
             padNoteX,
             padNoteY,
             padNoteO);
    putData("ADDnote",
             addNoteX,
             addNoteY,
             addNoteO);

   fclose(windows);} {}
  }
  Function {getData(bool ok, string name, int& X, int& Y, int& O)} {return_type bool
  } {
    code {//
    if (NewWindows)
    {
    	X = 1;
    	Y = 1;
    	O = 0;
    }
    if (!ok)
        return false;

    ok = (fgets(word, 20, windows) != NULL);
    if (ok)
    	ok = strstr(word, name.c_str());
    if (true)
    {
        ok = false;
        if (fgets(word, 20, windows) != NULL)
    	    X = atoi(word);
        if (fgets(word, 20, windows) != NULL)
    	    Y = atoi(word);
    	if (fgets(word, 20, windows) != NULL)
    	{
    	    O = atoi(word);
    	    ok = true;
    	}
    }
    return ok;} {}
  }
  Function {putData(string name, int X, int Y, int O)} {} {
    code {//
    string tosend = name + "\\n"
                  + asString(X)+ "\\n"
                  + asString(Y) + "\\n"
                  + asString(O) + "\\n";
    fputs(tosend.c_str(), windows);} {}
  }
  decl {ConfigUI *configui;} {public local
  }
  decl {ParametersUI *paramsui;} {public local
  }
  decl {VectorUI *vectorui;} {public local
  }
  decl {MidiLearnUI *midilearnui;} {public local
  }
  decl {BankUI *bankui;} {public local
  }
  decl {MicrotonalUI *microtonalui;} {public local
  }
  decl {VirKeyboard *virkeyboard;} {private local
  }
  decl {int ninseff;} {public local
  }
  decl {int npart;} {public local
  }
  decl {int nsyseff;} {private local
  }
  decl {int partmax;} {
    comment {This is only public for vector control} public local
  }
  decl {SysEffSend *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX];} {private local
  }
  decl {Panellistitem *panellistitem[NUM_MIDI_PARTS];} {public local
  }
  decl {ConsoleUI *yoshiLog;} {public local
  }
  decl {string laststatefile;} {private local
  }
  decl {PresetsUI *presetsui;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {string panelwindowlabel} {private local
  }
  decl {int instance;} {private local
  }
  decl {int panelgroup;} {public local
  }
  decl {int CS_CC;} {private local
  }
  decl {char word [20];} {private local
  }
  decl {FILE *windows;} {private local
  }
  decl {string filename;} {private local
  }
  decl {int panelX;} {private local
  }
  decl {int panelY;} {private local
  }
  decl {int panelO;} {private local
  }
  decl {int instrumentsX;} {private local
  }
  decl {int instrumentsY;} {private local
  }
  decl {int instrumentsO;} {private local
  }
  decl {int banksX;} {private local
  }
  decl {int banksY;} {private local
  }
  decl {int banksO;} {private local
  }
  decl {int rootsX;} {private local
  }
  decl {int rootsY;} {private local
  }
  decl {int rootsO;} {private local
  }
  decl {int presetsX;} {private local
  }
  decl {int presetsY;} {private local
  }
  decl {int presetsO;} {private local
  }
  decl {int scalesX;} {private local
  }
  decl {int scalesY;} {private local
  }
  decl {int scalesO;} {private local
  }
  decl {int virkbdX;} {private local
  }
  decl {int virkbdY;} {private local
  }
  decl {int virkbdO;} {private local
  }
  decl {int settingsX;} {private local
  }
  decl {int settingsY;} {private local
  }
  decl {int settingsO;} {private local
  }
  decl {int yoshiLogX;} {private local
  }
  decl {int yoshiLogY;} {private local
  }
  decl {int yoshiLogO;} {private local
  }
  decl {int vectorX;} {public local
  }
  decl {int vectorY;} {public local
  }
  decl {int vectorO;} {public local
  }
  decl {int mlearnX;} {public local
  }
  decl {int mlearnY;} {public local
  }
  decl {int mlearnO;} {public local
  }
  decl {int controllersX;} {public local
  }
  decl {int controllersY;} {public local
  }
  decl {int controllersO;} {public local
  }
  decl {int midictlX;} {public local
  }
  decl {int midictlY;} {public local
  }
  decl {int midictlO;} {public local
  }
  decl {int inseditX;} {private local
  }
  decl {int inseditY;} {private local
  }
  decl {int inseditO;} {private local
  }
  decl {int kitlistX;} {private local
  }
  decl {int kitlistY;} {private local
  }
  decl {int kitlistO;} {private local
  }
  decl {int partfxX;} {private local
  }
  decl {int partfxY;} {private local
  }
  decl {int partfxO;} {private local
  }
  decl {int subNoteX;} {public local
  }
  decl {int subNoteY;} {public local
  }
  decl {int subNoteO;} {public local
  }
  decl {int padNoteX;} {public local
  }
  decl {int padNoteY;} {public local
  }
  decl {int padNoteO;} {public local
  }
  decl {int addNoteX;} {public local
  }
  decl {int addNoteY;} {public local
  }
  decl {int addNoteO;} {public local
  }
  decl {bool NewWindows;} {private local
  }
}
