# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cc}
comment {MasterUI.h} {not_in_source in_header
} 

comment {MasterUI.cc} {in_source not_in_header
} 

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014, Will Godfrey    

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original, modified October 2014
} {in_source in_header
} 

decl {\#include <string>} {public local
} 

decl {using namespace std;} {public local
} 

decl {\#include "ADnoteUI.h"} {public local
} 

decl {\#include "SUBnoteUI.h"} {public local
} 

decl {\#include "EffUI.h"} {public local
} 

decl {\#include "VirKeyboardUI.h"} {public local
} 

decl {\#include "ConfigUI.h"} {public local
} 

decl {\#include "BankUI.h"} {public local
} 

decl {\#include "PartUI.h"} {public local
} 

decl {\#include "MicrotonalUI.h"} {public local
} 

decl {\#include "PresetsUI.h"} {public local
} 

decl {\#include "ParametersUI.h"} {public local
} 

decl {\#include "ConsoleUI.h"} {public local
} 

decl {\#include "MasterMiscUI.h"} {public local
} 

decl {\#include "Misc/SynthEngine.h"} {public local
} 

decl {\#include "Misc/MiscFuncs.h"} {public local
} 

decl {extern bool mainCreateNewInstance(unsigned int forceId);} {private global
} 

decl {class MasterUI;} {public local
} 

class MasterUI {selected : {private MiscFuncs}
} {
  Function {MasterUI(SynthEngine *_synth)} {} {
    code {//
      synth = _synth;
      presetsui = NULL;
      ninseff = 0;
      nsyseff = 0;
      npart = 0;
      panelgroup = 0;
      for (int i = 0; i < NUM_SYS_EFX; ++i)
        for (int j = 0; j < NUM_SYS_EFX; ++j)
          syseffsend[i][j] = NULL;
      microtonalui = NULL;
      bankui = NULL;
      virkeyboard = NULL;
      configui = NULL;
      presetsui = NULL;
      paramsui = NULL;
      yoshiLog = NULL;
      laststatefile = synth->getRuntime().StateFile;} {}
  }
  Function {~MasterUI()} {} {
    code {//
      masterwindow->hide();
      aboutwindow->hide();
      delete aboutwindow;
      syseffsendwindow->hide();
      delete syseffsendwindow;
      panelwindow->hide();
      delete panelwindow;
      if (microtonalui)
      {
        microtonalui->Hide();
        delete microtonalui;
      }
      if (bankui)
      {
        bankui->Hide();
        delete bankui;
      }
      if (virkeyboard)
      {
        virkeyboard->Hide();
        delete virkeyboard;
      }
      if (configui)
      {
        configui->Hide();
        delete configui;
      }
      if (presetsui)
      {
        presetsui->Hide();
        delete presetsui;
      }
      if (paramsui)
      {
        paramsui->Hide();
        delete paramsui;
      }
      if (yoshiLog)
      {
        yoshiLog->Hide();
        delete yoshiLog;
      }
      delete masterwindow;} {}
  }
  Function {Init(const char *_label)} {} {
    code {//
      microtonalui = new MicrotonalUI(&synth->microtonal);
      bankui = new BankUI(&npart, synth);
      virkeyboard = new VirKeyboard(synth);
      configui = new ConfigUI(synth);
      presetsui = new PresetsUI(synth);
      paramsui = new ParametersUI(synth);
      yoshiLog = new ConsoleUI();
      yoshiLog->setLabel(_label);
      make_window();
      if(synth->getIsLV2Plugin())
      {
      	masterwindow->label(_label);
      }
      else
      {
	setMasterLabel(synth->getRuntime().paramsLoad);
      }
      masterwindow->show();
      if (synth->getRuntime().showConsole)
        yoshiLog->Show();
      else
          yoshiLog->Hide();} {}
  }
  Function {make_window()} {} {
    Fl_Window masterwindow {
      label {Yoshimi meets ZynAddSubFX}
      callback {if (configui->configChanged)
          {
              int r = fl_choice("Parameters Changed", "Save Changes", "Cancel", "Don't Save");
              switch (r)
              {
                  case 0:
                      synth->getRuntime().saveConfig();
                      synth->guiClosed(true);
                      break;
                  case 2:
                      synth->guiClosed(true);
                      break;
                  default:
                      break;
              }
          }
          else
          {
                  synth->getRuntime().saveConfig();
                  synth->guiClosed(true);
          }}
      xywh {4 20 385 465} type Double labelfont 13 labelsize 12 hide xclass Yoshimi
    } {
      Fl_Menu_Bar mastermenu {
        xywh {-4 0 400 25} labelsize 13
      } {
        Submenu {} {
          label {&Yoshimi}
          xywh {0 0 100 20} labelsize 12
        } {
          MenuItem {} {
            label {&About...}
            callback {aboutwindow->show();}
            tooltip {Copyright and version info} xywh {15 15 100 20} labelsize 12
          }
          MenuItem {} {
            label {&New instance}
            callback {mainCreateNewInstance(0)}
            xywh {0 0 100 20} labelsize 12
          }
          MenuItem {} {
            label {New instance with id...}
            callback {if(synth->getIsLV2Plugin())
{
	return;
}
const char *sId = fl_input("Enter desired instance id...", "0");
unsigned int forceId = 0;
if(sId == NULL)
{
	return;
}
forceId = string2uint(sId);

mainCreateNewInstance(forceId);}
            xywh {0 0 31 21} labelsize 12
          }
          MenuItem {} {
            label {&Settings...}
            callback {configui->Show();}
            tooltip {View, change, save settings} xywh {25 25 100 20} labelsize 12
          }
          MenuItem {} {
            label {E&xit}
            callback {masterwindow->do_callback();}
            xywh {10 10 100 20} labelsize 12
          }
        }
        Submenu {} {
          label {&View}
          xywh {0 0 70 20} labelsize 12
        } {
          MenuItem {} {
            label {&Instruments...}
            callback {bankui->Show();}
            xywh {10 10 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Banks...}
            callback {bankui->rootuiwindow->show();}
            xywh {20 20 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Root Paths...}
            callback {bankui->pathwindow->show();}
            xywh {30 30 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Scale Settings...}
            callback {microtonalui->Show();}
            xywh {10 10 100 20} labelsize 12
          }
        }
        Submenu {} {
          label {&Instrument}
          xywh {10 10 100 20} labelsize 12
        } {
          MenuItem {} {
            label {&Load...}
            callback {//
                const char *filename;
                filename = fl_file_chooser("Load:", "({*.xiz})", NULL, 0);
                if (filename == NULL)
                    return;
                int result = synth->part[npart]->loadXMLinstrument(string(filename));
                npartcounter->do_callback();
                updatepanel();
                if (result == 0)
                    fl_alert("Failed to load instrument file");
                else if (result == 3)
                    fl_alert("Instrument is called 'Simple Sound', Yoshimi's basic sound name. You should change this if you wish to re-save.");}
            tooltip {Load an instrument (.xiz) file} xywh {30 30 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Save...}
            callback {//
    if (synth->part[npart]->Pname == "Simple Sound")
    {
        fl_alert("Nothing to save!");
        return;
    }
    char *filename = fl_file_chooser("Save:", "({*.xiz})", NULL, 0);
    if (filename == NULL)
        return;
    filename = fl_filename_setext(filename, ".xiz");
    if (isRegFile(string(filename)))
        if (!fl_choice("The file exists. \\nOverwrite it?", "No", "Yes", NULL))
            return;
    synth->actionLock(lockmute);
    bool result = synth->part[npart]->saveXML(string(filename));
    synth->actionLock(unlock);
    if (!result)
        fl_alert("Failed to save instrument file");
    updatepanel();}
            tooltip {Save current instrument to an .xiz file} xywh {20 20 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Clear}
            callback {//
    if (!fl_choice("Clear instrument's parameters ?", "Yes", "No", NULL))
    {
        synth->actionLock(lockmute);
        synth->part[npart]->defaultsinstrument();
        synth->actionLock(unlock);
        npartcounter->do_callback();
    }
    updatepanel();}
            xywh {35 35 100 20} labelsize 12
          }
        }
        Submenu Parameters {
          label {&Patch Sets}
          xywh {0 0 70 21} labelsize 12
          code0 {o = o; // suppress warning
              if (synth->getRuntime().ParamsHistory.empty())
                  RecentParams->deactivate();
              else
                  RecentParams->activate();}
        } {
          MenuItem {} {
            label {&Load...}
            callback {//
                do_load_master(true, NULL);
                paramsui->loadRecent();}
            tooltip {Load a patch set (.xmz) file} xywh {0 0 34 21} labelsize 12
          }
          MenuItem Save {
            label {&Save...}
            callback {//
    bool valid = false;
    for(int npart = 0; npart < NUM_MIDI_PARTS; npart ++)
        if (synth->part[npart]->Pname != "Simple Sound")
        {
            valid = true;
            npart = NUM_MIDI_PARTS;
        }
    if (valid)
        do_save_master();
    else
        fl_alert("Nothing to save!");}
            tooltip {Save current parameters to an .xmz file} xywh {0 0 34 21} labelsize 12
          }
          MenuItem RecentParams {
            label {&Recent...}
            callback {paramsui->Show();}
            xywh {0 0 34 21} labelsize 12
          }
        }
        Submenu Scales {
          label {&Scales}
          tooltip {Clear all parameters to default settings} xywh {0 0 70 21} labelsize 12
        } {
          MenuItem {} {
            label {&Load...}
            callback {//
    char *filename;
    filename = fl_file_chooser("Open:", "({*.xsz})", NULL, 0);
    if (filename == NULL)
        return;
    string fname = string(filename);
    synth->actionLock(lockmute);
    synth->microtonal.defaults(); // clear all parameters
    bool result = synth->microtonal.loadXML(fname);
    synth->actionLock(unlock);
    if (NULL != microtonalui)
        delete microtonalui;
    microtonalui = new MicrotonalUI(&synth->microtonal);
    if (!result)
        fl_alert("Failed to load scale settings file");
    else
        microtonalui->apply();}
            xywh {35 35 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Save...}
            callback {//
                char *filename;
                filename = fl_file_chooser("Save:", "({*.xsz})", NULL, 0);
                if (filename == NULL)
                    return;
                filename = fl_filename_setext(filename, ".xsz");
                if (isRegFile(string(filename)))
                    if (!fl_choice("The file exists. \\nOverwrite it?", "No", "Yes", NULL))
                        return;
                synth->actionLock(lockmute);
                bool result = synth->microtonal.saveXML(string(filename));
                synth->actionLock(unlock);
                if (!result)
                    fl_alert("Failed to save scale settings");
                updatepanel();}
            xywh {25 25 100 20} labelsize 12
          }
          MenuItem {} {
            label {&Clear}
            callback {\#
    if (!fl_choice("Set scales to the defaults?", "Yes", "No", NULL))
    {
        synth->actionLock(lockmute);
        synth->microtonal.defaults();
        synth->actionLock(unlock);
        if (NULL != microtonalui)
            delete microtonalui;
        microtonalui = new MicrotonalUI(&synth->microtonal);

    }}
            xywh {0 0 34 20} labelsize 12
          }
        }
        Submenu {} {
          label {S&tate}
          xywh {0 0 70 21} labelsize 12
        } {
          MenuItem loadState {
            label {Load...}
            callback {// for Alessandro
    char *fle = fl_file_chooser("Load:", "({*.state})",
                                laststatefile.c_str(), 0);
    if (fle)
    {
        laststatefile = string(fle);
        synth->getRuntime().loadState(laststatefile);
    }
    refresh_master_ui();
    microtonalui->apply();}
            tooltip {Load session state} xywh {0 0 34 21} labelsize 12
          }
          MenuItem saveState {
            label {Save...}
            callback {// for Alessandro

                char *fle = fl_file_chooser("Save:", "({*.state})",
                                            laststatefile.c_str(), 0);
                if (fle)
                {
                    laststatefile = string(fle);
                    synth->getRuntime().saveState(laststatefile);
                }}
            tooltip {Save session state} xywh {10 10 34 21} labelsize 12
          }
        }
      }
      Fl_Group MasterControls {
        label {Master  }
        xywh {3 24 380 64} box PLASTIC_DOWN_FRAME labeltype NO_LABEL labelsize 11 labelcolor 96 align 22
      } {
        Fl_Spinner masterkeyshift {
          label {Key Shift}
          callback {synth->setPkeyshift(o->value() + 64);}
          tooltip {Shift pitch +/- N semitones} xywh {216 46 40 18} labelsize 10 align 2 minimum -12 maximum 12 textsize 10
          code0 {o->range(-12.0, 12.0);o->step(1.0);}
          code1 {o->value(synth->Pkeyshift - 64);}
        }
        Fl_Dial globalfinedetune {
          label Detune
          callback {//
              synth->microtonal.Pglobalfinedetune = o->value();
              globalfinedetune->changed();}
          tooltip {global fine detune} xywh {275 34 30 30} box ROUND_UP_BOX color 29 labelsize 10 maximum 127 step 1 value 64
          code0 {o->value(synth->microtonal.Pglobalfinedetune);}
          class WidgetPDial
        }
        Fl_Button {} {
          label Reset
          callback {//
              globalfinedetune->value(64.0);
              synth->microtonal.Pglobalfinedetune = 64.0f;
              globalfinedetune->changed();}
          tooltip {Master fine detune reset} xywh {304 76 9 9} box PLASTIC_ROUND_UP_BOX color 1 selection_color 1 labelsize 10 align 4
        }
        Fl_Button {} {
          label {Stop!}
          callback {//
              virkeyboard->relaseallkeys();
              vumeter->init(-1, synth);
              for(int i = 0; i < NUM_MIDI_CHANNELS; i++)
              {
              	if(panelwindow)              
              	{
	              	if(panellistitem[i]->partVUMeter)
	              	{
	              		panellistitem[i]->partVUMeter->resetPart();
	              	}
              	}              	
              }
              synth->allStop();}
          tooltip {Cease all sound immediately!} xywh {15 32 80 20} box PLASTIC_UP_BOX color 88 selection_color 32 labelfont 1 labelsize 11 align 16
        }
        Fl_Dial mastervolumedial {
          label Volume
          callback {synth->setPvolume(o->value());}
          tooltip {Master Volume} xywh {329 31 40 40} box ROUND_UP_BOX color 29 labelsize 10 align 130 maximum 127 step 1
          code0 {o->value(synth->Pvolume);}
          class WidgetPDial
        }
        Fl_Button {} {
          label {Virtual Kbd}
          callback {virkeyboard->Show();}
          tooltip {Virtual Keyboard} xywh {116 60 80 20} box PLASTIC_UP_BOX color 228 labelsize 11 labelcolor 32
        }
        Fl_Button {} {
          label {Mixer Panel}
          callback {//
                updatepanel();
                panelwindow->show();}
          tooltip {Mixer Panel Window} xywh {116 32 80 20} box PLASTIC_UP_BOX color 228 labelsize 11 labelcolor 32
        }
        Fl_Button {} {
          label Reset
          callback {//
    do_new_master();}
          tooltip {Clear all dynamic settings} xywh {15 60 80 20} box PLASTIC_UP_BOX color 228 selection_color 32 labelfont 1 labelsize 11 align 16
        }
      }
      Fl_Tabs sysinsgroup {
        label {System/Insert}
        callback {//
            if (o->value() == SystemEffectsGrp)
                showSysEfxUI();
           else if (o->value() == InsertionEffectsGrp)
               showInsEfxUI();}
        xywh {3 88 380 68} box PLASTIC_UP_BOX color 44 selection_color 221 labeltype NO_LABEL labelsize 12 align 5
      } {
        Fl_Group SystemEffectsGrp {
          label {System Effects}
          xywh {3 116 380 40} color 221 selection_color 31 labelfont 1 labelsize 12 align 4
        } {
          Fl_Spinner syseffnocounter {
            label Effect
            callback {//
              nsyseff = o->value() - 1;
              sysefftype->value(synth->sysefx[nsyseff]->geteffect());
              syseffectui->refresh(synth->sysefx[nsyseff]);}
            xywh {40 127 36 20} labeltype NO_LABEL labelsize 11 align 0 maximum 4 textfont 1 textsize 11
            code0 {o->range(1, NUM_SYS_EFX);}
            code1 {o->value(nsyseff + 1);}
          }
          Fl_Choice sysefftype {
            label Type
            callback {//
              synth->actionLock(lockmute);
              synth->sysefx[nsyseff]->changeeffect(o->value());
              synth->actionLock(unlock);
              syseffectui->refresh(synth->sysefx[nsyseff]);
              showSysEfxUI();}
            xywh {118 127 96 20} down_box BORDER_BOX labeltype NO_LABEL labelsize 10 align 16
            code0 {o->value(synth->sysefx[nsyseff]->geteffect());}
          } {
            MenuItem {} {
              label {No Effect}
              xywh {10 10 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Reverb
              xywh {20 20 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Echo
              xywh {30 30 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Chorus
              xywh {40 40 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Phaser
              xywh {50 50 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label AlienWah
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Distortion
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label EQ
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label DynFilter
              xywh {90 90 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Button {} {
            label {Send to}
            callback {syseffsendwindow->show();}
            xywh {260 127 62 20} box THIN_UP_BOX labelfont 1 labelsize 11 labelcolor 97
          }
          Fl_Button {} {
            label C
            callback {presetsui->copy(synth->sysefx[nsyseff]);}
            xywh {350 122 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
          Fl_Button {} {
            label P
            callback {//
    synth->actionLock(lockmute);
    presetsui->paste(synth->sysefx[nsyseff], syseffectui);
    synth->actionLock(unlock);}
            xywh {350 137 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
        }
        Fl_Group InsertionEffectsGrp {
          label {Insertion Effects}
          xywh {3 116 380 40} color 221 selection_color 31 labelfont 1 labelsize 12 labelcolor 33 align 4 hide
        } {
          Fl_Spinner inseffnocounter {
            label Effect
            callback {//
              ninseff = o->value() - 1;
              insefftype->value(synth->insefx[ninseff]->geteffect());
              inseffpart->value(synth->Pinsparts[ninseff] + 2);
              inseffectui->refresh(synth->insefx[ninseff]);
              if (synth->Pinsparts[ninseff] != -1)
              {
                insefftype->activate();
                inseffectui->activate();
                inseffectuigroup->activate();
              }
              else
              {
                insefftype->deactivate();
                inseffectui->deactivate();
                inseffectuigroup->deactivate();
              }}
            xywh {40 127 36 20} labeltype NO_LABEL labelsize 11 align 20 maximum 8 textfont 1 textsize 11
            code0 {o->range(1, NUM_INS_EFX);}
            code1 {o->value(ninseff + 1);}
          }
          Fl_Choice insefftype {
            label Type
            callback {//
              synth->actionLock(lockmute);
              synth->insefx[ninseff]->changeeffect(o->value());
              synth->actionLock(unlock);
              inseffectui->refresh(synth->insefx[ninseff]);
              showInsEfxUI();}
            xywh {118 127 96 20} down_box BORDER_BOX labeltype NO_LABEL labelsize 11 align 0 textsize 12
            code0 {o->value(synth->insefx[ninseff]->geteffect());}
            code1 {if (synth->Pinsparts[ninseff]== -1) o->deactivate();}
          } {
            MenuItem {} {
              label {No Effect}
              xywh {25 25 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Reverb
              xywh {35 35 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Echo
              xywh {45 45 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Chorus
              xywh {55 55 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Phaser
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label AlienWah
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Distortion
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label EQ
              xywh {90 90 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label DynFilter
              xywh {100 100 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Choice inseffpart {
            label {To }
            callback {//
              synth->Pinsparts[ninseff] = o->value() - 2;
              if (o->value() == 1)
              {
                inseffectuigroup->deactivate();
                insefftype->deactivate();
                inseffectui->deactivate();
              }
              else
              {
                inseffectuigroup->activate();
                insefftype->activate();
                inseffectui->activate();
              }
              synth->insefx[ninseff]->cleanup();}
            xywh {242 127 96 20} down_box BORDER_BOX labelfont 1 labelsize 10 textfont 1 textsize 11
            code0 {setinspartlist();}
            code3 {o->value(synth->Pinsparts[ninseff]+2);}
          } {}
          Fl_Button {} {
            label C
            callback {presetsui->copy(synth->insefx[ninseff]);}
            xywh {350 122 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
          Fl_Button {} {
            label P
            callback {//
              synth->actionLock(lockmute);
              presetsui->paste(synth->insefx[ninseff], inseffectui);
              synth->actionLock(unlock);}
            xywh {350 137 25 14} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
          }
        }
      }
      Fl_Button Reports {
        label Reports
        callback {yoshiLog->Show();}
        xywh {289 90 60 24} box PLASTIC_UP_BOX labelsize 11
        code0 {if (synth->getRuntime().consoleMenuItem == false)Reports->deactivate();}
      }
      Fl_Group syseffectuigroup {
        xywh {3 158 384 95} box FLAT_BOX color 48 labeltype NO_LABEL
        code0 {o->show();}
      } {
        Fl_Group syseffectui {open
          xywh {3 158 384 95} labeltype NO_LABEL
          code0 {o->init(synth->sysefx[nsyseff]);o->activate();o->show();}
          class EffUI
        } {}
      }
      Fl_Group inseffectuigroup {
        xywh {3 158 384 95} box FLAT_BOX color 48
        code0 {o->hide();}
      } {
        Fl_Group inseffectui {open
          xywh {3 158 380 95} color 52
          code0 {o->init(synth->insefx[ninseff]);o->hide();}
          code1 {if (synth->Pinsparts[ninseff]== -1) o->deactivate();}
          class EffUI
        } {}
      }
      Fl_Group partuigroup {
        xywh {3 255 380 170} box ENGRAVED_FRAME
      } {
        Fl_Group partui {open
          xywh {3 255 376 166} color 47
          code0 {o->init(synth->part[0],0,bankui);}
          code1 {o->show();}
          class PartUI
        } {}
      }
      Fl_Group {} {
        xywh {3 427 380 36} box DOWN_BOX labelsize 12
      } {
        Fl_Box vumeter {
          label {VU-Meter}
          xywh {5 429 377 34} color 48 selection_color 75
          code0 {o->init(-1, synth);}
          class VUMeter
        }
      }
      Fl_Spinner npartcounter {
        label Part
        callback {//
          int nval = o->value() - 1;
          partuigroup->remove(partui);
          delete partui;
          partui = new PartUI(0, 0, 765, 525);
          partuigroup->add(partui);
          partui->init(synth->part[nval], nval, bankui);
          partui->redraw();
          o->redraw();
          npart = nval;
          updatepanel();
          maxparts->value(synth->getRuntime().NumAvailableParts);}
        xywh {38 265 40 20} labelsize 11 minimum 0 maximum 127 textsize 11
        code0 {o->type(FL_INT_INPUT); o->range(1.0, synth->getRuntime().NumAvailableParts);}
        code1 {bankui->init(o);}
      }
      Fl_Spinner maxparts {
        label of
        callback {int tmp = o->value();
if (tmp == 48)
{
    if (synth->getRuntime().NumAvailableParts == 32)
        tmp = 64;
    else
        tmp = 32;
    o->value(tmp);
}
synth->getRuntime().NumAvailableParts = tmp;
updatepart();
setinspartlist();}
        xywh {95 265 40 20} labelsize 11 minimum 16 maximum 64 step 16 value 16 textsize 11
        code0 {o->value(synth->getRuntime().NumAvailableParts);}
      }
    }
    Fl_Window aboutwindow {
      label {About Yoshimi}
      xywh {4 20 365 290} type Double color 54 labelfont 13 labelsize 13 when 0 hide
    } {
      Fl_Box {} {
        label {Yoshimi
meets
ZynAddSubFX}
        xywh {10 17 345 70} labeltype EMBOSSED_LABEL labelfont 13 labelsize 18 labelcolor 216 align 16 when 0
      }
      Fl_Box {} {
        label {copyright notice}
        xywh {25 93 315 91} color 51 selection_color 30 labelfont 13 labelsize 11 align 208 when 0
        code0 {o->copy_label(string("Copyright (c) 2002-2009 Nasca O. PAUL and others"
                               "\\nCopyright 2009-2011, Alan Calvert"
                               "\\nCopyright 2012-2013, Jeremy Jongepier and others"
                               "\\nCopyright 2014-2015, Will Godfrey and others"
                               "\\nLV2 plugin Copyright 2014, Andrew Deryabin"
                               "\\nSplash Image Copyright 2015, James Fraser").c_str());}
      }
      Fl_Box {} {
        label {copy terms}
        xywh {10 198 340 53} labelsize 11 align 144 when 0
        code0 {//
            o->copy_label(string("This is free software, and comes with ABSOLUTELY NO WARRANTY; "
                                 "you may redistribute it and/or modify it under the terms of "
                                 "GPL version 2, or (at your option) any later version.\\n\\n").c_str());}
      }
      Fl_Box {} {
        label { version}
        xywh {55 254 240 20} labelfont 1 labelsize 12 labelcolor 145
        code0 {//
            o->copy_label((string("Yoshimi version ")
                           + string( YOSHIMI_VERSION )).c_str());}
      }
      Fl_Button {} {
        label Close
        callback {aboutwindow->hide();}
        xywh {305 253 43 22} box THIN_UP_BOX labelsize 11
      }
    }
    Fl_Window syseffsendwindow {
      label {System Effects Send}
      xywh {4 20 120 250} type Double labelfont 13 labelsize 13 hide
    } {
      Fl_Scroll {} {open
        xywh {10 45 107 170} box FLAT_BOX
        code0 {//
            for (int neff1 = 0; neff1 < NUM_SYS_EFX; neff1++)
                for (int neff2 = neff1 + 1; neff2 < NUM_SYS_EFX; neff2++)}
        code1 {{
                syseffsend[neff1][neff2] =
                    new SysEffSend(o->x()+(neff2 - 1) * 35, o->y() + 20 + neff1 * 52, 30, 30);
                syseffsend[neff1][neff2]->label("aaa");
                syseffsend[neff1][neff2]->init(neff1, neff2, synth);
            }}
      } {}
      Fl_Button {} {
        label Close
        callback {syseffsendwindow->hide();}
        xywh {20 220 80 25} box THIN_UP_BOX
      }
      Fl_Box {} {
        label {Send system effect's output to other system effects}
        xywh {5 5 110 35} labelsize 10 align 192
      }
    }
    Fl_Window panelwindow {
      label {Yoshimi Panel 2 x 8}
      xywh {4 20 550 675} type Double labelfont 13 labelsize 13 hide
      code0 {if (synth->getRuntime().single_row_panel)
       Panelbox1->hide();}
    } {
      Fl_Pack Panelpack1 {open
        xywh {8 10 533 286} type HORIZONTAL
        code0 {//
          for (int i = 0; i < 8; i++)
          {
              panellistitem[i] = new Panellistitem(0, 0, 70, 260, "");
              panellistitem[i]->init(i, bankui, synth);
          }}
        code1 {o->spacing(-3);}
      } {}
      Fl_Box Panelbox1 {
        xywh {-4 316 563 7} box THIN_DOWN_BOX deactivate
      }
      Fl_Pack Panelpack2 {open
        xywh {8 325 533 286} type HORIZONTAL
        code0 {//
            for (int i = 8; i < 16; i++)
            {
                 panellistitem[i] = new Panellistitem(0, 0, 70, 260, "");
                 panellistitem[i]->init(i, bankui, synth);
            }}
        code1 {o->spacing(-3);}
      } {}
      Fl_Box PanelBox2 {
        xywh {-4 632 563 7} box THIN_DOWN_BOX deactivate
      }
      Fl_Button Panelclose {
        label Close
        callback {panelwindow->hide();}
        xywh {482 645 55 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Button Panelrefresh {
        label Refresh
        callback {updatepanel();}
        xywh {414 645 55 25} box THIN_UP_BOX labelsize 13 hide deactivate
      }
      Fl_Button {} {
        label {Change to 1 x 16}
        callback {//
            Panelbox1->hide();
            synth->getRuntime().single_row_panel = 1;
            updatepanel();}
        xywh {283 645 116 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Button {} {
        label {Change to 2 x 8}
        callback {//
            synth->getRuntime().single_row_panel = 0;
            updatepanel();
            Panelbox1->show();}
        xywh {821 314 116 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Choice Panelgroups {
        label Parts
        callback {panelgroup = o->value() * NUM_MIDI_CHANNELS;
Panelsmallgroups->value(o->value());
updatepanel();}
        xywh {48 645 86 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label {1 to 16}
          xywh {0 0 34 20}
        }
        MenuItem {} {
          label {17 to 32}
          xywh {0 0 34 20}
        }
        MenuItem {} {
          label {33 to 48}
          xywh {0 0 34 20}
        }
        MenuItem {} {
          label {49 to 64}
          xywh {0 0 34 20}
        }
      }
      Fl_Choice Panelsmallgroups {
        label Parts
        callback {panelgroup = o->value() * NUM_MIDI_CHANNELS;
Panelgroups->value(o->value());
updatepanel();}
        xywh {48 645 86 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label {1 to 16}
          xywh {10 10 34 20}
        }
        MenuItem {} {
          label {17 to 32}
          xywh {10 10 34 20}
        }
      }
    }
  }
  Function {updatesendwindow()} {} {
    code {//
        for (int neff1 = 0; neff1 < NUM_SYS_EFX; ++neff1)
            for (int neff2 = neff1 + 1; neff2 < NUM_SYS_EFX; ++neff2)
                syseffsend[neff1][neff2]->value(synth->Psysefxsend[neff1][neff2]);} {}
  }
  Function {updatepanel()} {} {
    code {//
        for (int npart = 0; npart < NUM_MIDI_CHANNELS; ++npart)
            panellistitem[npart]->refresh();
               if (synth->getRuntime().single_row_panel)
        {
        	panelwindow->size(1085,345);
	        Panelpack2->position(544,10);
	        Panelclose->position(1018,314);
	        Panelrefresh->position(950,314);
	        Panelgroups->position(48,314);
	        Panelsmallgroups->position(48,314);
	        panelwindowlabel = synth->makeUniqueName("Yoshimi Panel 1 x 16 ");
        }
        else
        {
	        panelwindow->size(550,675);
	        Panelpack2->position(8,325);
	        Panelclose->position(482,645);
	        Panelrefresh->position(414,645);
	        Panelgroups->position(48,645);
	        Panelsmallgroups->position(48,645);
	       	panelwindowlabel = synth->makeUniqueName("Yoshimi Panel 2 x 8 ");

        }
        int partmax = synth->getRuntime().NumAvailableParts;
        //synth->getRuntime().Log("Parts " + asString(partmax));
        if (partmax == 64)
            Panelgroups->show();
        else
            Panelgroups->hide();
        if (partmax == 32)
            Panelsmallgroups->show();
        else
            Panelsmallgroups->hide();
        panelwindow->label(panelwindowlabel.c_str());
        panelwindow->changed();} {}
  }
  Function {updatepart()} {} {
    code {//
    checkmaxparts();
    npartcounter->do_callback();} {}
  }
  Function {updatepartprogram(int npart)} {} {
    code {//
    updatepart();
    if (partui->part->Prcvchn <  NUM_MIDI_CHANNELS)
    {
        partui->midich->value(partui->part->Prcvchn + 1);
        partui->midich->textcolor(FL_BLACK);
    }
    else
    {
         partui->midich->textcolor(FL_WHITE);
         partui->midich->redraw();
    }} {}
  }
  Function {updateeffects(int data)} {} {
    code {//
    int effect = (data >> 16) & 0xff;
    int type =  (data >> 12) & 3;
    int parameter = (data >> 8) & 0x7f;
    int value = data & 0x7f;

    if (effect > 0x3f)
    {
        effect &= 0x3f;
        synth->getRuntime().Log("Insert  Effect Number "
        			+ asString(effect)
        			+ "  Type " + asString(type)
        			+ "  Parameter "
        			+ asString(parameter)
        			+ "  Value " + asString(value));
        sysinsgroup->value(InsertionEffectsGrp);
        showInsEfxUI();
        inseffnocounter->value(effect + 1);
        int partnum = data >> 24;
        inseffpart->value(partnum);
        if (partnum != 1)
        {
            insefftype->activate();
            inseffectui->activate();
        }
        else
        {
            insefftype->deactivate();
            inseffectui->deactivate();
        }
        insefftype->value(synth->insefx[effect]->geteffect());
        inseffectui->refresh(synth->insefx[effect]);
    }
    else
    {
        synth->getRuntime().Log("Insert  Effect Number "
        			+ asString(effect)
        			+ "  Type " + asString(type)
        			+ "  Parameter "
        			+ asString(parameter)
        			+ "  Value " + asString(value));
        sysinsgroup->value(SystemEffectsGrp);
        syseffnocounter->value(effect + 1);
        if (type == 1)
        {
        // effect output volume to be done!
        }
        sysefftype->value(synth->sysefx[effect]->geteffect());
        syseffectui->refresh(synth->sysefx[effect]);      
        showSysEfxUI();
    }} {}
  }
  Function {setMasterLabel(string name)} {} {
    code {//
        masterwindowlabel = synth->makeUniqueName("Yoshimi");
        if (name.size())
            masterwindowlabel += (" : " + name);
        masterwindow->label(masterwindowlabel.c_str());
        masterwindow->changed();} {}
  }
  Function {do_new_master()} {open
  } {
    code {//
    if (!fl_choice("Set *ALL* dynamic values to their defaults?", "Yes", "No", NULL))
    {
        delete microtonalui;
        synth->resetAll();

        npartcounter->value(1);
        refresh_master_ui();
        updatepanel();
        }} {}
  }
  Function {do_load_master_unconditional(bool updatehistory, const char* file)} {return_type int} {
    code {//
        const char *fname;
        if (NULL != file)
            fname = file;
        else
        {
            fname = fl_file_chooser("Open:", "({*.xmz})", NULL, 0);
            if (fname == NULL)
                return -1;
        }
        int result = synth->loadParameters(fname);
        setinspartlist();
        npartcounter->value(1);
        refresh_master_ui();
        if (result >= 0)
        {
            if (updatehistory)
                setMasterLabel(synth->getRuntime().addParamHistory(string(fname)));
            RecentParams->activate();
            if(result > 1)
            	fl_alert("At least one instrument is called 'Simple Sound', the name of Yoshimi's basic sound. You should change this if you wish to re-save.");
        }
        else
        {
            string msg = "Could not load file " + string(fname);
            if (result == -10)
            {
                msg += ",\\nit does not appear to be a valid patch set file.";
                fl_alert("%s",msg.c_str());
            }
            else
                fl_alert("%s",msg.c_str());
        }} {}
  }

 Function {do_load_master(bool updatehistory, const char* file)} {} {
    code {//
        const char *fname;
        if (NULL != file)
            fname = file;
        else
        {
            fname = fl_file_chooser("Open:", "({*.xmz})", NULL, 0);
            if (fname == NULL)
                return;
        }
        int result = do_load_master_unconditional( updatehistory, fname );

        if ( result < 0 )
        {
             string msg = "Could not load file " + string(fname);
             if (result == -10)
             {
                 fl_alert(msg.c_str());
             }
         }} {}
   }

   Function {do_save_master_unconditional(const char* file = NULL)} {return_type int} {
    code {//
        bool result = false;
        result = synth->saveXML(file);
        if (result)
        {
            // NSM_TODO: i don't know how to fix this :)
            // synth->getRuntime().setMasterLabel(Runtime.addParamHistory(file));
            RecentParams->activate();
        }
        updatepanel();
        return result;
        } {}
  }

  Function {do_save_master(const char* file = NULL)} {} {
    code {//
        const char *fname;
        bool result = false;
        if (file == NULL)
        {
            char *tmp = fl_file_chooser("Save:", "({*.xmz})", NULL, 0);
            if (tmp == NULL)
                return;
            tmp = fl_filename_setext(tmp, ".xmz");
            fname = tmp;
            result = isRegFile(tmp);
            if (result)
            {
                result = false;
                if (!fl_choice("The file exists. Overwrite it?", "No", "Yes", NULL))
                    return;
            }
        }
        else
            fname = file;
        result = do_save_master_unconditional(fname);
        if (!result)
            fl_alert("Could not save the file.");
        else
        {
            setMasterLabel(synth->getRuntime().addParamHistory(fname));
            RecentParams->activate();
        }
        updatepanel();} {}
  }
  Function {refresh_master_ui()} {} {
    code {//
        ninseff = 0;
        nsyseff = 0;
        npart = 0;
        npartcounter->do_callback();
        syseffnocounter->do_callback();
        inseffnocounter->do_callback();
        masterkeyshift->value(synth->Pkeyshift - 64);
        mastervolumedial->value(synth->Pvolume);
        globalfinedetune->value(synth->microtonal.Pglobalfinedetune);
        microtonalui = new MicrotonalUI(&synth->microtonal);
        checkmaxparts();
        updatesendwindow();
        updatepanel();
        bankui->Hide();
        if (synth->getRuntime().consoleMenuItem == false)
            Reports->deactivate();
        else
             Reports->activate();} {}
  }
  Function {checkmaxparts()} {private
  } {
    code {//
    int max = synth->getRuntime().NumAvailableParts;
    if(panelgroup >= max)
    {
        panelgroup = 0;
        npart = 0;
        Panelgroups->value(0);
        Panelsmallgroups->value(0);
    }
    npartcounter->range(1.0,max);
    if ( npartcounter->value() >= (max + 1))
        npartcounter->value(1);} {}
  }
  Function {strategicRetreat(void)} {} {
    code {fl_alert("Bad things happened,\\nYoshimi strategically retreats.");} {}
  }
  Function {Log(string msg)} {} {
    code {yoshiLog->log(msg);} {}
  }
  Function {showSysEfxUI(void)} {private
  } {
    code {//
      inseffectui->hide();
      inseffectui->deactivate();
      inseffectuigroup->hide();
      inseffectuigroup->deactivate();

      syseffectui->activate();
      syseffectui->show();
      syseffectuigroup->activate();
      syseffectuigroup->show();} {}
  }
  Function {showInsEfxUI(void)} {private
  } {
    code {//
      syseffectui->hide();
      syseffectui->deactivate();
      syseffectuigroup->hide();
      syseffectuigroup->deactivate();

      inseffectui->activate();
      inseffectui->show();
      inseffectuigroup->activate();
      inseffectuigroup->show();} {}
  }
  Function {setinspartlist()} {} {
    code {//
    inseffpart->clear();
    inseffpart->add("Master Out");
    inseffpart->add("Off");
    int size = synth->getRuntime().NumAvailableParts;
    for (int i = 0; i < size; ++i)
    {
        string num = string("00") + asString(i + 1);
        inseffpart->add((string("Part ") + asString(i + 1)).c_str());
    }
    int current = synth->Pinsparts[ninseff];
    if (current >= size)
    {
        current = -1; // off is safe
        synth->Pinsparts[ninseff] = current;
    }
    inseffpart->value(current + 2);} {}
  }
  Function {getPresetsUi()} {return_type {PresetsUI *}
  } {
    code {return presetsui;} {}
  }
  Function {resetPartsClip()} {} {
    code {//
        for (int i = 0; i < NUM_MIDI_CHANNELS; i++)
        {
            if(panellistitem[i] && panellistitem[i]->partVUMeter)
            {
                panellistitem[i]->partVUMeter->resetPart(true);
            }
        }} {}
  }
  Function {set_part_window_title(string prefix)} {return_type string
  } {
    code {//
    string name = prefix + " - Part " + asString(partui->npart + 1) + " " + partui->part->Pname;
    return name;} {}
  }
  Function {setPartVolWidget(int _npart, float _value)} {} {
    code {//
        if (_npart == npart)
            partui->partvol->value(_value);} {}
  }
  Function {setPartPanWidget(int _npart, float _value)} {} {
    code {//
        if (_npart == npart)
            partui->partpan->value(_value);} {}
  }
  Function {setPanelPartVolWidget(int _npart, float _value)} {} {
    code {//
        panellistitem[_npart]->partvolume->value(_value);} {}
  }
  Function {setPanelPartPanWidget(int _npart, float _value)} {} {
    code {//
        panellistitem[_npart]->partpanning->value(_value);} {}
  }
  Function {setPartMidiWidget(int _npart, unsigned char _value)} {} {
    code {//
        if (_npart == npart)
            partui->midich->value(_value);
            partui->midich->textcolor(FL_BLACK);} {}
  }
  Function {setPanelPartMidiWidget(int _npart, unsigned char _value)} {} {
    code {//
        panellistitem[_npart]->partrcv->value(_value);
        panellistitem[_npart]->partrcv->textcolor(FL_BLACK);
        panellistitem[_npart]->partrcv->redraw();} {}
  }
  Function {setPanelPartLabel(int _npart, int _engine)} {} {
    code {//
    panellistitem[_npart % NUM_MIDI_CHANNELS]->setPartLabel(_engine);} {}
  }
  Function {showInstrumentEditWindow(int _npart)} {} {
    code {//
        if (_npart == npart)
            partui->instrumenteditwindow->show();} {}
  }
  Function {updateBankRootDirs()} {} {
    code {bankui->readbankcfg();} {}
  }
  Function {getSynth()} {return_type {SynthEngine *}
  } {
    code {return synth;} {}
  }
  decl {ConfigUI *configui;} {public local
  }
  decl {ParametersUI *paramsui;} {private local
  }
  decl {BankUI *bankui;} {public local
  }
  decl {MicrotonalUI *microtonalui;} {private local
  }
  decl {VirKeyboard *virkeyboard;} {private local
  }
  decl {int ninseff;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int nsyseff;} {private local
  }
  decl {SysEffSend *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX];} {private local
  }
  decl {string masterwindowlabel;} {private local
  }
  decl {Panellistitem *panellistitem[NUM_MIDI_PARTS];} {public local
  }
  decl {ConsoleUI *yoshiLog;} {public local
  }
  decl {string laststatefile;} {private local
  }
  decl {PresetsUI *presetsui;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {string panelwindowlabel} {private local
  }
  decl {int panelgroup;} {public local
  }
} 
