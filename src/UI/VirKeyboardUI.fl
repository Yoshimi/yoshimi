# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {VirKeyboard.h} {not_in_source in_header
}

comment {VirKeyboard.cc} {in_source not_in_header
}

comment {
Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert
Copyright 2014 -2018, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of origional ZynAddSubFX code

Modified March 2018
} {in_source in_header
}

decl {\#include <stdlib.h>} {public local
}

decl {\#include <FL/fl_draw.H>} {public local
}

decl {\#include <FL/Fl_Box.H>} {public local
}

decl {\#include "Misc/Config.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public local
}

decl {\#include "MusicIO/MidiControl.h"} {public local
}

decl {\#include "UI/WidgetPDial.h"} {public local
}

decl {\#include "UI/WidgetMWSlider.h"} {public local
}

decl {const int keyspos[12]={0,-1,1,-2,2,3,-4,4,-5,5,-6,6};} {private local
}

decl {const int keysoct1qwerty[]={'q','2','w','3','e','r','5','t','6','y','7','u','i','9','o','0','p','[','=',']','\\\\',FL_Enter,0};} {private local
}

decl {const int keysoct2qwerty[]={'z','s','x','d','c','v','g','b','h','n','j','m',',','l','.',';','/',0};} {private local
}

decl {const int keysoct1dw[]={'\\'','2',',','3','.','p','5','y','6','f','7','g','c','9','r','0','l','/',']','=','\\\\',FL_Enter,0};} {private local
}

decl {const int keysoct2dw[]={';','o','q','e','j','k','i','x','d','b','h','m','w','n','v','s','z',0};} {private local
}

decl {const int keysoct1qwertz[]={'q','2','w','3','e','r','5','t','6','z','7','u','i','9','o','0','p',252,'\\'','+','\\\\',FL_Enter,0};} {private local
}

decl {const int keysoct2qwertz[]={'y','s','x','d','c','v','g','b','h','n','j','m',',','l','.',246,'-',0};} {private local
}

decl {const int keysoct1azerty[]={'a',233,'z','\\"','e','r','(','t','-','y',232,'u','i',231,'o',224,'p',65106,'=','$',0};} {private local
}

decl {const int keysoct2azerty[]={'w','s','x','d','c','v','g','b','h','n','j',',',';','l',':','m','!',0};} {private local
}

class VirKeys {: {public Fl_Box}
} {
  decl {static const int N_OCT = 6;} {private local
  }
  decl {static const int SIZE_WHITE = 14;} {private local
  }
  decl {static const int SIZE_BLACK = 8;} {private local
  }
  Function {VirKeys(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {} {}
  }
  Function {init(SynthEngine *_synth)} {} {
    code {//
    synth = _synth;
    for (int i = 0; i < N_OCT * 12 + 1; ++i)
            pressed[i] = 0;
    midich = 0;
    midivel = 100;
    midioct = 2;
    keyoct1 = 3;
    keyoct2 = 2;
    rndvelocity = 0;} {}
  }
  Function {draw()} {} {
    code {//
    int ox = x();
    int oy = y();
    int lx = w();
    int ly = h() - 1;
    int i;
    if (damage() != 1)
    {
        fl_color(250, 240, 230);
        fl_rectf(ox, oy, lx, ly);

        fl_color(FL_BLACK);
        fl_line(ox, oy, ox + lx, oy);
        fl_line(ox, oy + ly, ox + lx, oy + ly);
        for (i = 0; i < N_OCT * 7 + 1; ++i)
        {
            fl_line(ox + i * SIZE_WHITE, oy, ox + i * SIZE_WHITE, oy + ly);
            int ik = i % 7;
            if (ik == 1 || ik == 2 || ik == 4 || ik == 5 || ik == 6)
                fl_rectf(ox + i * SIZE_WHITE - SIZE_BLACK / 2, oy,
                            SIZE_BLACK + 1, ly * 3 / 5);
        }
    }

    for (i = 0; i < N_OCT * 12; ++i)
    {
        int noct = i / 12;
        int kv = keyspos[i % 12];
        if (kv >= 0)
        {   // white keys
            if (pressed[i] == 0)
                fl_color(250, 240, 230);
            else
                fl_color(FL_BLUE);
            fl_rectf(ox + (kv + 7 * noct) * SIZE_WHITE + 3, oy + ly * 3 / 5 + 2,
                        SIZE_WHITE - 4, ly * 2 / 5 - 3);
        }
        else
        {   // black keys
            kv = keyspos[(i + 1) % 12];
            if (pressed[i] == 0)
                fl_color(FL_BLACK);
            else
                fl_color(FL_BLUE);
            fl_rectf(ox + (kv + 7 * noct) * SIZE_WHITE - SIZE_BLACK / 2 + 2, oy + 2,
                        SIZE_BLACK - 3, ly * 3 / 5 - 5);
        }
    }} {}
  }
  Function {send_data(int control, float value, int type, int kititem = 0xff, int engine = 0xff)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, 217, kititem, engine);} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {//
    int i;
    int ly = h();
    int x_ = Fl::event_x() - x();
    int y_ = Fl::event_y() - y();
    if (x_ < 0 && x_ > w() && y_ < 0 && y_>h())
        return 0;
    if (event == FL_PUSH || event == FL_DRAG || event == FL_RELEASE)
    {
        int kpos = -1;

        if (y_ > ly * 3 / 5)
        {   // white keys
            int pos = x_ / SIZE_WHITE;
            if (pos < 0)
                return 1;
            for (i = 0; i < 12; ++i)
            {
                if (pos % 7 == keyspos[i])
                {
                    kpos = pos / 7 * 12 + i;
                    break;
                }
            }
        }
        else
        {   // black keys
            int pos = (x_ + SIZE_WHITE / 2) / SIZE_WHITE;
            if (pos < 0)
                return 1;
            for (i = 1; i < 12; ++i)
            {
                if (pos % 7 == -keyspos[i])
                {
                    kpos = pos / 7 * 12 + i;
                    break;
                }
            }
        }

        if (Fl::event_shift() == 0 && (event == FL_PUSH || event==FL_DRAG))
            presskey(kpos, 1, 1);

        if (event == FL_PUSH && Fl::event_shift() != 0)
        {
            if (pressed[kpos] == 0)
                presskey(kpos, 0, 1);
            else
                relasekey(kpos, 1);
        }
        if (event == FL_RELEASE && Fl::event_shift() == 0)
            relaseallkeys(1);
        take_focus();
    }

    const int *keysoct1 = keysoct1qwerty;
    const int *keysoct2 = keysoct2qwerty;

    if (synth->getRuntime().VirKeybLayout == 1)
    {
        keysoct1 = keysoct1dw;
        keysoct2 = keysoct2dw;
    }
    else if (synth->getRuntime().VirKeybLayout == 2)
    {
        keysoct1 = keysoct1qwertz;
        keysoct2 = keysoct2qwertz;
    }
    else if (synth->getRuntime().VirKeybLayout == 3)
    {
        keysoct1 = keysoct1azerty;
        keysoct2 = keysoct2azerty;
    }

    if (event == FL_KEYDOWN || event == FL_KEYUP)
    {
        int key = Fl::event_key();
        int kpos = -1;
        for (i = 0; keysoct1[i] != 0; ++i)
            if (key == keysoct1[i])
                kpos = i + 12 * keyoct1;
        for (i = 0; keysoct2[i] != 0; ++i)
            if (key == keysoct2[i])
                kpos = i + 12 * keyoct2;

        if (kpos == -1)
            return 0;
        if (event == FL_KEYUP && Fl::event_key(key) == 0 && Fl::get_key(key) != 0)
            return 0;
        if (event == FL_KEYDOWN)
            presskey(kpos, 0, 2);
        else
            relasekey(kpos, 2);
    }
    return 1;} {}
  }
  Function {presskey(int nk,int exclusive,int type)} {} {
    code {// Exclusive means that multiple keys can be pressed at once
    // when the user uses the shift key
    if (nk >= N_OCT * 12)
        return;
    if (nk < 0 && exclusive == 0)
    {
        relaseallkeys(type);
        return;
    }
    if (nk < 0)
        return;
    if (pressed[nk] != 0)
        return; // the key is already pressed

    if (exclusive != 0)
        relaseallkeys(type);
    pressed[nk] = type;

    damage(1);
    float vel = midivel;
    if (rndvelocity != 0)
    {
        vel = midivel * (127.0 - rndvelocity) / 127.0 + synth->numRandom() * rndvelocity;
    }
    send_data(0, vel, 0xc0, midich, nk + midioct * 12);} {}
  }
  Function {relasekey(int nk,int type)} {} {
    code {//
    if (nk < 0 || nk >= N_OCT * 12)
        return;
    if (pressed[nk] == 0)
        return; // the key is not pressed
    if (type != 0 && pressed[nk] != type)
        return;
    pressed[nk] = 0;
    damage(1);
    send_data(1, 0, 0xc0, midich, nk + midioct * 12);} {}
  }
  Function {relaseallkeys(int type)} {} {
    code {//
    for (int i = 0; i < N_OCT * 12; ++i)
        relasekey(i, type);} {}
  }
  decl {int pressed[N_OCT * 12 + 1];} {private local
  }
  decl {unsigned char midich;} {public local
  }
  decl {unsigned char midivel;} {public local
  }
  decl {char midioct, keyoct1, keyoct2;} {public local
  }
  decl {unsigned char rndvelocity;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class VirKeyboard {selected
} {
  Function {make_window()} {} {
    Fl_Window virkeyboardwindow {
      label {Yoshimi Virtual Keyboard}
      callback {//
      relaseallkeys();
      virkeyboardwindow->hide();}
      xywh {95 119 650 130} type Double hide
    } {
      Fl_Box virkeys {
        label Keyboard
        xywh {32 10 590 80} box FLAT_BOX color 17
        code0 {o->init(synth);}
        class VirKeys
      }
      Fl_Counter {} {
        label {Key   }
        callback {//
        relaseallkeys();
        virkeys->keyoct1 = (int)o->value();
        virkeys->take_focus();}
        tooltip {. 2 3    5 6 7 ...
q w e r  t y u ...} xywh {365 95 45 15} type Simple labelsize 10 align 4 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 10
        code0 {o->value(virkeys->keyoct1);}
      }
      Fl_Text_Display {} {
        label Oct
        xywh {407 108 30 0} labelsize 10 textsize 10
      }
      Fl_Counter {} {
        label {Maps  }
        callback {//
        relaseallkeys();
        virkeys->keyoct2=(int) o->value();
        virkeys->take_focus();}
        tooltip {. s d   g h j ...
z x c v b n m ...} xywh {365 110 45 15} type Simple labelsize 10 align 4 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 10
        code0 {o->value(virkeys->keyoct2);}
      }
      Fl_Text_Display {} {
        label Oct
        xywh {407 122 30 0} labelsize 10 textsize 10
      }
      Fl_Value_Slider {} {
        label Velocity
        callback {//
        if (Fl::event_button() == 3)
            o->value(100);
        virkeys->midivel=(int) o->value();
        virkeys->take_focus();}
        tooltip Velocity xywh {96 106 110 16} type {Horz Knob} box FLAT_BOX labelsize 10 align 1 minimum 1 maximum 127 step 1
        code0 {o->value(virkeys->midivel);}
        class mwheel_val_slider_rev
      }
      Fl_Counter {} {
        label Octave
        callback {//
        relaseallkeys();
        virkeys->midioct=(int) o->value();
        virkeys->take_focus();}
        tooltip {Midi Octave} xywh {257 106 56 18} type Simple labelsize 10 align 1 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 10
        code0 {o->value(virkeys->midioct);}
      }
      Fl_Button {} {
        label Close
        callback {//
        relaseallkeys();
        virkeyboardwindow->hide();}
        xywh {452 101 55 20} box THIN_UP_BOX labelsize 12
      }
      Fl_Value_Output ctlval {
        label Cval
        callback {o->value(oldcontrol);}
        xywh {628 12 18 15} box ENGRAVED_BOX labelsize 8 align 1 textsize 7
        code0 {o->value(oldcontrol);}
      }
      Fl_Slider {} {
        callback {//
        oldcontrol = 127 - o->value();
        if (Fl::event_button() == 3)
        {
            oldcontrol = 64;
            o->value(64);
            o->damage();
        }
        ctlval->do_callback();
        int ctl = midictl;
        virkeys->take_focus();
        send_data(2, oldcontrol, 0xc0, virkeys->midich, ctl);}
        tooltip {Controller value} xywh {628 25 18 96} type {Vert Fill} box ENGRAVED_BOX color 229 labelsize 8 align 5 maximum 127 step 1 value 64
        code0 {o->value(127 - oldcontrol);}
        class mwheel_slider
      }
      Fl_Choice {} {
        label Controller
        callback {//
        switch((int) o->value() + 1)
        {
            case 1:
                midictl = C_modwheel;
                break;
            case 2:
                midictl = C_volume;
                break;
            case 3:
                midictl = C_panning;
                break;
            case 4:
                midictl = C_expression;
                break;
            case 5:
                midictl = C_sustain;
                break;
            case 6:
                midictl = C_portamento;
                break;
            case 7:
                midictl = C_filterq;
                break;
            case 8:
                midictl = C_filtercutoff;
                break;
            case 9:
                midictl = C_bandwidth;
                break;
            case 10:
                midictl = C_fmamp;
                break;
            case 11:
                midictl = C_resonance_center;
                break;
            case 12:
                midictl = C_resonance_bandwidth;
                break;
            default:
                midictl = C_NULL;
                break;
        }
        virkeys->take_focus();}
        xywh {524 105 100 15} down_box BORDER_BOX labelsize 10 align 1 when 6 textfont 1 textsize 10
        code0 {midictl=C_filtercutoff;o->value(7);}
      } {
        MenuItem {} {
          label {01: Mod.Wheel}
          xywh {0 0 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {07: Volume}
          xywh {10 10 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {10: Panning}
          xywh {20 20 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {11: Expression}
          xywh {30 30 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {64: Sustain}
          xywh {40 40 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {65: Portamento}
          xywh {50 50 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {71: Filter Q}
          xywh {60 60 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {74: Filter Freq.}
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {75: Bandwidth}
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {76: FM Gain}
          xywh {90 90 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {77: Res. c. freq}
          xywh {100 100 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {78: Res. bw.}
          xywh {110 110 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial {} {
        label Vrnd
        callback {//
        virkeys->rndvelocity=(int) o->value();}
        tooltip {Velocity Randomness} xywh {221 106 20 21} box ROUND_UP_BOX labelsize 10 align 129 maximum 127 step 1
        code0 {o->value(virkeys->rndvelocity);}
        code1 {o->init(0);}
        code2 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Spinner midichannel {
        label {MIDI Channel}
        callback {//
        relaseallkeys();
        virkeys->midich = lrint(o->value()) - 1;
        virkeys->take_focus();}
        xywh {45 106 36 17} labelsize 9 align 1 maximum 16 textsize 10
        code0 {o->value(virkeys->midich + 1);}
      }
      Fl_Slider pitchwheel {
        label Pwh
        callback {//
        int old = o->value();
        if (Fl::event_button() == 3)
        {
            old = 0;
            o->value(old);
            o->damage();
        }
        virkeys->take_focus();
        send_data(2, - old, 0xc0, virkeys->midich, 128)}
        xywh {6 12 18 110} labelsize 8 align 1 minimum -8192 maximum 8191 step 1
        class mwheel_slider
      }
    }
  }
  Function {VirKeyboard(SynthEngine *_synth)} {} {
    code {//
    synth = _synth;
    midictl = 75;
    oldcontrol = 64;
    make_window();
    keyboardlabel = synth->makeUniqueName("Virtual Keyboard");
    virkeyboardwindow->label(keyboardlabel.c_str());} {}
  }
  Function {~VirKeyboard()} {} {
    code {//
    delete virkeyboardwindow;} {}
  }
  Function {send_data(int control, float value, int type, int kititem = 0xff, int engine = 0xff)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, 217, kititem, engine);} {}
  }
  Function {Show()} {} {
    code {//
    virkeyboardwindow->show();} {}
  }
  Function {Hide()} {} {
    code {//
    virkeyboardwindow->hide();} {}
  }
  Function {relaseallkeys()} {} {
    code {virkeys->relaseallkeys(0);} {}
  }
  decl {int midictl;} {private local
  }
  decl {int oldcontrol;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {std::string keyboardlabel;} {private local
  }
}
