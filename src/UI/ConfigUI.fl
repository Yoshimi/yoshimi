# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cpp}
comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014, Will Godfrey   

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code, modified September 2014
} {in_source in_header
} 

decl {\#include <cmath>} {public local
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public local
} 

decl {\#include "Misc/Config.h"} {public local
} 

decl {\#include "Misc/MiscFuncs.h"} {public local
} 

decl {\#include "Misc/SynthEngine.h"} {private local
} 

decl {\#include "Misc/Bank.h"} {private local
} 

decl {\#include "MasterUI.h"} {private local
} 

class ConfigUI {open : {private MiscFuncs}
} {
  Function {make_window()} {open
  } {
    Fl_Window configwindow {
      label {Yoshimi Settings}
      callback {o->hide();} open
      xywh {273 160 465 330} type Double hide
    } {
      Fl_Tabs {} {open
        xywh {5 5 455 297}
      } {
        Fl_Group {} {
          label {Main settings} open
          xywh {5 25 455 277} labelsize 12 hide
        } {
          Fl_Choice {} {
            label {AddSynth Oscillator Size}
            callback {//
    unsigned int old = synth->getRuntime().Oscilsize;
    unsigned int changed = 128 << o->value();
    if (old != changed)
    {
        synth->getRuntime().Oscilsize = changed;
        configChanged = true;
    }}
            tooltip {ADSynth Oscillator Size (samples)} xywh {250 45 100 20} down_box BORDER_BOX labelsize 12 textsize 11
            code0 {o->value( (int)(logf(synth->getRuntime().Oscilsize / 128.0f - 1.0f) / logf(2.0f)) + 1);}
          } {
            MenuItem {} {
              label 128
              xywh {25 25 100 20} labelfont 1
            }
            MenuItem {} {
              label 256
              xywh {35 35 100 20} labelfont 1
            }
            MenuItem {} {
              label 512
              xywh {45 45 100 20} labelfont 1
            }
            MenuItem {} {
              label 1024
              xywh {45 45 100 20} labelfont 1
            }
            MenuItem {} {
              label 2048
              xywh {55 55 100 20} labelfont 1
            }
            MenuItem {} {
              label 4096
              xywh {55 55 100 20} labelfont 1
            }
            MenuItem {} {
              label 8192
              xywh {65 65 100 20} labelfont 1
            }
            MenuItem {} {
              label 16384
              xywh {75 75 100 20} labelfont 1
            }
          }
          Fl_Choice {} {
            label {Internal Buffer Size}
            callback {//
    unsigned int old = synth->getRuntime().Buffersize;
    unsigned int changed = 64 << o->value();
    if (old != changed)
    {
        synth->getRuntime().Buffersize = changed;
        configChanged = true;
    }}
            tooltip {ADSynth Oscillator Size (samples)} xywh {249 80 100 20} down_box BORDER_BOX labelsize 12 textsize 11
            code0 {o->value( (int)(logf(synth->getRuntime().Buffersize / 64.0f - 1.0f) / logf(2.0f)) + 1);}
          } {
            MenuItem {} {
              label 64
              xywh {35 35 100 20} labelfont 1
            }
            MenuItem {} {
              label 128
              xywh {45 45 100 20} labelfont 1
            }
            MenuItem {} {
              label 256
              xywh {55 55 100 20} labelfont 1
            }
            MenuItem {} {
              label 512
              xywh {55 55 100 20} labelfont 1
            }
            MenuItem {} {
              label 1024
              xywh {65 65 100 20} labelfont 1
            }
          }
          Fl_Choice {} {
            label {PADsynth Interpolation}
            callback {//
                int tmp = synth->getRuntime().Interpolation;
                synth->getRuntime().Interpolation = (int) o->value();
                if (synth->getRuntime().Interpolation != tmp)
                  configChanged = true;}
            xywh {250 115 100 20} down_box BORDER_BOX labelsize 12 textsize 12
            code0 {o->value(synth->getRuntime().Interpolation);}
          } {
            MenuItem {} {
              label {Linear(fast)}
              xywh {0 0 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label {Cubic(slow)}
              xywh {10 10 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Choice {} {
            label {Virtual Keyboard Layout}
            callback {//
                int tmp = synth->getRuntime().VirKeybLayout;
                synth->getRuntime().VirKeybLayout = (int) o->value();
                if (synth->getRuntime().VirKeybLayout != tmp)
                  configChanged = true;}
            xywh {250 150 100 20} down_box BORDER_BOX labelsize 12 textfont 1 textsize 13
            code0 {o->value(synth->getRuntime().VirKeybLayout);}
          } {
            MenuItem {} {
              label { }
              xywh {5 5 100 20} labelfont 1 labelsize 11 deactivate
            }
            MenuItem {} {
              label QWERTY
              xywh {15 15 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label Dvorak
              xywh {25 25 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label QWERTZ
              xywh {35 35 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label AZERTY
              xywh {45 45 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Counter compression {
            label {XML compression level}
            callback {//
    unsigned int tmp = synth->getRuntime().GzipCompression;
    synth->getRuntime().GzipCompression = (unsigned int) o->value();
    if(synth->getRuntime().GzipCompression != tmp)
      configChanged = true;}
            tooltip {gzip compression level (0 - uncompressed)} xywh {284 185 65 20} type Simple align 4 minimum 0 maximum 9 step 1 textsize 12
            code0 {o->value(synth->getRuntime().GzipCompression);}
          }
          Fl_Choice {} {
            label {Send reports to:}
            callback {synth->getRuntime().consoleMenuItem = o->value();
if (o->value())
    synth->getGuiMaster()->Reports->activate();
else
{
    synth->getGuiMaster()->Reports->deactivate();
    synth->getGuiMaster()->yoshiLog->Hide();
}}
            xywh {200 220 150 20} down_box BORDER_BOX labelsize 12 textsize 13
            code0 {o->value(synth->getRuntime().consoleMenuItem);}
          } {
            MenuItem {} {
              label stderr
              xywh {0 0 34 20} labelsize 12
            }
            MenuItem {} {
              label {Console Window}
              xywh {0 0 34 20} labelsize 12
            }
          }
          Fl_Input SessionStateFile {
            label {Session state save file}
            callback {//
              synth->getRuntime().StateFile = string(o->value());
              SessionStateFile->changed();}
            xywh {160 250 220 20} labelsize 12 when 1 textsize 12
            code0 {o->value(synth->getRuntime().StateFile.c_str());}
          }
          Fl_Button StateFileButton {
            label Select
            callback {//
                const char *filename = fl_file_chooser("Nominate session save state file",
                                                       NULL, synth->getRuntime().StateFile.c_str(), 0);
                if (NULL != filename)
                {
                    synth->getRuntime().StateFile = string(filename);
                    SessionStateFile->value(synth->getRuntime().StateFile.c_str());
                    SessionStateFile->changed();
                    configChanged = true;
                }}
            xywh {401 250 49 20} box THIN_UP_BOX labelsize 12
            code0 {/* code */}
          }
          Fl_Box {} {
            label {Most settings changes require a restart}
            xywh {100 282 267 17} labelfont 1 labelsize 11 labelcolor 38 align 128
          }
        }
        Fl_Group {} {
          label {Presets dirs} open
          xywh {5 25 455 272} labelsize 12 hide
        } {
          Fl_Browser presetbrowse {
            callback {activatebutton_presetdir(o->value() != 0);}
            xywh {10 35 450 200} type Hold labelsize 12 textsize 12
          }
          Fl_Button {} {
            label {Add preset directory...}
            callback {//
                const char *dirname;
                dirname = fl_dir_chooser("Add a preset directory :", NULL, 0);
                if (!dirname)
                    return;
                presetbrowse->add(dirname);
                configChanged = true;}
            xywh {15 244 80 35} box THIN_UP_BOX labelsize 12 align 128
          }
          Fl_Button removepresetbutton {
            label {Remove preset dir...}
            callback {//
                if (presetbrowse->value() != 0)
                {
                    presetbrowse->remove(presetbrowse->value());
                }
                activatebutton_presetdir(false);
                configChanged = true;}
            xywh {105 244 80 35} box THIN_UP_BOX labelsize 12 align 128
            code0 {o->deactivate();}
          }
          Fl_Button makedefaultpresetbutton {
            label {Make default}
            callback {//
                int n = presetbrowse->value();
                if (n != 0)
                {
                    presetbrowse->move(1, n);
                    presetbrowse->value(1);
                    presetbrowse->redraw();
                }
                activatebutton_presetdir(true);
                configChanged = true;}
            xywh {190 244 80 35} box THIN_UP_BOX labelsize 12 align 128
            code0 {o->deactivate();}
          }
          Fl_Box {} {
            label {Settings changes require a restart}
            xywh {110 285 267 12} labelfont 1 labelsize 11 labelcolor 38 align 128
          }
        }
        Fl_Group {} {
          label Jack open
          xywh {5 25 455 277} labelsize 12 hide
        } {
          Fl_Input {} {
            label {Jack Server}
            callback {//
                synth->getRuntime().jackServer = string(o->value());
                configChanged = true;}
            tooltip {Name of the jack server to connect to - default, ...} xywh {218 149 100 22} labelsize 12 textsize 12
            code0 {o->insert(synth->getRuntime().jackServer.c_str());}
          }
          Fl_Box {} {
            label {Settings changes require a restart}
            xywh {110 285 267 17} labelfont 1 labelsize 11 labelcolor 38 align 128
          }
        }
        Fl_Group {} {
          label Alsa open
          xywh {5 25 455 277} labelsize 12 hide
        } {
          Fl_Input {} {
            label {Alsa Midi Device}
            callback {//
                synth->getRuntime().alsaMidiDevice = string(o->value());
                configChanged = true;}
            tooltip {Alsa midi device - default, hw:0, ...} xywh {195 52 120 22} labelsize 12 textsize 12
            code0 {o->insert(synth->getRuntime().alsaMidiDevice.c_str());}
          }
          Fl_Input {} {
            label {Alsa Audio Device}
            callback {//
                synth->getRuntime().alsaAudioDevice = string(o->value());
                configChanged = true;}
            tooltip {Alsa audio device - default, hw:0, front:CARD=Live,DEV=0, ...} xywh {195 93 120 22} labelsize 12 textsize 12
            code0 {o->insert(synth->getRuntime().alsaAudioDevice.c_str());}
          }
          Fl_Check_Browser {} {
            label Samplerate
            callback {//
                int chk = o->value();
                if (o->nchecked() < 1)
                    o->set_checked(chk = 2);
                else if (o->nchecked() > 1)
                {
                    if (!chk)
                        chk = 2;
                    o->check_none();
                    o->set_checked(chk);
                }
                unsigned int sample_rate;
                switch (chk)
                {
                    case 1:
                        sample_rate = 96000;
                        break;
                    case 3:
                        sample_rate = 44100;
                        break;
                    case 2:
                    default:
                        sample_rate = 48000;
                        break;
                }
                synth->getRuntime().Samplerate = sample_rate;
                configChanged = true;}
            xywh {195 131 84 50} labelsize 12 align 4 when 1 textsize 12
            code0 {//
                o->add("96000");
                o->add("48000");
                o->add("44100");
                switch (synth->getRuntime().Samplerate)
                {
                    case 96000: o->set_checked(1); break;
                    case 44100: o->set_checked(3); break;
                    case 48000:
                    default: o->set_checked(2); break;
                }}
          }
          Fl_Box {} {
            label {Settings changes require a restart}
            xywh {110 285 267 17} labelfont 1 labelsize 11 labelcolor 38 align 128
          }
        }
        Fl_Group {} {
          label MIDI
          callback {//
    EPCvalue = synth->getRuntime().midi_upper_voice_C;
    if (EPCvalue >= 128)
    {
        EPCspinner->value(110);
        EPCspinner->deactivate();
    }
    else
    {
        EPCspinner->value(EPCvalue);
        EPCspinner->activate();
    }
    
    BankRootvalue = synth->getRuntime().midi_bank_root;
    if (BankRootvalue >= 128)
    {
        BankRoot->value(0);
        BankRoot->deactivate();
    }
    else
    {
        BankRoot->value(BankRootvalue);
        BankRoot->activate();
    }} open
          tooltip {MIDI CC preferences} xywh {5 25 455 275} labelsize 12
          code0 {EPCvalue = synth->getRuntime().midi_upper_voice_C;}
          code1 {BankRootvalue = synth->getRuntime().midi_bank_root;}
        } {
          Fl_Spinner BankRoot {
            label {Bank Root Change}
            callback {Rpend->show();}
            xywh {275 81 50 18} labelsize 12 minimum 0 maximum 127 value 0 textsize 12
            code0 {BankRootvalue = synth->getRuntime().midi_bank_root;}
            code1 {if (BankRootvalue < 128) o->value(BankRootvalue); else o->value(0);}
          }
          Fl_Button Rpend {
            label Pending
            callback {//
    int candidate = BankRoot->value();
    if (candidate == BankRootvalue)
    {
        o->hide();
        return;
    }
    string name = synth->getRuntime().testCCvalue(candidate);
    if (!name.empty())
    {
        fl_alert("In use for %s",name.c_str());
        if ( BankRootvalue < 128)
        {
            BankRoot->value(BankRootvalue);
            BankRoot->redraw();
        }
    }
    else
    {
        synth->getRuntime().midi_bank_root = candidate;
        BankRootvalue = candidate;
        o->hide();
        configChanged = true;
    }}
            tooltip {Click to set} xywh {340 81 70 20} box PLASTIC_UP_BOX color 90 labelsize 12 hide
          }
          Fl_Check_Button {} {
            label {Enable Bank Root Change}
            callback {//
    if (o->value() == 0)
    {
         synth->getRuntime().midi_bank_root = 128;
         BankRoot->value(0);
         BankRoot->deactivate();
         Rpend->hide();
    }
    else
    {
         BankRoot->activate();
         BankRoot->value(0);
         BankRootvalue = 128;
         Rpend->show();
    }
    BankRoot->redraw();
    configChanged = true;}
            xywh {275 60 18 18} down_box DOWN_BOX labelsize 12 align 4
            code0 {o->value((synth->getRuntime().midi_bank_root < 128));}
            code1 {if (o->value() == 0) BankRoot->deactivate();}
          }
          Fl_Choice bankchange {
            label {Bank Change}
            callback {//
    int tmp = synth->getRuntime().midi_bank_C;
    int candidate;
    switch (o->value())
    {
        case 0:
            candidate = 32;
            break;
        case 1:
            candidate = 0;
            break;
        default:
            candidate = 128;
    }
    if (candidate == tmp)
        return;
    string name = synth->getRuntime().testCCvalue(candidate);
    if (name.empty())
        synth->getRuntime().midi_bank_C = candidate;
    else
    {
      o->value(oldBank);
      o->redraw();
        fl_alert("In use for %s",name.c_str());
    }
    if (synth->getRuntime().midi_bank_C == tmp)
        configChanged = true;} open
            tooltip {CC0 = msb, CC32 = lsb} xywh {275 122 53 18} down_box BORDER_BOX labelsize 12 align 132 textsize 12
            code0 {if (synth->getRuntime().midi_bank_C == 32) o->value(0); else if (synth->getRuntime().midi_bank_C == 0) o->value(1); else o->value(2);}
            code1 {oldBank = o->value();}
          } {
            MenuItem banklsb {
              label LSB
              xywh {0 0 34 20} labelsize 12
            }
            MenuItem bankusb {
              label MSB
              xywh {0 0 34 20} labelsize 12
            }
            MenuItem bankoff {
              label Off
              xywh {0 0 34 20} labelsize 12
            }
          }
          Fl_Check_Button {} {
            label {Enable Program Change}
            callback {//
    int tmp = synth->getRuntime().EnableProgChange;
    synth->getRuntime().EnableProgChange = o->value();
    if (synth->getRuntime().EnableProgChange != tmp)
      configChanged = true;}
            tooltip {MIDI program change enable/disable} xywh {275 162 18 18} down_box DOWN_BOX value 1 labelsize 12 align 4
            code0 {o->value(synth->getRuntime().EnableProgChange);}
          }
          Fl_Check_Button {} {
            label {Enable Part On Program Change}
            callback {//
    int tmp = synth->getRuntime().enable_part_on_voice_load;
    synth->getRuntime().enable_part_on_voice_load = o->value();
    if (synth->getRuntime().enable_part_on_voice_load != tmp)
      configChanged = true;}
            tooltip {Part enabled if MIDI program changed} xywh {275 182 18 18} down_box DOWN_BOX labelsize 12 align 4
            code0 {o->value(synth->getRuntime().enable_part_on_voice_load);}
          }
          Fl_Spinner EPCspinner {
            label {Extended Program Change}
            callback {Epend->show();}
            xywh {275 241 50 18} labelsize 12 minimum 0 maximum 127 value 110 textsize 12
            code0 {EPCvalue = synth->getRuntime().midi_upper_voice_C;}
            code1 {if (EPCvalue < 128) o->value(EPCvalue); else o->value(110);}
          }
          Fl_Button Epend {
            label Pending
            callback {//
    int candidate = EPCspinner->value();
    if (candidate == EPCvalue)
    {
        o->hide();
        return;
    }


    string name = synth->getRuntime().testCCvalue(candidate);
    if (!name.empty())
    {
        fl_alert("In use for %s",name.c_str());
        if (EPCvalue < 128)
        {
        EPCspinner->value(EPCvalue);
        EPCspinner->redraw();
        }
    }
    else
    {
        synth->getRuntime().midi_upper_voice_C = candidate;
        EPCvalue = candidate;
        o->hide();
        configChanged = true;
    }}
            tooltip {Click to set} xywh {340 241 70 20} box PLASTIC_UP_BOX color 90 labelsize 12 hide
          }
          Fl_Check_Button {} {
            label {Enable Extended Program Change}
            callback {// for some weird reason this *must* be the last item in the group
    if (o->value() == 0)
    {
         synth->getRuntime().midi_upper_voice_C = 128;
         EPCspinner->value(110);
         EPCspinner->deactivate();
         Epend->hide();
    }
    else
    {
         EPCspinner->activate();
         Epend->show();;
         EPCspinner->value(110);
         EPCvalue = 128;
    }
    EPCspinner->redraw();
    configChanged = true;}
            xywh {275 220 18 18} down_box DOWN_BOX labelsize 12 align 4
            code0 {o->value((synth->getRuntime().midi_upper_voice_C < 128));}
            code1 {if (o->value() == 0) EPCspinner->deactivate();}
          }
          Fl_Spinner Control {
            label {Set immediate -- Control}
            callback {CCpend->show();}
            xywh {181 272 50 18} labelsize 12 minimum 0 maximum 127 value 0 textsize 12
          }
          Fl_Spinner Value {
            label Value
            callback {CCpend->show();}
            xywh {275 272 50 18} labelsize 12 minimum 0 maximum 127 value 0 textsize 12
          }
          Fl_Button CCpend {
            label Pending
            callback {//
    o->hide();
    int cc = (int) Control->value();
    int val = (int) Value->value();
    int part = synth->getGuiMaster()->partui->npart;
    synth->SetController(part, cc, val);
    synth->getRuntime().Log(" Part " + asString(part) + "  Midi CC " + asString(cc) + " set to " + asString(val));} selected
            tooltip {Click to set} xywh {340 272 70 20} box PLASTIC_UP_BOX color 90 labelsize 12 hide
          }
        }
      }
      Fl_Button {} {
        label {Close Unsaved}
        callback {synth->getGuiMaster()->bankui->readbankcfg();
configwindow->do_callback();}
        xywh {345 305 105 20} box THIN_UP_BOX labelsize 12
      }
      Fl_Button {} {
        label {Save and Close}
        callback {savesettings();
synth->getGuiMaster()->bankui->readbankcfg();
configChanged = false;
configwindow->do_callback();}
        xywh {225 305 105 20} box THIN_UP_BOX labelsize 12
      }
    }
  }
  Function {ConfigUI(SynthEngine *_synth)} {open
  } {
    code {//
  synth = _synth;
        configChanged = false;
        make_window();
        readpresetcfg();
  selectedRootID = -1;} {}
  }
  Function {activatebutton_presetdir(bool active)} {open
  } {
    code {//
        if (active)
        {
            removepresetbutton->activate();
            makedefaultpresetbutton->activate();
        }
        else
        {
            removepresetbutton->deactivate();
            makedefaultpresetbutton->deactivate();
        }} {}
  }
  Function {recoverID()} {open return_type int
  } {
    code {//
    if (selectedRootID >= 0)
    {
        return selectedRootID;
    }
    return 0;} {}
  }
  Function {readpresetcfg()} {} {
    code {//
        presetbrowse->clear();
        for (int i = 0; i < MAX_BANK_ROOT_DIRS; ++i)
            if (synth->getRuntime().presetsDirlist[i].size())
                presetbrowse->add(synth->getRuntime().presetsDirlist[i].c_str());} {}
  }
  Function {writepresetcfg()} {} {
    code {//
        synth->getRuntime().clearPresetsDirlist();
        for (int n = 0; n < presetbrowse->size(); ++n)
            synth->getRuntime().presetsDirlist[n] = string(presetbrowse->text(n + 1));} {}
  }
  Function {Show()} {} {
    code {configwindow->show();} {}
  }
  Function {Hide()} {} {
    code {configwindow->hide();} {}
  }
  Function {savesettings(void)} {open private return_type void
  } {
    code {//
        synth->getRuntime().saveConfig();
        writepresetcfg();} {}
  }
  decl {bool configChanged;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {long selectedRootID;} {private local
  }
  decl {int EPCvalue;} {private local
  }
  decl {int BankRootvalue;} {private local
  }
  decl {int oldBank;} {private local
  }
  decl {int oldrootID;} {private local
  }
} 
