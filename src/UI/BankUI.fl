# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {BankUI.h} {not_in_source in_header
}

comment {BankUI.cc} {in_source not_in_header
}

comment {
Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert
Copyright 2014-2020, Will Godfrey & others

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of original ZynAddSubFX code.

} {selected in_source in_header
}

decl {\#include <iostream>} {public local
}

decl {\#include <unistd.h>} {public local
}

decl {\#include <FL/Fl_Button.H>} {public local
}

decl {\#include <FL/Fl_File_Chooser.H>} {public local
}

decl {\#include <FL/Fl_Spinner.H>} {public local
}

decl {\#include "UI/MiscGui.h"} {public local
}

decl {\#include "Misc/Bank.h"} {public local
}

decl {\#include "Misc/Config.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public local
}

decl {\#include "MasterUI.h"} {private local
}

decl {\#include "Misc/FormatFuncs.h"
    using func::string2int;
    using func::asString;} {private local
}

decl {\#include "Misc/TextMsgBuffer.h"

    namespace { // Implementation details...
        TextMsgBuffer& textMsgBuffer = TextMsgBuffer::instance();
    }} {private local
}

class BankProcess_ {} {
  Function {process(void)} {return_type {virtual void}
  } {
    code {;} {}
  }
  decl {Bank *bank;} {public local
  }
}

class BankSlot {: {public Fl_Button, BankProcess_}
} {
  Function {BankSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {} {
    code {//
    what = NULL;
    whatslot = NULL;
    nslot = 0;
    nselected = NULL;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {//
    if (what == NULL)
        return 0;
    if (Fl::event_inside(this))
    {
        *what = 0;
        *whatslot = nslot;
        if (event == FL_RELEASE)
            *what = Fl::event_button();
        if (event == FL_PUSH)
            highlight = 1;
    }
    else
        highlight = 0;
    int tmp = Fl_Button::handle(event);
    if (*what != 0 && Fl::event_inside(this))
        (bp->*fnc)();
    return tmp;} {}
  }
  Function {init(int nslot_, int *what_, int *whatslot_, void (BankProcess_:: *fnc_)(void), BankProcess_ *bp_, Bank *bank_, int *nselected_)} {} {
    code {//
        nslot = nslot_;
        what = what_;
        whatslot = whatslot_;
        fnc = fnc_;
        bp = bp_;
        bank = bank_;
        nselected = nselected_;
        box(FL_THIN_UP_FRAME);
        labelfont(0);
        labelsize(13);
        align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
        highlight = 0;} {}
  }
  Function {refresh(int bk, int rt)} {} {
    code {//
    string instrName = bank->getnamenumbered(nslot, bk, rt);
    copy_label(instrName.c_str());
    rootID = rt;
    bankID = bk;
    if (bank->engines_used(rt, bk, nslot) & 8)
        labelcolor(YOSHI_COLOUR);
    else
        labelcolor(0);} {}
  }
  decl {int *what, *whatslot, nslot, highlight, *nselected;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {void (BankProcess_:: *fnc)(void);} {private local
  }
  decl {BankProcess_ *bp;} {private local
  }
  Function {draw()} {
    comment {overrides button's draw()} protected
  } {
    code {//
    if (type() == FL_HIDDEN_BUTTON) return;
    int acol, scol, pcol, bcol;
    int wid = w() * 0.334;
    int engine = bank->engines_used(rootID, bankID, nslot);
    if (*nselected == nslot)
    {
        acol = 6;
        scol = 6;
        pcol = 6;
    }
    else if(bank->emptyslot(rootID, bankID, nslot))
    {
        if (nslot < 128)
        {
            acol = 46;
            scol = 46;
            pcol = 46;
        }
        else
        {
            acol = 16;
            scol = 16;
            pcol = 16;
        }
    }
    else
    {
        if (nslot < 128)
            bcol = 51;
        else
            bcol = 17;
        if(engine & 1)
            acol = ADD_COLOUR;
        else
            acol = bcol;
        if(engine & 2)
            scol = SUB_COLOUR;
        else
            scol = bcol;
        if(engine & 4)
            pcol = PAD_COLOUR;
        else
            pcol = bcol;
    }
    draw_box(FL_FLAT_BOX, x(), y(), wid, h(), (Fl_Color) acol);
    draw_box(FL_FLAT_BOX, x() + wid, y(), wid, h(), (Fl_Color) scol);
    draw_box(FL_FLAT_BOX, x() + wid * 2, y(), wid, h(), (Fl_Color) pcol);

    //frame for label
    draw_box(value() ? (down_box() ? down_box() : fl_down(box())) : box(), x(), y(), w(), h(), (Fl_Color) BASE_COLOUR);

    //draw_backdrop();

    Fl_Color col = value() ? selection_color() : color();
    if (labeltype() == FL_NORMAL_LABEL && value())
    {
        Fl_Color c = labelcolor();
        labelcolor(fl_contrast(c, col));
        draw_label();
        labelcolor(c);
    }
    else
        draw_label();

    if (Fl::focus() == this) draw_focus();} {}
  }
  decl {int rootID;} {private local
  }
  decl {int bankID;} {private local
  }
}

class RootProcess_ {} {
  Function {rootprocess(void)} {return_type {virtual void}
  } {
    code {;} {}
  }
  decl {Bank *root;} {public local
  }
}

class RootSlot {: {public Fl_Button, RootProcess_}
} {
  Function {RootSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {} {
    code {//
    what = NULL;
    whatslot = NULL;
    nslot = 0;
    nselected = NULL;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {//
    if (what == NULL)
        return 0;
    if (Fl::event_inside(this))
    {
        *what = 0;
        *whatslot = nslot;
        if (event == FL_RELEASE)
            *what = Fl::event_button();
        if (event == FL_PUSH)
            highlight = 1;
    }
    else
        highlight = 0;

    int tmp = Fl_Button::handle(event);
    if (*what != 0 && Fl::event_inside(this))
        (rp->*fnr)();
    return tmp;} {}
  }
  Function {init(int nslot_, int *what_, int *whatslot_, void (RootProcess_:: *fnr_)(void), RootProcess_ *rp_, Bank *root_, int *rselected_)} {} {
    code {//
        nslot = nslot_;
        what = what_;
        whatslot = whatslot_;
        fnr = fnr_;
        rp = rp_;
        root = root_;
        rselected = rselected_;
        box(FL_THIN_UP_BOX);
        labelfont(0);
        labelsize(13);
        align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
        highlight = 0;} {}
  }
  Function {rootrefresh(unsigned int currentBank, unsigned int rootID)} {} {
    code {//
        string bankName = root->getBankName(nslot, rootID);
        if (bankName.empty())
            color(46);
        else
        {
             bankName = std::to_string(nslot) + ". " + bankName;
             if ((unsigned int) nslot == currentBank)
                color(252);
            else
                color(51);
            if (*rselected == nslot)
                color(6);
        }
        copy_label(bankName.c_str());} {}
  }
  decl {int *what, *whatslot, nslot, highlight, *nselected, *rselected;} {private local
  }
  decl {void (RootProcess_:: *fnr)(void);} {private local
  }
  decl {RootProcess_ *rp;} {private local
  }
}

class BankUI {: {public BankProcess_, RootProcess_}
} {
  Function {make_window()} {} {
    Fl_Window instrumentuiwindow {
      label Bank
      xywh {119 271 780 575} type Double hide
    } {
      Fl_Choice banklist {
        callback {//
        int n = o->value();
        if (n < 0)
            return;

        const Fl_Menu_Item &item = o->menu()[n];
        int nbank = reinterpret_cast<long>(item.user_data());
        send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::selectBank, nbank, TOPLEVEL::type::Integer, TOPLEVEL::section::bank);}
        xywh {5 8 199 20} down_box BORDER_BOX selection_color 7 labelfont 1 labelsize 12 align 0 textsize 12
      } {}
      Fl_Button B_search {
        label Search
        callback {//
       if (unsearched)
       {
           fillBrowser(1);
           unsearched = false;
       }
       searchwin->show();}
        tooltip {Select instrument from list, by type} xywh {230 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Button {} {
        label Roots
        callback {//
        rootuiwindow->show();
        if ((Fl::event_button() == 3))
        {
            rootFrom = 3;
            instrumentuiwindow->hide();
        }
        instFrom = 0;}
        tooltip {Show root paths. Right click: also close this} xywh {350 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Button {} {
        label Banks
        callback {//
        bankuiwindow->show();
        if ((Fl::event_button() == 3))
        {
            bankFrom = 3;
            instrumentuiwindow->hide();
        }
        instFrom = 0;}
        tooltip {Show banks in current root. Right click: also close this} xywh {496 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Text_Display {} {
        label {This column uses MIDI}
        xywh {628 17 136 3} box NO_BOX labelsize 11 align 33
      }
      Fl_Text_Display {} {
        label {Extended Program Change}
        xywh {615 30 162 3} box NO_BOX labelsize 11 align 33
      }
      Fl_Group {} {
        xywh {5 34 772 491} box ENGRAVED_FRAME
      } {
        Fl_Pack {} {
          xywh {10 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 0; i < 32; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {163 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 32; i < 64; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {316 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 64; i < 96; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {469 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 96; i < 128; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {622 39 150 481} box BORDER_BOX color 48
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 128; i < 160; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
      }
      Fl_Group modeselect {
        xywh {5 528 458 42} box ENGRAVED_BOX hide
      } {
        Fl_Light_Button writebutton {
          label SAVE
          callback {//
          if (o->value() > 0.5)
              mode = 2;
          removeselection();}
          xywh {190 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 3 labelfont 9 labelsize 12
        }
        Fl_Light_Button readbutton {
          label SELECT
          callback {//
          if (o->value() > 0.5)
              mode = 1;
          removeselection();}
          xywh {10 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 101 labelfont 9 labelsize 12
          code0 {o->value(1);}
        }
        Fl_Light_Button clearbutton {
          label DELETE
          callback {//
          if (o->value() > 0.5)
              mode = 3;
          removeselection();}
          xywh {280 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 1 labelfont 9 labelsize 12
        }
        Fl_Light_Button swapbutton {
          label SWAP
          callback {//
          if (o->value() > 0.5)
              mode = 4;
          removeselection();}
          xywh {370 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 227 labelfont 9 labelsize 12
        }
        Fl_Light_Button renamebutton {
          label RENAME
          callback {//
          if (o->value() > 0.5)
              mode = 5;
          removeselection();}
          xywh {100 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 5 labelfont 9 labelsize 12
        }
      }
      Fl_Button {} {
        label Close
        callback {//
        if (Fl::event_button() == 3)
        {
            if (instFrom == 2)
            {
                bankFrom = 3;
                bankuiwindow->show();
            }
            else if (instFrom == 4)
            {
                ; // todo open mixer panel
            }
        }
        instFrom = 0; // to avoid later confusion!
        instrumentuiwindow->hide();}
        tooltip {Right click: also reopen previous} xywh {665 539 70 24} box THIN_UP_BOX labelsize 12
      }
      Fl_Group {} {
        xywh {468 528 151 42} box ENGRAVED_FRAME
      } {
        Fl_Check_Button enginecheck {
          label {Show engines/types}
          callback {//
          send_data(TOPLEVEL::action::forceUpdate, CONFIG::control::showEnginesTypes, o->value(), TOPLEVEL::type::Integer, TOPLEVEL::section::config);}
          xywh {477 531 136 15} down_box DOWN_BOX labelsize 11 hide
          code0 {o->value(synth->getRuntime().checksynthengines);}
        }
        Fl_Button addpatch {
          label Add
          xywh {473 550 47 16} box FLAT_BOX labelsize 12 align 32
          code0 {o->color(ADD_COLOUR);}
        }
        Fl_Button subpatch {
          label Sub
          xywh {520 550 47 16} box FLAT_BOX labelsize 11 align 32
          code0 {o->color(SUB_COLOUR);}
        }
        Fl_Button padpatch {
          label Pad
          xywh {567 550 47 16} box FLAT_BOX color 29 labelsize 12 align 32
          code0 {o->color(PAD_COLOUR);}
        }
        Fl_Button {} {
          xywh {474 549 139 17} box THIN_UP_FRAME
        }
      }
    }
    Fl_Window searchwin {
      label {Bank Search}
      xywh {444 123 305 490} type Double box PLASTIC_THIN_UP_BOX color 22 hide
    } {
      Fl_Browser searchbrowse {
        callback {//
        if (!o->value())
            return;
        int result = o->value();
        if (result < 0)
            return;
        string line = string(o->text(result));
        int root = string2int(line.substr(0, 3));
        int bank = string2int(line.substr(5, 3));
        int inst = (string2int(line.substr(10, 3))) - 1;
         //std::cout << root << "  " << bank << "  " << inst << std::endl;
         send_data(TOPLEVEL::action::forceUpdate, MAIN::control::loadInstrumentFromBank, inst, TOPLEVEL::type::Integer, TOPLEVEL::section::main, synth->getGuiMaster()->activePart, bank, root);}
        xywh {12 65 282 374} type Select labelfont 4
      }
      Fl_Button {} {
        label Close
        callback {//
        searchwin->hide();}
        xywh {228 451 65 24} align 192
      }
      Fl_Group {} {
        xywh {25 1 210 35}
      } {
        Fl_Choice searchType {
          label {Type:}
          callback {//
          searchbrowse->clear();
          int result = o->value();
          if (result >= 0)
          {
              fillBrowser(result);
              noEntries->hide();
          }
          else
              noEntries->show();}
          xywh {70 12 140 24} down_box BORDER_BOX labelfont 1 labelsize 12 textsize 12
        } {
          MenuItem {} {
            label {(undefined)}
            xywh {25 25 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Piano
            xywh {15 15 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Chromatic Percussion}
            xywh {25 25 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Organ
            xywh {35 35 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Guitar
            xywh {45 45 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Bass
            xywh {55 55 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Solo Strings}
            xywh {65 65 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Ensemble
            xywh {75 75 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Brass
            xywh {85 85 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Reed
            xywh {95 95 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Pipe
            xywh {105 105 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Synth Lead}
            xywh {115 115 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Synth Pad}
            xywh {125 125 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Synth Effects}
            xywh {135 135 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Ethnic
            xywh {145 145 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Percussive
            xywh {155 155 140 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Sound Effects}
            xywh {165 165 140 20} labelfont 1 labelsize 11
          }
        }
      }
      Fl_Text_Display {} {
        label Root
        xywh {1 34 50 12} box NO_BOX labelfont 1 labelsize 11 align 2
      }
      Fl_Text_Display {} {
        label Bank
        xywh {40 34 50 12} box NO_BOX labelfont 1 labelsize 11 align 2
      }
      Fl_Text_Display {} {
        label Instrument
        xywh {100 35 50 12} box NO_BOX labelfont 1 labelsize 11 align 2
      }
      Fl_Text_Display noEntries {
        label {No Entries}
        xywh {70 195 177 0} labelfont 1 labelsize 30 labelcolor 88 hide deactivate
      }
    }
    Fl_Window bankuiwindow {
      label Root
      xywh {84 223 775 575} type Double labelsize 12 hide
      code0 {o->copy_label(bank->getRootFileTitle(fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank)).c_str());}
      code1 {if (synth->getUniqueId() == 0) rootmodeselect->show();}
      code2 {bankS = fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank);}
    } {
      Fl_Button {} {
        label Roots
        callback {//
        rootuiwindow->show();
        if ((Fl::event_button() == 3))
        {
            rootFrom = 2;
            bankuiwindow->hide();
        }
        else
            rootFrom = 0;}
        tooltip {Show root paths. Right click: also close this} xywh {248 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Button {} {
        label {current bank}
        tooltip {Show instruments in current bank} xywh {394 10 178 15} box THIN_UP_BOX down_box THIN_UP_BOX color 252 selection_color 252 labelsize 12 align 128
      }
      Fl_Button {} {
        label Instruments
        callback {//
        instFrom = 2;
        if (synth->getUniqueId() == 0)
        {
            modeselect->show();
            rootmodeselect->show();
        }
        else
        {
            modeselect->hide();
            rootmodeselect->hide();
        }

        instrumentuiwindow->show();
        if (Fl::event_button() == 3)
            bankuiwindow->hide();}
        tooltip {Show instruments in current bank. Right click: also close this} xywh {627 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Group {} {
        xywh {5 34 766 491} box ENGRAVED_FRAME
      } {
        Fl_Pack {} {
          xywh {10 39 186 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 0; i < 32; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &rselected);

          }}
        } {}
        Fl_Pack {} {
          xywh {200 39 186 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 32; i < 64; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &rselected);

          }}
        } {}
        Fl_Pack {} {
          xywh {390 39 186 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 64; i < 96; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &rselected);

          }}
        } {}
        Fl_Pack {} {
          xywh {580 39 185 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 96; i < 128; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &rselected);

          }}
        } {}
      }
      Fl_Group rootmodeselect {
        xywh {5 528 570 42} box ENGRAVED_BOX hide
      } {
        Fl_Light_Button rootreadbutton {
          label SELECT
          callback {//
          if (o->value() > 0.5)
              r_mode = 1;
          removeselection();}
          xywh {10 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 101 labelfont 9 labelsize 12
          code0 {o->value(1);}
        }
        Fl_Light_Button rootrenamebutton {
          label RENAME
          callback {//
          if (o->value() > 0.5)
              r_mode = 5;
          removeselection();}
          xywh {105 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 5 labelfont 9 labelsize 12
        }
        Fl_Light_Button rootwritebutton {
          label ADD
          callback {//
          if (o->value() > 0.5)
              r_mode = 2;
          removeselection();}
          xywh {200 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 3 labelfont 9 labelsize 12
        }
        Fl_Light_Button rootclearbutton {
          label DELETE
          callback {//
          if (o->value() > 0.5)
              r_mode = 3;
          removeselection();}
          xywh {295 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 1 labelfont 9 labelsize 12
        }
        Fl_Light_Button rootswapbutton {
          label SWAP
          callback {//
          if (o->value() > 0.5)
              r_mode = 4;
          removeselection();}
          xywh {390 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 227 labelfont 9 labelsize 12
        }
        Fl_Light_Button rootimportbutton {
          label IMPORT
          callback {//
          if (o->value() > 0.5)
              r_mode = 6;
          removeselection();}
          xywh {485 533 85 15} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 93 labelfont 8 labelsize 9
        }
        Fl_Light_Button rootexportbutton {
          label EXPORT
          callback {//
          if (o->value() > 0.5)
              r_mode = 7;
          removeselection();}
          xywh {485 550 85 15} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 78 labelfont 8 labelsize 9
        }
      }
      Fl_Button {} {
        label Close
        callback {//
            bankuiwindow->hide();
            if (Fl::event_button() == 3)
            {
                if (bankFrom == 1)
                {
                    rootFrom = 2;
                    rootuiwindow->show();
                }
                else if (bankFrom == 3)
                {
                    instFrom = 2;
                    instrumentuiwindow->show();
                }
            }
            else
                bankFrom = 0;}
        tooltip {Right click: also reopen previous} xywh {647 538 70 24} box THIN_UP_BOX labelsize 12
      }
    }
    Fl_Window rootuiwindow {
      label {Bank Root Paths}
      callback {o->hide();}
      xywh {300 77 465 295} type Double hide
      code0 {readbankcfg();}
      code1 {o->copy_label(synth->makeUniqueName("Bank Root Paths").c_str());}
      code2 {if (synth->getUniqueId() == 0) {addrootdirbutton->show();  removerootdirbutton->show();  changeIDbutton->show();}}
    } {
      Fl_Browser rootsbrowse {
        callback {int tmp = o->value();
        activatebutton_rootdir(tmp!=0);
        if (tmp)
        {
            selectedRootID = reinterpret_cast<long>(o->data(tmp));
        }

        changeIDbutton->value(recoverID());
        oldrootID = changeIDbutton->value();
        Pend->hide();}
        xywh {10 10 445 200} type Hold labelsize 12 textsize 13
      }
      Fl_Button addrootdirbutton {
        label {Add root directory...}
        callback {//
        const char *dirname;
        dirname = fl_dir_chooser("Add a root directory for banks:", NULL, 0);
        if (!dirname)
            return;
        if(!file::isDirectory(dirname))
        {
            if (fl_choice("Directory is missing, or doesn't have at least \\n1 bank with at least 1 instrument. \\nCreate missing entries?", NULL, "No", "Yes") != 2)
                return;
            synth->getBankRef().generateSingleRoot(dirname, false);
            synth->getGuiMaster()->updatepart();
        }
        else
        {
            size_t idx = synth->getBankRef().addRootDir(dirname);
            synth->getBankRef().installNewRoot(idx, dirname);
        }
        synth->saveBanks();
        readbankcfg();
        Pend->hide();}
        xywh {10 225 75 35} box THIN_UP_BOX labelsize 12 align 128 hide
      }
      Fl_Button removerootdirbutton {
        label {Remove root dir...}
        callback {//
        if (selectedRootID >= 0)
        {
            synth->getBankRef().removeRoot(selectedRootID);
            synth->saveBanks();
            readbankcfg();
        }
        activatebutton_rootdir(false);
        rescan_for_banks();
        Pend->hide();}
        xywh {95 225 75 35} box THIN_UP_BOX labelsize 12 align 128 hide deactivate
        code0 {o->deactivate();}
      }
      Fl_Button makedefaultrootdirbutton {
        label {Make current}
        callback {//
        if (selectedRootID >= 0)
        {
            send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::selectRoot, selectedRootID, TOPLEVEL::type::Integer, TOPLEVEL::section::bank);

            banklist->value(0);
        }
        activatebutton_rootdir(false);
        Pend->hide();}
        xywh {180 225 75 35} box THIN_UP_BOX labelsize 12 align 128 deactivate
        code0 {o->deactivate();}
      }
      Fl_Button showdefaultrootdirbutton {
        label {Open current}
        callback {//
        bankuiwindow->show();
        if (Fl::event_button() == 3)
        {
            bankFrom = 1;
            rootuiwindow->hide();
        }
        else
            rootFrom = 0;}
        tooltip {Right click: also close this} xywh {265 225 75 35} box THIN_UP_BOX labelsize 12 align 128
      }
      Fl_Button Pend {
        label Pending
        callback {//
        int tmp = changeIDbutton->value();
        if (tmp == oldrootID)
        {
            o->hide();
            return;
        }
        if (selectedRootID >= 0)
        {
            send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::changeRootId, tmp, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, UNUSED, selectedRootID);
        }
        oldrootID = tmp;
        activatebutton_rootdir(false);
        o->hide();}
        tooltip {Click to set} xywh {400 239 56 18} box PLASTIC_UP_BOX color 90 labelsize 10 hide
      }
      Fl_Spinner changeIDbutton {
        label {Change ID}
        callback {Pend->show();}
        xywh {348 238 45 19} labelsize 12 align 5 minimum 0 maximum 126 textsize 12 hide deactivate
        code0 {oldrootID = o->value();}
      }
      Fl_Button {} {
        label Close
        callback {//
        if (Fl::event_button() == 3)
        {
            if (rootFrom == 2)
            bankuiwindow->show();
        }
        else
            rootFrom = 0;
        rootuiwindow->do_callback();}
        tooltip {Right click: also reopen previous} xywh {402 268 51 20} box THIN_UP_BOX labelsize 12
      }
    }
  }
  Function {fillBrowser(int group)} {} {
    code {//
          string line;
          do
          {
              line = textMsgBuffer.fetch(fetchData(0, BANK::control::findInstrumentName, TOPLEVEL::section::bank, UNUSED, UNUSED, UNUSED, group));
              if (line !="*")
                  searchbrowse->add(line.c_str());
          } while (line != "*");} {}
  }
  Function {send_data(int action, int control, float value, int type, int part = UNUSED, int kititem = UNUSED, int engine = UNUSED, int insert = UNUSED, int parameter = UNUSED, int miscmsg = UNUSED)} {} {
    code {//
        type |= TOPLEVEL::type::Write;
        collect_data(synth, value, action, type, control, part, kititem, engine, insert, parameter, UNUSED, miscmsg);} {}
  }
  Function {fetchData(float value, int control, int part, int kititem = UNUSED, int engine = UNUSED, int insert = UNUSED, int parameter = UNUSED, int offset = UNUSED, int miscmsg = UNUSED, int request = UNUSED)} {return_type float
  } {
    code {//
        return collect_readData(synth, value, control, part, kititem, engine, insert, parameter, offset, miscmsg, request);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    //int value_int = getData->data.value.F;
    unsigned char control = getData->data.control;
    //unsigned char kititem = getData->data.kit;
    //unsigned char engine= getData->data.engine;
    unsigned char insert = getData->data.insert;

    int source = getData->data.source & TOPLEVEL::action::noAction;
    string message = textMsgBuffer.fetch(getData->data.miscmsg);
    switch(control)
    {
        case BANK::control::exportBank:
            if(source == TOPLEVEL::action::fromGUI)
                fl_alert("%s",message.c_str());
            break;
        case BANK::control::renameInstrument:
            if (message.find("FAILED") != std::string::npos)
            {
                if(source == TOPLEVEL::action::fromGUI)
                    fl_alert("%s",message.c_str());
            }
            else
                bs[insert]->copy_label(message.c_str());
            break;
        case BANK::control::saveInstrument:
            if (message.find("FAILED") != std::string::npos)
            {
                if(source == TOPLEVEL::action::fromGUI)
                    fl_alert("%s",message.c_str());
            }
            else
                bs[insert]->copy_label(message.c_str());
            break;
        case BANK::control::deleteInstrument:
            if (message.find("FAILED") != std::string::npos)
            {
                if(source == TOPLEVEL::action::fromGUI)
                    fl_alert("%s",message.c_str());
            }
            else
                rescan_for_banks();
            break;
        case BANK::control::selectFirstInstrumentToSwap:
            break;
        case BANK::control::selectSecondInstrumentAndSwap:

            if (message.find("FAILED") != std::string::npos)
                if(source == TOPLEVEL::action::fromGUI)
                    fl_alert("%s",message.c_str());
            rescan_for_banks();
            break;

        case BANK::control::selectBank:
            rescan_for_banks();
            break;
        case BANK::control::renameBank:
        if (message.find("FAILED") != std::string::npos)
                if(source == TOPLEVEL::action::fromGUI)
                    fl_alert("%s",message.c_str());
            rescan_for_banks();
            break;

        case BANK::control::selectFirstBankToSwap:
            break;
        case BANK::control::selectSecondBankAndSwap:
            if (message.find("FAILED") != std::string::npos)
                if(source == TOPLEVEL::action::fromGUI)
                    fl_alert("%s",message.c_str());
            rescan_for_banks();
            break;

        case BANK::control::selectRoot:
            readbankcfg();
            rescan_for_banks();
            break;
        case BANK::control::changeRootId:
            readbankcfg();
            rescan_for_banks();
            break;
        case BANK::control::refreshDefaults:
            readbankcfg();
            break;
    }} {}
  }
  Function {BankUI(SynthEngine *_synth)} {} {
    code {//
    synth = _synth;
    fnc = &BankProcess_::process;
    bank = synth->getBankPtr();
    what = 0;
    nselected = -1;
    rselected = -1;
    make_window();
    mode = 1;
    r_mode = 1;
    fnr = &RootProcess_::rootprocess;
    root = synth->getBankPtr();
    bankS = 0;
    rootFrom = 0;
    bankFrom = 0;
    instFrom = 0;} {}
  }
  Function {~BankUI()} {return_type virtual
  } {
    code {//
        saveWin(synth, instrumentuiwindow->x(), instrumentuiwindow->y(), instrumentuiwindow->visible(), "bankInst");
        instrumentuiwindow->hide();
        delete instrumentuiwindow;
        saveWin(synth,  bankuiwindow->x(),  bankuiwindow->y(),  bankuiwindow->visible(), "bankBank");
        bankuiwindow->hide();
        delete bankuiwindow;
        saveWin(synth,  rootuiwindow->x(),  rootuiwindow->y(), rootuiwindow->visible(), "bankRoot");
        rootuiwindow->hide();
        delete rootuiwindow;} {}
  }
  Function {Show()} {} {
    code {// called from part UI
    rescan_for_banks();
    set_bank_slot();
    instrumentuiwindow->show();
    readbutton->value(1);
    mode = 1;
    removeselection();
    if (synth->getUniqueId() == 0)
    {
        modeselect->show();
        rootmodeselect->show();
    }
    else
    {
        modeselect->hide();
        rootmodeselect->hide();
    }
    refreshmainwindow();} {}
  }
  Function {Hide()} {} {
    code {// called from master UI
    instrumentuiwindow->hide();} {}
  }
  Function {init(Fl_Spinner *cbwig_)} {} {
    code {//
    cbwig = cbwig_;
    rescan_for_banks();
    unsearched = true;
    searchType->value(1);
    if(synth->getRuntime().checksynthengines)
        B_search->activate();
    else
        B_search->deactivate();} {}
  }
  Function {process()} {return_type void
  } {
    code {//
        int slot = this->slot;
        int curPart = synth->getRuntime().currentPart;
        //int rt = fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank);
        //int bk = fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank);
        //bool slotFilled = !bank->emptyslot(rt, bk, slot);
        //string thisname =  bank->getname(slot, bk, rt);
        string thisname =  textMsgBuffer.fetch(fetchData(0, BANK::control::readInstrumentName, TOPLEVEL::section::bank, UNUSED, UNUSED, UNUSED, slot));
        bool slotFilled = (thisname > "!");
        if ((what == 1 || what == 3) && mode == 1 && slotFilled)
        {
            if (synth->getGuiMaster()->activePart == UNUSED)
            {
                fl_alert("Active part disabled");
                return;
            }
            send_data(TOPLEVEL::action::forceUpdate, MAIN::control::loadInstrumentFromBank, slot, TOPLEVEL::type::Integer, TOPLEVEL::section::main,synth->getGuiMaster()->activePart);
            // Reads from slot
            if (what == 3)
                instrumentuiwindow->hide();
            return;
        }

        if (mode == 5)
        {   // Rename slot
            if (slotFilled)
            {
                const char *newname = fl_input("Instrument name:", thisname.c_str());
                if (newname)
                {
                    if (string(newname) == DEFAULT_NAME)
                        fl_alert("Can't use name of default sound");
                    else if (strlen(newname) > 3)
                        send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::renameInstrument, 0, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, UNUSED, UNUSED, slot, UNUSED, synth->textMsgBuffer.push(newname));
                }
            }
            setread();
        }

        if (mode == 2)
        {   // save(write) to slot (choices reversed for 'No' priority)
            bool doit = true;
            if (synth->part[curPart]->Pname == DEFAULT_NAME)
            {
                fl_alert("Can't store instrument with default name");
                setread();
                doit = false;
            }
            else if (slotFilled)
            {
                if (fl_choice("Overwrite the slot no. %d ?", NULL, "No", "Yes", slot + 1) < 2)
                {
                    setread();
                    doit = false;
                }
            }
            if (doit)
            {
                send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::saveInstrument, 0, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, UNUSED, UNUSED, slot);
                setread();
            }
        }

        if (mode == 3)
        {   // Clears the slot (choices reversed for 'No' priority)
            if (slotFilled)
            {
                if (fl_choice("Clear the slot no. %d ?", NULL, "No", "Yes", slot + 1) > 1)
                    send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::deleteInstrument, slot, TOPLEVEL::type::Write, TOPLEVEL::section::bank);
            }
            setread();
        }

        if (mode == 4)
        {   // swap
            bool done = false;
            if (what == 1 && nselected >= 0)
            {
                send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::selectSecondInstrumentAndSwap, 0, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, UNUSED, UNUSED, slot);
                nselected = -1;
                setread();
                done = true;
            }
            if ((nselected < 0 || what == 2) && !done)
            {
                send_data(TOPLEVEL::action::lowPrio, BANK::control::selectFirstInstrumentToSwap, 0, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, UNUSED, UNUSED, slot);
                nselected = slot;
            }
        }
        if (mode != 4)
            refreshmainwindow();} {}
  }
  Function {rootprocess()} {return_type void
  } {
    code {//
    unsigned int slot = this->slot;
    int rt = fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank);
    int bt = fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank);
    string thisname = bank->getBankName(slot, rt);

    if ((what == 1 || what == 3) && r_mode == 1 && !thisname.empty())
    {
        // Selects from slot
        send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::selectBank, slot, TOPLEVEL::type::Integer, TOPLEVEL::section::bank);

        instFrom = 2;
        if (what == 3)
            bankuiwindow->hide();

        cbwig->do_callback();
        if (synth->getUniqueId() == 0)
        {
            modeselect->show();
            rootmodeselect->show();
        }
        else
        {
            modeselect->hide();
            rootmodeselect->hide();
        }
        instrumentuiwindow->show();
        set_bank_slot(); // needed by 'old' menu selector
        refreshmainwindow();
        return;
    }

    if (r_mode == 7)
    {
    	const char *dirname;
        dirname = fl_dir_chooser("Export a bank:",synth->getRuntime().userHome.c_str(), 0);
        if (dirname)
            send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, MAIN::control::exportBank, slot, TOPLEVEL::type::Integer, TOPLEVEL::section::main, UNUSED, UNUSED, UNUSED, UNUSED, textMsgBuffer.push(string(dirname)));
   	setrootread();
    }

    if (r_mode == 6)
    {
    	const char *dirname;
        dirname = fl_dir_chooser("Import a new bank:",synth->getRuntime().userHome.c_str(), 0);
        if (dirname)
            send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, MAIN::control::importBank, slot, TOPLEVEL::type::Integer, TOPLEVEL::section::main, UNUSED, UNUSED, UNUSED, UNUSED, textMsgBuffer.push(string(dirname)));
   	setrootread();
    }

    if (r_mode == 5 && !thisname.empty())
    {   // Rename bank
        const char *tmp = fl_input("Bank name:",thisname.c_str());
        if (tmp)
            if (strlen(tmp) > 2) // insist on a readable name
                send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::renameBank, slot, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, UNUSED, UNUSED, UNUSED, UNUSED, textMsgBuffer.push(string(tmp)));
        setrootread();
    }

    if (r_mode == 2)
    {   // Create new bank and save to file
        if (!thisname.empty())
        {
            setrootread();
            fl_alert("Bank %d already in use for %s", slot, thisname.c_str());
            return;
        }
        const char *dirname;
        dirname = fl_input("New empty Bank:");
        if (dirname == NULL)
        {
            setrootread();
            return;
        }

        if (!bank->newIDbank(dirname, (unsigned int)slot))
        {
            setrootread();
            fl_alert("Could not make a new bank directory.");
            return;
        }
        bank->setCurrentBankID(slot);
        rs[slot]->rootrefresh(bt, rt);
        rescan_for_banks();
        set_bank_slot();
        setrootread();
        refreshmainwindow();
    }

    if (r_mode == 3 && !thisname.empty())
    {   // Remove bank and file contents (choices reversed for 'No' priority)
        if (fl_choice("Completely remove %s?", NULL, "No", "Yes", thisname.c_str()) > 1)
        {
            int clearit = true;
            int count = bank->getBankSize(slot, rt);
            if (count > 1)
                clearit = fl_choice("There are %d instruments in this bank\\nThey will be permanently deleted",
                                    NULL, "STOP !", "Continue", count) > 1;
            if (clearit)
            {
                send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, MAIN::control::deleteBank, slot, TOPLEVEL::type::Integer, TOPLEVEL::section::main);
            }
        }
        setrootread();
        refreshmainwindow();
    }

    if (r_mode == 4)
    {   // Swap banks

            bool done = false;
            if (what == 1 && rselected >= 0)
            {
                send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, BANK::control::selectSecondBankAndSwap, 0, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, slot);
                rselected = -1;
                rescan_for_banks();
                setrootread();
                done = true;
            }
            if ((rselected < 0 || what == 2) && !done)
            {
                send_data(TOPLEVEL::action::lowPrio, BANK::control::selectFirstBankToSwap, 0, TOPLEVEL::type::Integer, TOPLEVEL::section::bank, slot);
                rselected = slot;
                rs[slot]->rootrefresh(bt, rt);
            }
    }} {}
  }
  Function {setread()} {} {
    code {//
    mode = 1;
    readbutton->value(1);
    writebutton->value(0);
    clearbutton->value(0);
    swapbutton->value(0);
    renamebutton->value(0);} {}
  }
  Function {setrootread()} {} {
    code {//
    r_mode = 1;
    rootreadbutton->value(1);
    rootwritebutton->value(0);
    rootimportbutton->value(0);
    rootexportbutton->value(0);
    rootclearbutton->value(0);
    rootswapbutton->value(0);
    rootrenamebutton->value(0);} {}
  }
  Function {refreshmainwindow()} {} {
    code {//
    int bk = fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank);
    int rt = fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank);

    instrumentuiwindow->copy_label(bank->getBankFileTitle(rt, bk).c_str());

    bankuiwindow->copy_label(bank->getRootFileTitle(rt).c_str());

    for (int i = 0; i < MAX_INSTRUMENTS_IN_BANK; ++i)
        bs[i]->refresh(bk, rt);
    for (int i = 0; i < MAX_BANKS_IN_ROOT; ++i)
        rs[i]->rootrefresh(bk, rt);} {}
  }
  Function {refreshbankslot(int ins, int bk, int rt)} {} {
    code {//
        bs[ins]->refresh(bk, rt);} {}
  }
  Function {removeselection()} {} {
    code {//
        if (nselected >= 0)
        {
            int ns = nselected;
            nselected = -1;
            bs[ns]->refresh(fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank), fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank));
        }
        if (rselected >= 0)
        {
            int rsel = rselected;
            rselected = -1;
            rs[rsel]->rootrefresh(fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank), fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank));
        }} {}
  }
  Function {rescan_for_banks()} {} {
    code {//
    banklist->clear();
    const BankEntryMap &banks = bank->getBanks(fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank));
    BankEntryMap::const_iterator it;
    for (it = banks.begin(); it != banks.end(); ++it)
    {
        if (!it->second.dirname.empty())
        {
            int n = banklist->add((asString(it->first) + ". " + it->second.dirname).c_str(), (const char *)0, (Fl_Callback*)0, reinterpret_cast<void *>(it->first));
            if(it->first == fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank))
            {
                banklist->value(n); // ensure correct bank in list
            }
        }
    }
    refreshmainwindow();} {}
  }
  Function {set_bank_slot()} {} {
    code {//
    size_t curID = fetchData(0, BANK::control::selectBank, TOPLEVEL::section::bank);
    const Fl_Menu_Item *curItem = 0;
    for(int i = 0; i < banklist->size(); i++)
    {
        const Fl_Menu_Item *item = banklist->menu() + i;
        if(item->label())
        {
            if(curID == reinterpret_cast<size_t>(item->user_data()))
            {
                curItem = item;
            }
        }
    }
    if(curItem)
    {
        banklist->value(curItem);
    }
    else
    {
        banklist->value(0);
    }} {}
  }
  Function {activatebutton_rootdir(bool active)} {} {
    code {//
        if (active)
        {
            removerootdirbutton->activate();
            makedefaultrootdirbutton->activate();
            changeIDbutton->activate();
        }
        else
        {
            removerootdirbutton->deactivate();
            makedefaultrootdirbutton->deactivate();
            changeIDbutton->deactivate();
            Pend->hide();
        }} {}
  }
  Function {readbankcfg()} {} {
    code {//
    string tmp;
    rootsbrowse->clear();
    const RootEntryMap &roots = synth->getBankRef().getRoots();
    RootEntryMap::const_iterator it;
    for(it = roots.begin(); it != roots.end(); ++it)
    {
        if (!it->second.path.empty())
        {
            tmp = asString(it->first) + ". " + it->second.path;
            if(it->first == fetchData(0, BANK::control::selectRoot, TOPLEVEL::section::bank))
            {
                tmp += " *";
            }
            rootsbrowse->add(tmp.c_str(), reinterpret_cast<void *>(static_cast<long>(it->first)));
        }
    }} {}
  }
  Function {recoverID()} {return_type int
  } {
    code {//
    if (selectedRootID >= 0)
    {
        return selectedRootID;
    }
    return 0;} {}
  }
  decl {BankSlot *bs[MAX_INSTRUMENTS_IN_BANK];} {private local
  }
  decl {RootSlot *rs[MAX_BANKS_IN_ROOT];} {private local
  }
  decl {int slot, what; // "what" = what button is pressed} {private local
  }
  decl {int mode, r_mode, nselected, rselected;} {private local
  }
  decl {void (BankProcess_::* fnc)(void);} {private local
  }
  decl {void (RootProcess_::* fnr)(void);} {private local
  }
  decl {Fl_Spinner *cbwig;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int bankS;} {private local
  }
  decl {long selectedRootID;} {private local
  }
  decl {int EPCvalue;} {private local
  }
  decl {int BankRootvalue;} {private local
  }
  decl {int oldBank;} {private local
  }
  decl {int oldrootID;} {private local
  }
  decl {string rootuiwindowlabel;} {private local
  }
  decl {int rootFrom;} {private local
  }
  decl {int bankFrom;} {private local
  }
  decl {int instFrom;} {private local
  }
  decl {bool unsearched;} {public local
  }
}
