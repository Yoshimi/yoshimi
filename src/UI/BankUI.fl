# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cc}
comment {BankUI.h} {not_in_source in_header
} 

comment {BankUI.cc} {in_source not_in_header
} 

comment {
Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of original ZynAddSubFX code, modified November 2010
} {in_source in_header
} 

decl {\#include <FL/Fl_Button.H>} {public local
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public local
} 

decl {\#include <FL/Fl_Spinner.H>} {public local
} 

decl {\#include "Misc/Bank.h"} {public local
} 

decl {\#include "Misc/Config.h"} {public local
} 

decl {\#include "Misc/SynthEngine.h"} {public local
} 

decl {\#include "MasterUI.h"} {private local
} 

class BankProcess_ {} {
  Function {process(void)} {return_type {virtual void}
  } {
    code {;} {}
  }
  decl {Bank *bank;} {public local
  }
} 

class BankSlot {: {public Fl_Button, BankProcess_}
} {
  Function {BankSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {} {
    code {what = NULL;
        whatslot = NULL;
        nslot = 0;
        nselected = NULL;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {//
    if (what == NULL)
        return 0;
    if (Fl::event_inside(this))
    {
        *what = 0;
        *whatslot = nslot;
        if (event == FL_RELEASE)
            *what = Fl::event_button();
        if (event == FL_PUSH)
            highlight = 1;
    }
    else
        highlight = 0;
    int tmp = Fl_Button::handle(event);
    if (*what != 0 && Fl::event_inside(this))
        (bp->*fnc)();
    return tmp;} {}
  }
  Function {init(int nslot_, int *what_, int *whatslot_, void (BankProcess_:: *fnc_)(void), BankProcess_ *bp_, Bank *bank_, int *nselected_)} {} {
    code {nslot = nslot_;
        what = what_;
        whatslot = whatslot_;
        fnc = fnc_;
        bp = bp_;
        bank = bank_;
        nselected = nselected_;
        box(FL_THIN_UP_FRAME);
        labelfont(0);
        labelsize(13);
        align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
        highlight = 0;
        refresh();} {}
  }
  Function {refresh()} {} {
    code {//
/*    if (bank->emptyslot(nslot))
    {
        if (nslot < 128)
            color(46);
        else
            color(16);
    }
    else
    {       
        int engine = bank->engines_used(nslot);
        if (engine & 1) // AddSynth
            labelcolor(72);
        else
            labelcolor(0);
        if (engine & 2) // SubSynth
        {
            labelsize(11);
            labelfont(2);
        }
        else
        {
            labelsize(12);
            labelfont(0);
        }
        if (engine & 4) // PadSynth
            color(126);
	else
	{
            if (nslot < 128)
                color(51);
            else
                color(17);
         }
    }
    if (*nselected == nslot)
        color(6);
*/
    string instrName = bank->getnamenumbered(nslot);
    copy_label(instrName.c_str());} {}
  }
  decl {int *what, *whatslot, nslot, highlight, *nselected;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {void (BankProcess_:: *fnc)(void);} {private local
  }
  decl {BankProcess_ *bp;} {private local
  }
  Function {draw()} {
    comment {overrides button's draw()} protected
  } {
    code {//
    if (type() == FL_HIDDEN_BUTTON) return;
    int acol, scol, pcol, bcol;
    int wid = w() * 0.334;
    int engine = bank->engines_used(nslot);
    if (*nselected == nslot)
    {
            acol = 6;
            scol = 6;
            pcol = 6;
    }
    else if(bank->emptyslot(nslot))
    {
        if (nslot < 128)
        {
            acol = 46;
            scol = 46;
            pcol = 46;
        }
        else
        {
            acol = 16;
            scol = 16;
            pcol = 16;
        }
    }
    else
    {
        if (nslot < 128)
            bcol = 51;
        else
            bcol = 17;
        if(engine & 1)
            acol = ADD_COLOUR;
        else
            acol = bcol;
        if(engine & 2)
            scol = SUB_COLOUR;
        else
            scol = bcol;
        if(engine & 4)
            pcol = PAD_COLOUR;
        else
            pcol = bcol;
    }
    draw_box(FL_FLAT_BOX, x(), y(), wid, h(), (Fl_Color) acol);
    draw_box(FL_FLAT_BOX, x() + wid, y(), wid, h(), (Fl_Color) scol);
    draw_box(FL_FLAT_BOX, x() + wid * 2, y(), wid, h(), (Fl_Color) pcol);

    //frame for label
    draw_box(value() ? (down_box() ? down_box() : fl_down(box())) : box(), x(), y(), w(), h(), (Fl_Color) BASE_COLOUR);

    //draw_backdrop();
    
    Fl_Color col = value() ? selection_color() : color();
    if (labeltype() == FL_NORMAL_LABEL && value())
    {
        Fl_Color c = labelcolor();
        labelcolor(fl_contrast(c, col));
        draw_label();
        labelcolor(c);
    }
    else
        draw_label();
 
    if (Fl::focus() == this) draw_focus();} {}
  }
} 

class RootProcess_ {} {
  Function {rootprocess(void)} {return_type {virtual void}
  } {
    code {;} {}
  }
  decl {Bank *root;} {public local
  }
} 

class RootSlot {: {public Fl_Button, RootProcess_}
} {
  Function {RootSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {} {
    code {what = NULL;
        whatslot = NULL;
        nslot = 0;
        nselected = NULL;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if (what == NULL)
            return 0;
        if (Fl::event_inside(this))
        {
            *what = 0;
            *whatslot = nslot;
            if (event == FL_RELEASE)
                *what = Fl::event_button();
            if (event == FL_PUSH)
                highlight = 1;
        }
        else
            highlight = 0;

        int tmp = Fl_Button::handle(event);
        if (*what != 0 && Fl::event_inside(this))
            (rp->*fnr)();
        return tmp;} {}
  }
  Function {init(int nslot_, int *what_, int *whatslot_, void (RootProcess_:: *fnr_)(void), RootProcess_ *rp_, Bank *root_, int *nselected_)} {} {
    code {nslot = nslot_;
        what = what_;
        whatslot = whatslot_;
        fnr = fnr_;
        rp = rp_;
        root = root_;
        nselected = nselected_;
        box(FL_THIN_UP_BOX);
        labelfont(0);
        labelsize(13);
        align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
        highlight = 0;
        rootrefresh();} {}
  }
  Function {rootrefresh()} {} {
    code {//
    string bankName = root->getBankIDname(nslot);
    if (bankName.empty())
        color(46);
    else if ((unsigned int) nslot == root->getCurrentBankID())
    	color(252);
    else
        color(51);
    if (*nselected == nslot)
        color(6);
    copy_label(bankName.c_str());} {}
  }
  decl {int *what, *whatslot, nslot, highlight, *nselected;} {private local
  }
  decl {void (RootProcess_:: *fnr)(void);} {private local
  }
  decl {RootProcess_ *rp;} {private local
  }
} 

class BankUI {selected : {public BankProcess_, RootProcess_, MiscFuncs}
} {
  Function {make_window()} {} {
    Fl_Window bankuiwindow {
      label Bank
      xywh {46 240 780 575} type Double hide
    } {
      Fl_Choice banklist {
        callback {//
    int n = o->value();
    if (n < 0)
        return;
    const Fl_Menu_Item &item = o->menu()[n]; 
    int nbank = reinterpret_cast<long>(item.user_data());
    const BankEntry &bankEntry = bank->getBank(nbank);
    if (!bank->setCurrentBankID(nbank))
        fl_alert("Error: Could not load the bank from the directory\\n%s.", bankEntry.dirname.c_str());
    for (int i = 0; i < BANK_SIZE; ++i)
        bs[i]->refresh();
    refreshmainwindow();} open
        xywh {5 8 199 20} down_box BORDER_BOX selection_color 7 labelfont 1 labelsize 12 align 0 textsize 12
      } {}
      Fl_Button {} {
        label {Refresh banks}
        callback {rescan_for_banks(true);
set_bank_slot();}
        tooltip {Refresh the bank list (rescan)} xywh {212 5 102 25} box PLASTIC_UP_BOX color 50 labelfont 1 labelsize 11 hide deactivate
      }
      Fl_Button {} {
        label Roots
        callback {//
    pathwindow->show();
    if ((Fl::event_button() == 3))
        bankuiwindow->hide();}
        tooltip {Show root paths} xywh {350 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Button {} {
        label Banks
        callback {rootuiwindow->show();
if ((Fl::event_button() == 3))
    bankuiwindow->hide();}
        tooltip {Show banks in current root} xywh {496 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Text_Display {} {
        label {This column uses MIDI}
        xywh {628 17 136 3} box NO_BOX labelsize 11 align 33
      }
      Fl_Text_Display {} {
        label {Extended Program Change}
        xywh {615 30 162 3} box NO_BOX labelsize 11 align 33
      }
      Fl_Group {} {
        xywh {5 34 772 491} box ENGRAVED_FRAME
      } {
        Fl_Pack {} {
          xywh {10 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 0; i < 32; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {163 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 32; i < 64; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {316 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 64; i < 96; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {469 39 150 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 96; i < 128; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
        Fl_Pack {} {
          xywh {622 39 150 481} box BORDER_BOX color 48
          code0 {o->box(FL_NO_BOX);}
          code1 {for (int i = 128; i < 160; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }}
        } {}
      }
      Fl_Group modeselect {
        xywh {5 528 458 42} box ENGRAVED_BOX
      } {
        Fl_Light_Button writebutton {
          label SAVE
          callback {if (o->value() > 0.5)
    mode = 2;
removeselection();}
          xywh {190 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 3 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
        Fl_Light_Button readbutton {
          label SELECT
          callback {if (o->value() > 0.5)
    mode = 1;
removeselection();}
          xywh {10 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 101 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
          code0 {o->value(1);}
        }
        Fl_Light_Button clearbutton {
          label DELETE
          callback {if (o->value() > 0.5)
    mode = 3;
removeselection();}
          xywh {280 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 1 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
        Fl_Light_Button swapbutton {
          label SWAP
          callback {if (o->value() > 0.5)
    mode = 4;
removeselection();}
          xywh {370 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 227 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
        Fl_Light_Button renamebutton {
          label RENAME
          callback {if (o->value() > 0.5)
    mode = 5;
removeselection();}
          xywh {100 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 5 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
      }
      Fl_Button {} {
        label Close
        callback {bankuiwindow->hide();}
        xywh {665 539 70 24} box THIN_UP_BOX labelsize 12
      }
      Fl_Group engines {
        xywh {468 528 151 42} box ENGRAVED_FRAME
      } {
        Fl_Check_Button {} {
          label {Show synth engines}
          callback {//
    synth->getRuntime().checksynthengines = (int) o->value();
    rescan_for_banks(true);
    synth->getGuiMaster()->partui->resetlabels();
    synth->getGuiMaster()->updatepanel();}
          xywh {477 531 136 15} down_box DOWN_BOX labelsize 11
          code0 {o->value(synth->getRuntime().checksynthengines);}
        }
        Fl_Button addpatch {
          label Add
          xywh {473 550 47 16} box FLAT_BOX labelsize 12 align 32
          code0 {o->color(ADD_COLOUR);}
        }
        Fl_Button subpatch {
          label Sub
          xywh {520 550 47 16} box FLAT_BOX labelsize 11 align 32
          code0 {o->color(SUB_COLOUR);}
        }
        Fl_Button padpatch {
          label Pad
          xywh {567 550 47 16} box FLAT_BOX color 29 labelsize 12 align 32
          code0 {o->color(PAD_COLOUR);}
        }
        Fl_Button {} {
          xywh {474 549 139 17} box THIN_UP_FRAME
        }
      }
    }
    Fl_Window rootuiwindow {
      label Root
      xywh {14 352 775 575} type Double labelsize 12 hide
      code0 {o->copy_label(bank->getRootFileTitle().c_str());}
    } {
      Fl_Button {} {
        label Roots
        callback {// 
    pathwindow->show();
    if ((Fl::event_button() == 3))
       rootuiwindow->hide();}
        tooltip {Show root paths} xywh {248 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Button {} {
        label {current bank}
        tooltip {Show instruments in current bank} xywh {394 10 178 15} box THIN_UP_BOX down_box THIN_UP_BOX color 252 selection_color 252 labelsize 12 align 128
      }
      Fl_Button {} {
        label Instruments
        callback {bankuiwindow->show();
if ((Fl::event_button() == 3))
    rootuiwindow->hide();}
        tooltip {Show instruments in current bank} xywh {627 5 93 25} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Group {} {
        xywh {5 34 766 491} box ENGRAVED_FRAME
      } {
        Fl_Pack {} {
          xywh {10 39 186 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 0; i < 32; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }}
        } {}
        Fl_Pack {} {
          xywh {200 39 186 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 32; i < 64; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }}
        } {}
        Fl_Pack {} {
          xywh {390 39 186 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 64; i < 96; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }}
        } {}
        Fl_Pack {} {
          xywh {580 39 185 481} box BORDER_BOX
          code0 {o->box(FL_NO_BOX);}
          code1 {//
            for (int i = 96; i < 128; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }}
        } {}
      }
      Fl_Group rootmodeselect {
        xywh {5 528 475 42} box ENGRAVED_BOX
      } {
        Fl_Light_Button rootwritebutton {
          label ADD
          callback {if (o->value() > 0.5)
    mode = 2;
removeselection();}
          xywh {200 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 3 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
        Fl_Light_Button rootreadbutton {
          label SELECT
          callback {if (o->value() > 0.5)
    mode = 1;
removeselection();}
          xywh {10 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 101 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
          code0 {o->value(1);}
        }
        Fl_Light_Button rootclearbutton {
          label DELETE
          callback {if (o->value() > 0.5)
    mode = 3;
removeselection();}
          xywh {295 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 1 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
        Fl_Light_Button rootswapbutton {
          label SWAP
          callback {if (o->value() > 0.5)
    mode = 4;
removeselection();}
          xywh {390 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 227 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
        Fl_Light_Button rootrenamebutton {
          label RENAME
          callback {if (o->value() > 0.5)
    mode = 5;
removeselection();}
          xywh {105 534 85 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 5 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
        }
      }
      Fl_Button {} {
        label Close
        callback {rootuiwindow->hide();}
        xywh {647 538 70 24} box THIN_UP_BOX labelsize 12
      }
    }
    Fl_Window pathwindow {
      label {Bank Root Paths}
      callback {o->hide();}
      xywh {366 188 465 295} type Double hide
      code0 {readbankcfg();}
    } {
      Fl_Browser rootsbrowse {
        callback {int tmp = o->value();
activatebutton_rootdir(tmp!=0);
if (tmp)
{
    selectedRootID = reinterpret_cast<long>(o->data(tmp));
}
    
changeIDbutton->value(recoverID());
oldrootID = changeIDbutton->value();}
        xywh {10 10 445 200} type Hold labelsize 12 textsize 13
      }
      Fl_Button {} {
        label {Add root directory...}
        callback {//
    const char *dirname;
    dirname = fl_dir_chooser("Add a root directory for banks:", NULL, 0);
    if (!dirname)
      return;
    synth->getGuiMaster()->configui->configChanged = true;
    synth->getBankRef().addRootDir(dirname);
    readbankcfg();
    rescan_for_banks(true);}
        xywh {10 225 75 35} box THIN_UP_BOX labelsize 12 align 128
      }
      Fl_Button removerootdirbutton {
        label {Remove root dir...}
        callback {//
    if (selectedRootID >= 0)
    {;
        synth->getBankRef().removeRoot(selectedRootID);
        readbankcfg();
        synth->getGuiMaster()->configui->configChanged = true;
    }
    activatebutton_rootdir(false);
    rescan_for_banks(false);}
        xywh {95 225 75 35} box THIN_UP_BOX labelsize 12 align 128 deactivate
        code0 {o->deactivate();}
      }
      Fl_Button makedefaultrootdirbutton {
        label {Make current}
        callback {//
    if (selectedRootID >= 0)
    {
        synth->getBankRef().setCurrentRootID(selectedRootID);
        readbankcfg();
        rescan_for_banks(false);
        synth->getGuiMaster()->configui->configChanged = true;
    }
    activatebutton_rootdir(false);}
        xywh {180 225 75 35} box THIN_UP_BOX labelsize 12 align 128 deactivate
        code0 {o->deactivate();}
      }
      Fl_Button showdefaultrootdirbutton {
        label {Open current}
        callback {//
    rootuiwindow->show();
    if (Fl::event_button() == 3)
        pathwindow->hide();}
        xywh {265 225 75 35} box THIN_UP_BOX labelsize 12 align 128
      }
      Fl_Return_Button changeIDok {
        label Set
        callback {//
    if (changeIDbutton->value() == oldrootID)
    {
        o->deactivate();
        return;
    }
    if (selectedRootID >= 0)
    {
        if (synth->getBankRef().changeRootID(selectedRootID, changeIDbutton->value()))
        {
            readbankcfg();
            rescan_for_banks(true);
            synth->getGuiMaster()->configui->configChanged = true;
            o->deactivate();
        }
        else
        {
            changeIDbutton->value(oldrootID);
            fl_alert("ID already in use!");
        }
    }
    oldrootID = changeIDbutton->value();
    activatebutton_rootdir(false);}
        xywh {350 236 74 20} box NO_BOX labelsize 12 align 8 deactivate
      }
      Fl_Spinner changeIDbutton {
        label {Change ID}
        callback {changeIDok->activate();}
        xywh {350 237 45 19} labelsize 12 align 5 minimum 0 maximum 127 textsize 12 deactivate
        code0 {oldrootID = o->value();}
      }
      Fl_Button {} {
        label {Close Unsaved}
        callback {pathwindow->do_callback();}
        xywh {345 268 105 20} box THIN_UP_BOX labelsize 12
      }
      Fl_Button {} {
        label {Save and Close}
        callback {synth->getRuntime().saveConfig();
synth->getGuiMaster()->configui->configChanged = false;
pathwindow->do_callback();}
        xywh {225 268 105 20} box THIN_UP_BOX labelsize 12
      }
    }
  }
  Function {BankUI(int *npart_, SynthEngine *_synth)} {} {
    code {synth = _synth;
fnc = &BankProcess_::process;
        npart = npart_;
        bank = synth->getBankPtr();
        what = 0;
        nselected = -1;
        make_window();
        mode = 1;
fnr = &RootProcess_::rootprocess;
	root = synth->getBankPtr();} {}
  }
  Function {~BankUI()} {return_type virtual
  } {
    code {//
        bankuiwindow->hide();
        delete bankuiwindow;
        rootuiwindow->hide();
        delete rootuiwindow;
        pathwindow->hide();
        delete pathwindow;} {}
  }
  Function {Show()} {} {
    code {// called from part UI
    rescan_for_banks(false);
    set_bank_slot();
    bankuiwindow->show();
    readbutton->value(1);
    mode = 1;
    removeselection();
    modeselect->show();
    refreshmainwindow();} {}
  }
  Function {Hide()} {} {
    code {// called from master UI
    bankuiwindow->hide();} {}
  }
  Function {init(Fl_Spinner *cbwig_)} {} {
    code {cbwig = cbwig_;rescan_for_banks(false);} {}
  }
  Function {process()} {return_type void
  } {
    code {//
	int slot = this->slot;
	string thisname =  bank->getname(slot);
        if ((what == 1 || what == 3) && mode == 1 && !bank->emptyslot(slot))
        {
            // Reads from slot
            bank->loadfromslot(slot, synth->part[*npart]);
            synth->part[*npart]->Pname = thisname;
            if (what == 3)
                bankuiwindow->hide();
            cbwig->do_callback();
            refreshmainwindow();
            return;
        }

        if (mode > 1 and bank->readOnlyInstrument(nselected))
        {
            setread();
            fl_alert("This instrument file cannot be changed");
            return;
        }

        if (mode == 5 && !bank->emptyslot(slot))
        {   // Rename slot
            const char *newname = fl_input("Instrument name:", thisname.c_str());
            if (newname)
            {
                if (strlen(newname) > 3)
                {
                    if (!bank->setname(slot, string(newname), -1))
                    {
                        setread();
                        fl_alert("Could not rename instrument %d to %s", slot, newname);
                        return;
                    }
                    else
                    {
                        bs[slot]->refresh();
                        synth->part[*npart]->Pname = newname;
                    }
                }
            }
            setread();
            cbwig->do_callback();
        }

        if (mode == 2)
        {   // save(write) to slot (choices reversed for 'No' priority)
            bool doit = true;
            if (!bank->emptyslot(slot))
                if (fl_choice("Overwrite the slot no. %d ?", "Yes", "No", NULL, slot + 1))
                    doit = false;
            if (doit)
            {
                synth->actionLock(lockmute);
                bank->savetoslot(slot,synth->part[*npart]);
                synth->actionLock(unlock);
                bs[slot]->refresh();
                setread();
            }
        }

        if (mode == 3 && !bank->emptyslot(slot))
        {   // Clears the slot (choices reversed for 'No' priority)
            if (!fl_choice("Clear the slot no. %d ?", "Yes", "No", NULL, slot + 1))
            {
                bank->clearslot(slot);
                bs[slot]->refresh();
                setread();
            }
        }

        if (mode == 4)
        {   // swap
            bool done = false;
            if (what == 1 && nselected >= 0)
            {
                bank->swapslot(nselected, slot);
                int ns = nselected;
                nselected = -1;
                setread();
                bs[slot]->refresh();
                bs[ns]->refresh();
                done = true;
            }
            if ((nselected < 0 || what == 2) && !done)
            {
                int ns = nselected;
                nselected = slot;
                if (ns > 0)
                    bs[ns]->refresh();
                bs[slot]->refresh();
            }
        }
        if (mode != 4)
            refreshmainwindow();} {}
  }
  Function {rootprocess()} {return_type void
  } {
    code {//
    unsigned int slot = this->slot;
    string thisname = bank->getBankName(slot);

    
        if ((what == 1 || what == 3) && mode == 1 && !thisname.empty())
        {
            // Selects from slot
            const BankEntry &bankEntry = bank->getBank(slot);
            if (!bank->setCurrentBankID(slot))
            {
                fl_alert("Error: Could not load the bank from the directory\\n%s.",
                          bankEntry.dirname.c_str());
                 setrootread();
                 return;
             }
            if (what == 3)
                rootuiwindow->hide();
            cbwig->do_callback();
            bankuiwindow->show();
            set_bank_slot(); // needed by 'old' menu selector
            refreshmainwindow();
            return;
        }

        if (mode > 1 and mode != 4 and bank->readOnlyBank(nselected))
        {
            setrootread();
            fl_alert("This bank directory cannot be changed");
            return;
        }
        

        if (mode == 5 && !thisname.empty())
        {   // Rename bank
            const char *tmp = fl_input("Bank name:",thisname.c_str());
           if (tmp)
           {
                if (strlen(tmp) > 2) // insist on a readable name
                {
                    if (!bank->setbankname(slot, string(tmp)))
                    {
                        setrootread();
                        fl_alert("Cound not rename bank %d to %s", slot, thisname.c_str());
                        return;
                    }
                    else
                    {
                        rs[slot]->rootrefresh();
                        rescan_for_banks(false);
                        set_bank_slot();
                    }
                }
            }
            setrootread();
        }


        if (mode == 2)
        {   // Create new bank and save to file
            if (!thisname.empty())
            {
                setrootread();
                fl_alert("Bank %d already in use for %s", slot, thisname.c_str());
                return;
            }
            const char *dirname;
            dirname = fl_input("New empty Bank:");
            if (dirname == NULL)
            {
                setrootread();
                return;
            }
                
            if (!bank->newIDbank(dirname, (unsigned int)slot))
            {
                setrootread();
                fl_alert("Could not make a new bank directory.");
            	return;
            }
            bank->setCurrentBankID(slot);
            rs[slot]->rootrefresh();
            rescan_for_banks(false);
            set_bank_slot();
            setrootread();
            refreshmainwindow();
        }

        if (mode == 3 && !thisname.empty())
        {   // Remove bank and file contents (choices reversed for 'No' priority)
            if (!fl_choice("Completely remove %s?", "Yes", "No", NULL, thisname.c_str()))
            {
                int clearit = true;
                int count = bank->getBankSize(slot);
//                synth->getRuntime().Log("Bank size " + asString(count));
                if (count > 1)
                    clearit = !fl_choice("There are %d instruments in this bank\\nThey will be permanently deleted",
                                         "Continue", "STOP !", NULL, count);
                if (clearit)
                {
//                    synth->getRuntime().Log("We're going");
                    if (bank->removebank(slot))
                    {
                        if (slot == bank->getCurrentBankID())
                            bank->setCurrentBankID(0,false);
                        rescan_for_banks(false);
                        set_bank_slot();
                        rs[slot]->rootrefresh();
                    }
                    else
                        fl_alert("Deleting %s failed. Some files may still exist", thisname.c_str());
                }
            }
            setrootread();
            refreshmainwindow();
        }

        if (mode == 4)
        {   // Swap banks
            bool done = false;
            if (what == 1 && nselected >= 0)
            {
                bank->swapbanks(nselected, slot);
                if ((unsigned int) nselected == bank->getCurrentBankID() or (unsigned int) slot == bank->getCurrentBankID())
                    refreshmainwindow();
                else
                {
                    int ns = nselected;
                    rs[slot]->rootrefresh();
                    rs[ns]->rootrefresh();
                }
                nselected = -1;
                rescan_for_banks(false);
                setrootread();
                done = true;
            }
            if ((nselected < 0 || what == 2) && !done)
            {
                int ns = nselected;
                nselected = slot;
                if (rs > 0)
                    rs[ns]->rootrefresh();
                rs[slot]->rootrefresh();
            }
        }} {}
  }
  Function {setread()} {} {
    code {//
    mode = 1;
    readbutton->value(1);
    writebutton->value(0);
    clearbutton->value(0);
    swapbutton->value(0);
    renamebutton->value(0);} {}
  }
  Function {setrootread()} {} {
    code {//
    mode = 1;
    rootreadbutton->value(1);
    rootwritebutton->value(0);
    rootclearbutton->value(0);
    rootswapbutton->value(0);
    rootrenamebutton->value(0);} {}
  }
  Function {refreshmainwindow()} {} {
    code {//
    bankuiwindow->copy_label(bank->getBankFileTitle().c_str());
    rootuiwindow->copy_label(bank->getRootFileTitle().c_str());
    for (int i = 0; i < BANK_SIZE; ++i)
        bs[i]->refresh();
    for (int i = 0; i < ROOT_SIZE; ++i)
        rs[i]->rootrefresh();} {}
  }
  Function {removeselection()} {} {
    code {if (nselected >= 0)
        {
            int ns = nselected;
            nselected = -1;
            bs[ns]->refresh();
        }} {}
  }
  Function {rescan_for_banks(bool reload)} {} {
    code {banklist->clear();
if(reload)
{
        bank->rescanforbanks();
}
       const BankEntryMap &banks = bank->getBanks(bank->getCurrentRootID());
          BankEntryMap::const_iterator it;
          for (it = banks.begin(); it != banks.end(); ++it)
          {
              if (!it->second.dirname.empty())
              {
                  int n = banklist->add((asString(it->first) + ". " + it->second.dirname).c_str(), (const char *)0, (Fl_Callback*)0, reinterpret_cast<void *>(it->first));
                  if(it->first == bank->getCurrentBankID())
                  {
  	                banklist->value(n);
  	        }
              }   
          }
          refreshmainwindow();} {}
  }
  Function {set_bank_slot()} {} {
    code {// 
  size_t curID = bank->getCurrentBankID();
 const Fl_Menu_Item *curItem = 0;
    for(int i = 0; i < banklist->size(); i++)
    {
        const Fl_Menu_Item *item = banklist->menu() + i;
        if(item->label())
        {
            if(curID == reinterpret_cast<size_t>(item->user_data()))
            {
                curItem = item;
            }
        }
    }
    if(curItem)
    {
        banklist->value(curItem);
    }
    else
    {
        banklist->value(0);
    }} {}
  }
  Function {activatebutton_rootdir(bool active)} {} {
    code {//
        if (active)
        {
            removerootdirbutton->activate();
            makedefaultrootdirbutton->activate();
            changeIDbutton->activate();
        }
        else
        {
            removerootdirbutton->deactivate();
            makedefaultrootdirbutton->deactivate();
            changeIDbutton->deactivate();
            changeIDok->deactivate();
        }} {}
  }
  Function {readbankcfg()} {} {
    code {//
    string tmp;
    rootsbrowse->clear();
    const RootEntryMap &roots = synth->getBankRef().getRoots();
      RootEntryMap::const_iterator it;
      for(it = roots.begin(); it != roots.end(); ++it)
      {
        tmp = asString(it->first) + ". " + it->second.path;
        if(it->first == synth->getBankRef().getCurrentRootID())
      	{
      	   tmp += " *";
      	}
        rootsbrowse->add(tmp.c_str(), reinterpret_cast<void *>(static_cast<long>(it->first)));
      }} {}
  }
  Function {recoverID()} {return_type int
  } {
    code {//
    if (selectedRootID >= 0)
    {
        return selectedRootID;
    }
    return 0;} {}
  }
  decl {BankSlot *bs[BANK_SIZE];} {private local
  }
  decl {RootSlot *rs[ROOT_SIZE];} {private local
  }
  decl {int slot, what; // "what" = what button is pressed} {private local
  }
  decl {int mode, *npart, nselected;} {private local
  }
  decl {void (BankProcess_::* fnc)(void);} {private local
  }
  decl {void (RootProcess_::* fnr)(void);} {private local
  }
  decl {Fl_Spinner *cbwig;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {long selectedRootID;} {private local
  }
  decl {int EPCvalue;} {private local
  }
  decl {int BankRootvalue;} {private local
  }
  decl {int oldBank;} {private local
  }
  decl {int oldrootID;} {private local
  }
} 
