# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {EffUI.h} {not_in_source in_header
}

comment {EffUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert
Copyright 2016-2018, Will Godfrey & others

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original

Modified February 2018} {in_source in_header
}

decl {\#include <string>} {public local
}

decl {\#include <iostream>} {public local
}

decl {\#include "UI/MiscGui.h"} {public local
}

decl {\#include "UI/WidgetPDial.h"} {public local
}

decl {\#include "EnvelopeUI.h"} {public local
}

decl {\#include "FilterUI.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public local
}

decl {\#include "Effects/EffectMgr.h"} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

class EQGraph {: {public Fl_Box}
} {
  Function {EQGraph(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {eff = NULL;
        maxdB = 30;} {}
  }
  Function {init(EffectMgr *eff_)} {} {
    code {synth = eff_->getSynthEngine();
eff = eff_;
        oldx = -1;
        khzval = -1;} {}
  }
  Function {draw_freq_line(float freq, int type)} {} {
    code {fl_color(FL_GRAY);
        float freqx = getfreqpos(freq);
        switch(type)
        {
            case 0:
                if (active_r())
                    fl_color(FL_WHITE);
                else
                    fl_color(205, 205, 205);
                fl_line_style(FL_SOLID);
                break;
            case 1:
                fl_line_style(FL_DOT);
                break;
            case 2:
                fl_line_style(FL_DASH);
                break;
        }

        if (freqx > 0.0 && freqx < 1.0)
        fl_line(x() + (int) (freqx * w()), y(),
            x() + (int) (freqx * w()), y( ) + h());} {}
  }
  Function {draw()} {} {
    code {int ox = x(), oy = y(), lx = w(), ly = h(), i, iy, oiy;
        float freqx;

        if (active_r())
            fl_color(0, 70, 150);
        else
            fl_color(80, 120, 160);
        fl_rectf(ox, oy, lx, ly);

        // draw the lines
        fl_color(FL_GRAY);

        fl_line_style(FL_SOLID);
        fl_line(ox + 2, oy + ly / 2, ox + lx - 2, oy + ly / 2);

        freqx = getfreqpos(1000.0);
        if (freqx > 0.0 && freqx < 1.0)
            fl_line(ox + (int) (freqx * lx), oy,
                    ox + (int) (freqx * lx), oy + ly);

        for (i = 1; i < 10; ++i)
        {
            if(i == 1)
            {
                draw_freq_line(i * 100.0,0);
                draw_freq_line(i * 1000.0,0);
            }
            else
                if (i == 5)
                {
                    draw_freq_line(i * 10.0, 2);
                    draw_freq_line(i * 100.0, 2);
                    draw_freq_line(i * 1000.0, 2);
                }
                else
                {
                    draw_freq_line(i * 10.0, 1);
                    draw_freq_line(i * 100.0, 1);
                    draw_freq_line(i * 1000.0, 1);
                }
        }
        draw_freq_line(10000.0, 0);
        draw_freq_line(20000.0, 1);

        fl_line_style(FL_DOT);
        int GY = 6;
        if (ly < GY * 3)
            GY = -1;
        for (i = 1; i < GY; ++i)
        {
            int tmp = (int)(ly / (float)GY * i);
            fl_line(ox + 2, oy + tmp, ox + lx - 2, oy + tmp);
        }

        // draw the frequency response
        if (active_r())
            fl_color(FL_YELLOW);
        else
            fl_color(200, 200, 80);
        fl_line_style(FL_SOLID);
        oiy = getresponse(ly, getfreqx(0.0));
        float half_samplerate_f = synth->samplerate_f * 0.5f;
        for (i = 1; i < lx; ++i)
        {
            float frq = getfreqx(i / (float)lx);
            if (frq > half_samplerate_f)
                break;
            iy = getresponse(ly, frq);
            if (oiy >= 0 && oiy < ly && iy >= 0 && iy < ly)
                fl_line(ox + i - 1, oy + ly - oiy, ox + i, oy + ly - iy);
            oiy = iy;
        }} {}
  }
  Function {getresponse(int maxy,float freq)} {return_type int
  } {
    code {float dbresp = eff->getEQfreqresponse(freq);
        int idbresp = (int) ((dbresp / maxdB + 1.0) * maxy / 2.0);

        // fprintf(stderr,"%.5f\\n",(dbresp/maxdB+1.0)*maxy/2.0);

        return idbresp;} {}
  }
  Function {getfreqx(float x)} {return_type float
  } {
    code {if (x > 1.0)
            x = 1.0;
        return 20.0 * powf(1000.0, x);} {}
  }
  Function {getfreqpos(float freq)} {return_type float
  } {
    code {if (freq < 0.00001)
            freq = 0.00001;
        return logf(freq / 20.0) / logf(1000.0);} {}
  }
  decl {int oldx,oldy;} {private local
  }
  decl {float khzval;} {public local
  }
  decl {EffectMgr *eff;} {private local
  }
  decl {int maxdB;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class EffUI {selected : {public Fl_Group,public PresetsUI_}
} {
  Function {EffUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {//
    eff = NULL;
    filterwindow = NULL;
    fwin_filterui = NULL;} {}
  }
  Function {~EffUI()} {} {
    code {effnullwindow->hide();        // delete (effnullwindow);
        effreverbwindow->hide();        // delete (effreverbwindow);
        effechowindow->hide();          // delete (effechowindow);
        effchoruswindow->hide();        // delete (effchoruswindow);
        effphaserwindow->hide();        // delete (effphaserwindow);
        effalienwahwindow->hide();      // delete (effalienwahwindow);
        effdistorsionwindow->hide();    // delete (effdistorsionwindow);
        effeqwindow->hide();            // delete (effeqwindow);
        effdynamicfilterwindow->hide(); // delete (effdynamicfilterwindow);

        if (filterwindow != NULL)
        {
            filterwindow->hide();
            delete(filterwindow);
        }} {}
  }
  Function {make_null_window()} {} {
    Fl_Window effnullwindow {
      xywh {915 700 379 95} type Double box PLASTIC_THIN_UP_BOX color 221 hide
      class Fl_Group
    } {
      Fl_Text_Display {} {
        label {No Effects Applied}
        xywh {120 35 10 20} box NO_BOX labelfont 1 labelcolor 37 align 8
      }
    }
  }
  Function {make_reverb_window()} {} {
    Fl_Window effreverbwindow {
      xywh {1005 24 375 95} type Double box PLASTIC_UP_BOX color 221 labelsize 12 align 33 hide
      class Fl_Group
    } {
      Fl_Text_Display {} {
        label {Reverb }
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 labelcolor 36 align 8
      }
      Fl_Choice revp {
        label Preset
        callback {//
        send_data(16, o->value(), 1, 0xd0);}
        xywh {115 13 90 15} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
      } {
        MenuItem {} {
          label {Cathedral 1}
          xywh {10 10 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Cathedral 2}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Cathedral 3}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Hall 1}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Hall 2}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Room 1}
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Room 2}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Basement
          xywh {80 80 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Tunnel
          xywh {90 90 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echoed 1}
          xywh {100 100 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echoed 2}
          xywh {110 110 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Very Long 1}
          xywh {120 120 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Very Long 2}
          xywh {130 130 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Choice revp10 {
        label Type
        callback {//
        send_data(10, o->value(), 1, 0xd0);}
        xywh {240 13 75 15} down_box BORDER_BOX color 14 labelsize 11 textsize 11 textcolor 7
      } {
        MenuItem {} {
          label Random
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Freeverb
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Bandwidth
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial revp0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 1, 0xd8);}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXReverbVol);}
        class WidgetPDial
      }
      Fl_Dial revp1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_PanningStd);}
        class WidgetPDial
      }
      Fl_Dial revp2 {
        label Time
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        tooltip {Duration of Effect} xywh {80 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXReverbTime);}
        class WidgetPDial
      }
      Fl_Dial revp3 {
        label {I.del}
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        tooltip {Initial Delay} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXReverbIDelay);}
        class WidgetPDial
      }
      Fl_Dial revp4 {
        label {I.delfb}
        callback {//
        int butt = 4;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        tooltip {Initial Delay Feedback} xywh {155 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent128);}
        class WidgetPDial
      }
      Fl_Dial revp12 {
        label BW
        callback {//
        int butt = 12;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        xywh {200 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127 deactivate
        code0 {if (eff->geteffectpar(10)==2) o->activate();}
        code1 {o->init(-1);}
        code2 {o->setValueType(VC_FXReverbBandwidth);}
        class WidgetPDial
      }
      Fl_Dial revp6 {
        label {E/R}
        callback {//
        int butt = 6;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        xywh {235 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127 deactivate
        code0 {o->init(0);}
        class WidgetPDial
      }
      Fl_Dial revp7 {
        label LPF
        callback {//
        int butt = 7;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        tooltip {Low Pass Filter} xywh {270 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXReverbLowPass);}
        class WidgetPDial
      }
      Fl_Dial revp8 {
        label HPF
        callback {//
        int butt = 8;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        tooltip {High Pass Filter} xywh {305 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXReverbHighPass);}
        class WidgetPDial
      }
      Fl_Dial revp9 {
        label Damp
        callback {//
        int butt = 9;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd8);}
        tooltip Dampening xywh {340 40 30 30} box ROUND_UP_BOX labelsize 11 minimum 64 maximum 127 step 1
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent64_127);}
        class WidgetPDial
      }
      Fl_Dial revp11 {
        label {R.S.}
        callback {//
        int butt = 11;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 1, 0xd0);}
        tooltip RoomSize xywh {342 8 25 25} box ROUND_UP_BOX labelsize 10 align 4 minimum 1 maximum 127 step 1
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
    }
  }
  Function {make_echo_window()} {} {
    Fl_Window effechowindow {
      xywh {1006 149 379 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 labelsize 12 hide
      class Fl_Group
    } {
      Fl_Choice echop {
        label Preset
        callback {//
        send_data(16, o->value(), 2, 0xd0);}
        xywh {102 13 96 15} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
      } {
        MenuItem {} {
          label {Echo 1}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echo 2}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echo 3}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Simple Echo}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Canyon
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Panning Echo 1}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Panning Echo 2}
          xywh {80 80 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Panning Echo 3}
          xywh {90 90 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Feedback Echo}
          xywh {100 100 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label Echo
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial echop0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 2, 0xd8);}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXEchoVol);}
        class WidgetPDial
      }
      Fl_Dial echop1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 2, 0xd8);}
        xywh {59 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_PanningStd);}
        class WidgetPDial
      }
      Fl_Dial echop2 {
        label Delay
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 2, 0xd8);}
        xywh {111 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXEchoDelay);}
        class WidgetPDial
      }
      Fl_Dial echop3 {
        label {LRdl.}
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 2, 0xd8);}
        tooltip {Delay Between L/R} xywh {164 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXEchoLRdel);}
        class WidgetPDial
      }
      Fl_Dial echop4 {
        label {LRc.}
        callback {//
        int butt = 4;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 2, 0xd8);}
        tooltip {L/R Crossover} xywh {218 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Dial echop5 {
        label {Fb.}
        callback {//
        int butt = 5;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 2, 0xd8);}
        tooltip Feedback xywh {273 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Dial echop6 {
        label Damp
        callback {//
        int butt = 6;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 2, 0xd8);}
        tooltip Dampening xywh {334 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
    }
  }
  Function {make_chorus_window()} {} {
    Fl_Window effchoruswindow {
      xywh {1007 275 379 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice chorusp {
        label Preset
        callback {//
        send_data(16, o->value(), 3, 0xd0);}
        xywh {121 13 96 16} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
      } {
        MenuItem {} {
          label {Chorus 1}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Chorus 2}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Chorus 3}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Celeste 1}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Celeste 2}
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 1}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 2}
          xywh {80 80 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 3}
          xywh {90 90 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 4}
          xywh {100 100 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 5}
          xywh {110 110 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label Chorus
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial chorusp0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 3, 0xd8);}
        xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXdefaultVol);}
        class WidgetPDial
      }
      Fl_Dial chorusp1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_PanningStd);}
        class WidgetPDial
      }
      Fl_Dial chorusp2 {
        label Freq
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXlfofreq);}
        class WidgetPDial
      }
      Fl_Dial chorusp3 {
        label Rnd
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Dial chorusp5 {
        label {St.df}
        callback {//
        int butt = 5;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        tooltip {L/R Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXlfoStereo);}
        class WidgetPDial
      }
      Fl_Dial chorusp6 {
        label Dpth
        callback {//
        int butt = 6;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        tooltip {LFO Depth} xywh {235 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXChorusDepth);}
        class WidgetPDial
      }
      Fl_Dial chorusp7 {
        label Delay
        callback {//
        int butt = 7;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        xywh {270 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXChorusDelay);}
        class WidgetPDial
      }
      Fl_Dial chorusp8 {
        label Fb
        callback {//
        int butt =8;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        tooltip Feedback xywh {305 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXdefaultFb);}
        class WidgetPDial
      }
      Fl_Dial chorusp9 {
        label {L/R}
        callback {//
        int butt = 9;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 3, 0xd8);}
        tooltip {Channel Routing} xywh {340 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Check_Button {} {
        label Flange
        callback {//
        send_data(10, o->value(), 3, 0xd0);}
        xywh {120 10 55 20} box THIN_UP_BOX down_box DOWN_BOX color 230 labelfont 1 labelsize 10 hide deactivate
        code0 {o->value(eff->geteffectpar(10));}
      }
      Fl_Check_Button chorusp11 {
        label Subtract
        callback {//
        send_data(11, o->value(), 3, 0xd0);}
        tooltip {inverts the output} xywh {232 13 83 16} box THIN_UP_BOX down_box DOWN_BOX color 230 labelsize 11
      }
      Fl_Choice chorusp4 {
        label {LFO type}
        callback {//
        send_data(4, o->value(), 3, 0xd0);}
        tooltip {LFO function} xywh {154 50 43 15} down_box BORDER_BOX labelsize 10 align 130 textsize 8
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
    }
  }
  Function {make_phaser_window()} {} {
    Fl_Window effphaserwindow {
      xywh {991 245 375 95} type Double box PLASTIC_UP_BOX color 221 labelsize 11 hide
      class Fl_Group
    } {
      Fl_Choice phaserp {
        label Preset
        callback {//
        send_data(16, o->value(), 4, 0xd0);}
        xywh {80 21 82 15} box UP_BOX down_box BORDER_BOX color 31 selection_color 7 labelsize 11 align 1 textsize 11
      } {
        MenuItem {} {
          label {Phaser 1}
          xywh {30 30 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 2}
          xywh {40 40 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 3}
          xywh {50 50 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 4}
          xywh {60 60 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 5}
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 6}
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 1}
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 2}
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 3}
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 4}
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 5}
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 6}
          xywh {95 95 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Text_Display {} {
        label Phaser
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial phaserp0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 4, 0xd8);}
        tooltip {Effect Volume} xywh {10 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXdefaultVol);}
        class WidgetPDial
      }
      Fl_Dial phaserp1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        xywh {48 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_PanningStd);}
        class WidgetPDial
      }
      Fl_Dial phaserp2 {
        label Freq
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip {LFO frequency} xywh {86 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXlfofreq);}
        class WidgetPDial
      }
      Fl_Dial phaserp3 {
        label Rnd
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip {LFO randomness} xywh {124 50 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Choice phaserp4 {
        label LFO
        callback {//
        send_data(4, o->value(), 4, 0xd0);}
        tooltip {LFO function} xywh {314 60 50 16} down_box BORDER_BOX labelsize 10 align 130 textsize 8
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial phaserp5 {
        label {St.df}
        callback {//
        int butt = 5;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip {Left/Right Channel Phase Shift} xywh {162 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXlfoStereo);}
        class WidgetPDial
      }
      Fl_Dial phaserp6 {
        label Depth
        callback {//
        int butt = 6;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip {LFO Depth} xywh {181 15 30 30} box ROUND_UP_BOX labelsize 11 align 1 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Dial phaserp7 {
        label Fb
        callback {//
        int butt = 7;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip Feedback xywh {200 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXdefaultFb);}
        class WidgetPDial
      }
      Fl_Counter phaserp8 {
        label Stages
        callback {//
        send_data(8, o->value(), 4, 0xd0);}
        xywh {265 23 35 15} type Simple labelsize 11 align 1 minimum 0 maximum 127 step 1 textfont 1 textsize 11
        code0 {o->range(1,MAX_PHASER_STAGES);}
      }
      Fl_Dial phaserp9 {
        label {L/R}
        callback {//
        int butt = 9;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip {Channel Routing} xywh {238 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Check_Button phaserp10 {
        label Subtract
        callback {//
        send_data(10, o->value(), 4, 0xd0);}
        tooltip {inverts output} xywh {314 9 40 16} down_box DOWN_BOX color 230 labelsize 11
      }
      Fl_Dial phaserp11 {
        label Phase
        callback {//
        int butt = 11;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        xywh {219 15 30 30} box ROUND_UP_BOX labelsize 11 align 1 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Check_Button phaserp12 {
        label hyper
        callback {//
        send_data(12, o->value(), 4, 0xd0);}
        tooltip {hyper-sine} xywh {314 25 55 15} down_box DOWN_BOX labelsize 11
      }
      Fl_Dial phaserp13 {
        label dist
        callback {//
        int butt = 13;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 4, 0xd8);}
        tooltip Distortion xywh {276 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Check_Button phaserp14 {
        label Analog
        callback {//
        send_data(14, o->value(), 4, 0xd0);}
        tooltip {Emulates FET} xywh {314 40 70 15} down_box DOWN_BOX labelsize 11
      }
    }
  }
  Function {make_alienwah_window()} {} {
    Fl_Window effalienwahwindow {
      xywh {1013 520 379 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice awp {
        label Preset
        callback {//
        send_data(16, o->value(), 5, 0xd0);}
        xywh {135 13 96 15} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textfont 1 textsize 11 textcolor 7
      } {
        MenuItem {} {
          label {Alienwah 1}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Alienwah 2}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Alienwah 3}
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Alienwah 4}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label AlienWah
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial awp0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 5, 0xd8);}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp2 {
        label Freq
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp3 {
        label Rnd
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp5 {
        label {St.df}
        callback {//
        int butt = 5;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        tooltip {Left/Right Channel Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp6 {
        label Dpth
        callback {//
        int butt = 6;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        tooltip Depth xywh {235 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp7 {
        label Fb
        callback {//
        int butt = 7;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        tooltip Feedback xywh {270 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial awp9 {
        label {L/R}
        callback {//
        int butt = 9;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        xywh {345 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Choice awp4 {
        label {LFO type}
        callback {//
        send_data(4, o->value(), 5, 0xd0);}
        tooltip {LFO function} xywh {155 50 43 15} down_box BORDER_BOX labelsize 10 align 130 textsize 8
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial awp10 {
        label Phase
        callback {//
        int butt = 10;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 5, 0xd8);}
        xywh {309 8 26 26} box ROUND_UP_BOX labelsize 11 align 4 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Counter awp8 {
        label Delay
        callback {//
        send_data(8, o->value(), 5, 0xd0);}
        xywh {305 55 35 15} type Simple labelsize 11 minimum 0 maximum 127 step 1 textsize 11
        code0 {o->range(1,MAX_ALIENWAH_DELAY);}
      }
    }
  }
  Function {make_distorsion_window()} {} {
    Fl_Window effdistorsionwindow {
      xywh {1013 641 379 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice distp {
        label Preset
        callback {//
        send_data(16, o->value(), 6, 0xd0);}
        xywh {139 13 96 16} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
      } {
        MenuItem {} {
          label {Overdrive 1}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Overdrive 2}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {A. Exciter 1}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {A. Exciter 2}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Guitar Amp}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Quantisize
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label Distortion
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial distp0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 6, 0xd8);}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXDistVol);}
        class WidgetPDial
      }
      Fl_Dial distp1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 6, 0xd8);}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_PanningStd);}
        class WidgetPDial
      }
      Fl_Dial distp2 {
        label {LRc.}
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 6, 0xd8);}
        tooltip {L/R Mix} xywh {80 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Dial distp3 {
        label Drive
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 6, 0xd8);}
        tooltip {Input Amplification} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_percent127);}
        class WidgetPDial
      }
      Fl_Dial distp4 {
        label Level
        callback {//
        int butt = 4;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 6, 0xd8);}
        tooltip {Output Amplification} xywh {155 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXDistLevel);}
        class WidgetPDial
      }
      Fl_Dial distp7 {
        label LPF
        callback {//
        int butt = 7;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 6, 0xd8);}
        tooltip {Low Pass Filter} xywh {285 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXDistLowPass);}
        class WidgetPDial
      }
      Fl_Dial distp8 {
        label HPF
        callback {//
        int butt = 8;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 6, 0xd8);}
        tooltip {High Pass Filter} xywh {320 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        code1 {o->setValueType(VC_FXDistHighPass);}
        class WidgetPDial
      }
      Fl_Choice distp5 {
        label Type
        callback {//
        send_data(5, o->value(), 6, 0xd0);}
        xywh {190 50 60 20} box UP_BOX down_box BORDER_BOX labelsize 11 align 2 textsize 10
      } {
        MenuItem {} {
          label Atan
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Asym1
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Pow
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Sine
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Qnts
          xywh {95 95 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Zigzg
          xywh {105 105 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Lmt
          xywh {115 115 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label LmtU
          xywh {125 125 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label LmtL
          xywh {135 135 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label ILmt
          xywh {147 147 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Clip
          xywh {157 157 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Asym2
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Pow2
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Sgm
          xywh {95 95 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Check_Button distp6 {
        label {Neg.}
        callback {//
        send_data(6, o->value(), 6, 0xd0);}
        xywh {260 55 15 15} down_box DOWN_BOX labelsize 11 align 2
      }
      Fl_Check_Button distp9 {
        label {St.}
        callback {//
        send_data(9, o->value(), 6, 0xd0);}
        tooltip Stereo xywh {355 60 15 15} down_box DOWN_BOX labelsize 11 align 2
      }
      Fl_Check_Button distp10 {
        label PF
        callback {//
        send_data(10, o->value(), 6, 0xd0);}
        tooltip {Applies the filters(before or after) the distortion} xywh {355 44 15 15} down_box DOWN_BOX labelsize 11 align 1
      }
    }
  }
  Function {make_eq_window()} {} {
    Fl_Window effeqwindow {
      xywh {1010 762 375 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Text_Display {} {
        label EQ
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial eqp0 {
        label Gain
        callback {//
        send_data(0, o->value(), 7, 0xd8);}
        xywh {10 41 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(67);}
        code1 {o->setValueType(VC_FXEQgain);}
        class WidgetPDial
      }
      Fl_Counter bandcounter {
        label {B.}
        callback {//
        send_data(1, o->value(), 7, 0xd0);}
        tooltip {Band no.} xywh {263 20 45 15} type Simple labelsize 11 align 1 minimum 0 maximum 1 step 1 textsize 11
        code0 {o->bounds(0,MAX_EQ_BANDS-1);}
      }
      Fl_Group bandgroup {
        xywh {245 40 130 50} box ENGRAVED_FRAME
        code0 {if (eff->geteffectpar(10)==0) o->deactivate();}
      } {
        Fl_Dial freqdial {
          label Freq
          callback {//;
          send_data(11, o->value(), 7, 0xd8);}
          xywh {250 50 25 25} box ROUND_UP_BOX labelsize 10 when 3 maximum 127
          code0 {o->init(64);}
          code1 {o->setValueType(VC_FXEQfreq);}
          class WidgetPDial
        }
        Fl_Dial gaindial {
          label Gain
          callback {//
          send_data(12, o->value(), 7, 0xd8);}
          xywh {280 50 25 25} box ROUND_UP_BOX labelsize 10 when 3 maximum 127 step 1
          code0 {o->init(64);}
          code1 {o->setValueType(VC_FXEQfilterGain);}
          class WidgetPDial
        }
        Fl_Dial qdial {
          label Q
          callback {//
          send_data(13, o->value(), 7, 0xd8);}
          tooltip {Resonance/Bandwidth} xywh {310 50 25 25} box ROUND_UP_BOX labelsize 10 when 3 maximum 127
          code0 {o->init(64);}
          code1 {o->setValueType(VC_FXEQq);}
          class WidgetPDial
        }
        Fl_Counter stagescounter {
          label {St.}
          callback {//
          send_data(14, o->value(), 7, 0xd0);}
          tooltip {Additional filter stages} xywh {340 60 30 15} type Simple labelsize 10 minimum 1 maximum 127 step 1 textfont 1 textsize 11
          code0 {o->bounds(0,MAX_FILTER_STAGES-1);}
        }
      }
      Fl_Choice typechoice {
        label {T.}
        callback {//
        send_data(10, o->value(), 7, 0xd0);}
        tooltip Type xywh {323 20 40 15} down_box BORDER_BOX labelsize 11 align 1 when 6 textsize 11
      } {
        MenuItem {} {
          label OFF
          xywh {0 0 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Lp1
          xywh {10 10 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Hp1
          xywh {20 20 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Lp2
          xywh {30 30 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Hp2
          xywh {40 40 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Bp2
          xywh {50 50 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label N2
          xywh {60 60 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Pk
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label LSh
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label HSh
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Box eqgraph {
        xywh {45 10 190 75} box BORDER_BOX color 178
        code0 {o->init(eff);}
        class EQGraph
      }
    }
  }
  Function {make_dynamicfilter_window()} {} {
    Fl_Window effdynamicfilterwindow {
      xywh {1009 883 375 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice dfp {
        label Preset
        callback {//
        send_data(16, o->value(), 8, 0xd0);}
        xywh {132 13 90 16} down_box BORDER_BOX color 14 selection_color 0 labelsize 10 textsize 10 textcolor 7
      } {
        MenuItem {} {
          label WahWah
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label AutoWah
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Sweep
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label VocalMorph1
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label VocalMorph2
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label DynFilter
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial dfp0 {
        label Vol
        callback {//
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | 0xf0);
            o->value(eff->geteffectpar(0));
        }

        send_data(0, o->value(), 8, 0xd8);}
        tooltip {Effect Volume} xywh {6 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial dfp1 {
        label Pan
        callback {//
        int butt = 1;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 8, 0xd8);}
        xywh {42 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial dfp2 {
        label Freq
        callback {//
        int butt = 2;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 8, 0xd8);}
        tooltip {LFO Frequency} xywh {80 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial dfp3 {
        label Rnd
        callback {//
        int butt = 3;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 8, 0xd8);}
        tooltip {LFO Randomness} xywh {118 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial dfp5 {
        label {St.df}
        callback {int butt = 5;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 8, 0xd8);}
        tooltip {Left/Right Channel Phase Shift} xywh {205 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Dial dfp6 {
        label LfoD
        callback {int butt = 6;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 8, 0xd8);}
        tooltip {LFO Depth} xywh {240 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code0 {o->init(-1);}
        class WidgetPDial
      }
      Fl_Choice dfp4 {
        label {LFO type}
        callback {//
        send_data(4, o->value(), 8, 0xd0);}
        tooltip {LFO function} xywh {152 55 48 15} down_box BORDER_BOX labelsize 10 align 130 textsize 8
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Button {} {
        label Filter
        callback {filterwindow->show();}
        xywh {235 13 37 16} box PLASTIC_THIN_UP_BOX labelsize 11
      }
      Fl_Group {} {
        xywh {275 33 100 53} box EMBOSSED_BOX color 181
      } {
        Fl_Dial dfp7 {
          label {A.S.}
          callback {int butt = 7;
        if (Fl::event_button() == 3)
        {
            eff->changepreset(eff->getpreset() | (butt << 4));
            o->value(eff->geteffectpar(butt));
        }

        send_data(butt, o->value(), 8, 0xd8);}
          tooltip {Filter vs Amplitude} xywh {280 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
          code0 {o->init(-1);}
          class WidgetPDial
        }
        Fl_Dial dfp9 {
          label {A.M}
          callback {int butt = 9;
          if (Fl::event_button() == 3)
          {
              eff->changepreset(eff->getpreset() | (butt << 4));
              o->value(eff->geteffectpar(butt));
          }

          send_data(butt, o->value(), 8, 0xd8);}
          tooltip {rate that  amplitude changes the filter} xywh {316 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
          code0 {o->init(-1);}
          class WidgetPDial
        }
        Fl_Check_Button dfp8 {
          label {Inv.}
          callback {//
          send_data(8, o->value(), 8, 0xd0);}
          tooltip {enable for filter frequency to lower with higher input amplitude} xywh {352 55 15 15} down_box DOWN_BOX labelsize 11 align 2
        }
      }
    }
  }
  Function {make_filter_window()} {} {
    Fl_Window filterwindow {
      label {Filter Parameters for DynFilter Eff.}
      xywh {1109 779 290 110} type Double hide
    } {
      Fl_Group fwin_filterui {
        label {DynFilter effect  - Filter} open
        xywh {5 5 275 75} box FLAT_BOX color 50 labelsize 12 align 144
        code0 {o->init(eff->filterpars,NULL,NULL, npart, 0x88, neff);}
        code1 {o->use_for_dynamic_filter();}
        class FilterUI
      } {}
      Fl_Button {} {
        label Close
        callback {filterwindow->hide();}
        xywh {124 86 46 20} box THIN_UP_BOX labelsize 12
      }
    }
  }
  Function {send_data(int control, float value, int group, int type)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, npart, group | 0x80, neff);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char efftype = getData->data.kit & 0x7f;
    bool isdynfilter = (getData->data.engine == 0x88);

    //cout << "cont " << (int)control << "  type " << (int)efftype << "  num " << (int)effnum << endl;
    switch(efftype)
    {
        case 0: // no effect
            break;

        case 1: // reverb
            switch (control)
            {
                case 0:
                    revp0->value(value);
                    break;
                case 1:
                    revp1->value(value);
                    break;
                case 2:
                    revp2->value(value);
                    break;
                case 3:
                    revp3->value(value);
                    break;
                case 4:
                    revp4->value(value);
                    break;
                case 6:
                    revp6->value(value);
                    break;
                case 7:
                    revp7->value(value);
                    break;
                case 8:
                    revp8->value(value);
                    break;
                case 9:
                    revp9->value(value);
                    break;
                case 10:
                    revp10->value(value);
                    if (value ==2)
                        revp12->activate();
                    else
                        revp12->deactivate();
                    break;
                case 11:
                    revp11->value(value);
                    break;
                case 12:
                    revp12->value(value);
                    break;
                case 16:
                refresh();
                break;

            }
            break;

        case 2: // echo
            switch (control)
            {
                case 0:
                    echop0->value(value);
                    break;
                case 1:
                    echop1->value(value);
                    break;
                case 2:
                    echop2->value(value);
                    break;
                case 3:
                    echop3->value(value);
                    break;
                case 4:
                    echop4->value(value);
                    break;
                case 5:
                    echop5->value(value);
                    break;
                case 6:
                    echop6->value(value);
                    break;
                case 16:
                    refresh();
                    break;
            }
            break;

        case 3: // chorus
            switch (control)
            {
                case 0:
                    chorusp0->value(value);
                    break;
                case 1:
                    chorusp1->value(value);
                    break;
                case 2:
                    chorusp2->value(value);
                    break;
                case 3:
                    chorusp3->value(value);
                    break;
                case 5:
                    chorusp5->value(value);
                    break;
                case 6:
                    chorusp6->value(value);
                    break;
                case 7:
                    chorusp7->value(value);
                    break;
                case 8:
                    chorusp8->value(value);
                    break;
                case 9:
                    chorusp9->value(value);
                    break;
                case 16:
                    refresh();
                    break;
            }
            break;

        case 4: // phaser
            switch (control)
            {
                case 0:
                    phaserp0->value(value);
                    break;
                case 1:
                    phaserp1->value(value);
                    break;
                case 2:
                    phaserp2->value(value);
                    break;
                case 3:
                    phaserp3->value(value);
                    break;
                case 5:
                    phaserp5->value(value);
                    break;
                case 6:
                    phaserp6->value(value);
                    break;
                case 7:
                   phaserp7->value(value);
                    break;
                case 9:
                    phaserp9->value(value);
                    break;
                case 11:
                    phaserp11->value(value);
                    break;
                case 13:
                    phaserp13->value(value);
                    break;
                case 16:
                    refresh();
                    break;
            }
            break;

        case 5: // alien wah
            switch (control)
            {
                case 0:
                    awp0->value(value);
                    break;
                case 1:
                    awp1->value(value);
                    break;
                case 2:
                    awp2->value(value);
                    break;
                case 3:
                    awp3->value(value);
                    break;
                case 5:
                    awp5->value(value);
                    break;
                case 6:
                    awp6->value(value);
                    break;
                case 7:
                    awp7->value(value);
                    break;
                case 9:
                    awp9->value(value);
                    break;
                case 10:
                    awp10->value(value);
                    break;
                case 16:
                    refresh();
                    break;
            }
            break;

        case 6: // distortion
            switch (control)
            {
                case 0:
                    distp0->value(value);
                    break;
                case 1:
                    distp1->value(value);
                    break;
                case 2:
                    distp2->value(value);
                    break;
                case 3:
                    distp3->value(value);
                    break;
                case 4:
                    distp4->value(value);
                    break;
                case 7:
                    distp7->value(value);
                    break;
                case 8:
                    distp8->value(value);
                    break;
                case 16:
                    refresh();
                    break;
            }
            break;

        case 7: // EQ
            //synth->getRuntime().Log("EQ " + to_string(int(value)) + "  " + to_string(int(control)));
            if(control == 0)
            {
                eqp0->value(value);
            }
            else if (control == 1)
            {
                eqband = value;
                EQbandUpdate();
            }
            else
            {
                switch (control)
                {
                case 10:
                    typechoice->value(value);
                    if (value == 0)
                        bandgroup->deactivate();
                    else
                        bandgroup->activate();
                    if (value > 2)
                        qdial->activate();
                    else
                        qdial->deactivate();
                    if (value > 6)
                        gaindial->activate();
                    else
                        gaindial->deactivate();
                    break;
                case 11:
                    freqdial->value(value);
                    break;
                case 12:
                    gaindial->value(value);
                    break;
                case 13:
                    qdial->value(value);
                    break;
                case 14:
                    stagescounter->value(value);
                }
            }
            effeqwindow->redraw();
            break;

        case 8:
            if(isdynfilter)
            {
                //synth->getRuntime().Log("DyneFilter" );
                return;
            }
            switch (control)
            {
                case 0:
                    dfp0->value(value);
                    break;
                case 1:
                    dfp1->value(value);
                    break;
                case 2:
                    dfp2->value(value);
                    break;
                case 3:
                    dfp3->value(value);
                    break;
                case 5:
                    dfp5->value(value);
                    break;
                case 6:
                    dfp6->value(value);
                    break;
                case 7:
                    dfp7->value(value);
                    break;
                case 8:
                    dfp8->value(value);
                    break;
                case 9:
                    dfp9->value(value);
                    break;
                case 16:
                    refresh();
                    break;
            }
            break;
    }} {}
  }
  Function {init(EffectMgr *eff_, int npart_, int neff_)} {} {
    code {//
    eff=eff_;
    npart = npart_;
    neff = neff_;
    synth = eff->getSynthEngine();

    make_null_window();
    make_reverb_window();
    make_echo_window();
    make_chorus_window();
    make_phaser_window();
    make_alienwah_window();
    make_distorsion_window();
    make_eq_window();
    make_dynamicfilter_window();

    int px=this->parent()->x();
    int py=this->parent()->y();

    effnullwindow->position(px,py);
    effreverbwindow->position(px,py);
    effechowindow->position(px,py);
    effchoruswindow->position(px,py);
    effphaserwindow->position(px,py);
    effalienwahwindow->position(px,py);
    effdistorsionwindow->position(px,py);
    effeqwindow->position(px,py);
    effdynamicfilterwindow->position(px,py);

    refresh(eff, npart, neff);} {}
  }
  Function {refresh(EffectMgr *eff_, int npart_, int neff_)} {} {
    code {//
    eff = eff_;
    npart = npart_;
    neff = neff_;
    this->hide();
    effnullwindow->hide();
    effreverbwindow->hide();
    effechowindow->hide();
    effchoruswindow->hide();
    effphaserwindow->hide();
    effalienwahwindow->hide();
    effdistorsionwindow->hide();
    effeqwindow->hide();
    effdynamicfilterwindow->hide();
    eqband=0;
    if (filterwindow != NULL)
    {
        filterwindow->hide();
        delete(filterwindow);
        filterwindow=NULL;
    }
    switch(eff->geteffect())
    {
        case 1:
            revp->value(eff->getpreset());
            revp0->value(eff->geteffectpar(0));
            if (eff->insertion != 0)
            {
                revp0->label("D/W");
                revp0->setValueType(VC_FXReverbDW);
            }
            revp1->value(eff->geteffectpar(1));
            revp2->value(eff->geteffectpar(2));
            revp3->value(eff->geteffectpar(3));
            revp4->value(eff->geteffectpar(4));
            revp6->value(eff->geteffectpar(6));
            revp7->value(eff->geteffectpar(7));
            revp8->value(eff->geteffectpar(8));
            revp9->value(eff->geteffectpar(9));
            revp10->value(eff->geteffectpar(10));
            revp11->value(eff->geteffectpar(11));
            revp12->value(eff->geteffectpar(12));
            effreverbwindow->show();
            break;
        case 2:
            echop->value(eff->getpreset());
            echop0->value(eff->geteffectpar(0));
            if (eff->insertion != 0)
            {
                echop0->label("D/W");
                echop0->setValueType(VC_FXEchoDW);
            }
            echop1->value(eff->geteffectpar(1));
            echop2->value(eff->geteffectpar(2));
            echop3->value(eff->geteffectpar(3));
            echop4->value(eff->geteffectpar(4));
            echop5->value(eff->geteffectpar(5));
            echop6->value(eff->geteffectpar(6));
            effechowindow->show();
            break;
        case 3:
            chorusp->value(eff->getpreset());
            chorusp0->value(eff->geteffectpar(0));
            if (eff->insertion != 0)
            {
                chorusp0->label("D/W");
                chorusp0->setValueType(VC_FXdefaultDW);
            }
            chorusp1->value(eff->geteffectpar(1));
            chorusp2->value(eff->geteffectpar(2));
            chorusp3->value(eff->geteffectpar(3));
            chorusp4->value(eff->geteffectpar(4));
            chorusp5->value(eff->geteffectpar(5));
            chorusp6->value(eff->geteffectpar(6));
            chorusp7->value(eff->geteffectpar(7));
            chorusp8->value(eff->geteffectpar(8));
            chorusp9->value(eff->geteffectpar(9));
            chorusp11->value(eff->geteffectpar(11));
            effchoruswindow->show();
            break;
        case 4:
            phaserp->value(eff->getpreset());
            phaserp0->value(eff->geteffectpar(0));
            if (eff->insertion != 0)
            {
                phaserp0->label("D/W");
                phaserp0->setValueType(VC_FXdefaultDW);
            }
            phaserp1->value(eff->geteffectpar(1));
            phaserp2->value(eff->geteffectpar(2));
            phaserp3->value(eff->geteffectpar(3));
            phaserp4->value(eff->geteffectpar(4));
            phaserp5->value(eff->geteffectpar(5));
            phaserp6->value(eff->geteffectpar(6));
            phaserp7->value(eff->geteffectpar(7));
            phaserp8->value(eff->geteffectpar(8));
            phaserp9->value(eff->geteffectpar(9));
            phaserp10->value(eff->geteffectpar(10));
            phaserp11->value(eff->geteffectpar(11));
            phaserp12->value(eff->geteffectpar(12));
            phaserp13->value(eff->geteffectpar(13));
            phaserp14->value(eff->geteffectpar(14));
            effphaserwindow->show();
            break;
        case 5:
            awp->value(eff->getpreset());
            awp0->value(eff->geteffectpar(0));
            if (eff->insertion != 0)
                awp0->label("D/W");
            awp1->value(eff->geteffectpar(1));
            awp2->value(eff->geteffectpar(2));
            awp3->value(eff->geteffectpar(3));
            awp4->value(eff->geteffectpar(4));
            awp5->value(eff->geteffectpar(5));
            awp6->value(eff->geteffectpar(6));
            awp7->value(eff->geteffectpar(7));
            awp8->value(eff->geteffectpar(8));
            awp9->value(eff->geteffectpar(9));
            awp10->value(eff->geteffectpar(10));
            effalienwahwindow->show();
            break;
        case 6:
            distp->value(eff->getpreset());
            distp0->value(eff->geteffectpar(0));
            if (eff->insertion != 0)
            {
                distp0->label("D/W");
                distp0->setValueType(VC_FXdefaultDW);
            }
            distp1->value(eff->geteffectpar(1));
            distp2->value(eff->geteffectpar(2));
            distp3->value(eff->geteffectpar(3));
            distp4->value(eff->geteffectpar(4));
            distp5->value(eff->geteffectpar(5));
            distp6->value(eff->geteffectpar(6));
            distp7->value(eff->geteffectpar(7));
            distp8->value(eff->geteffectpar(8));
            distp9->value(eff->geteffectpar(9));
            distp10->value(eff->geteffectpar(10));
            effdistorsionwindow->show();
            break;
        case 7:
            eqband = 0;
            eqp0->value(eff->geteffectpar(0));
            bandcounter->value(eqband);
            bandcounter->do_callback();
            typechoice->value(eff->geteffectpar(10));
            eqgraph->redraw();
            freqdial->value(eff->geteffectpar(11));
            gaindial->value(eff->geteffectpar(12));
            if (eff->geteffectpar(10) < 6)
                gaindial->deactivate();
            qdial->value(eff->geteffectpar(13));
            stagescounter->value(eff->geteffectpar(14));
            eqgraph->init(eff);
            effeqwindow->show();
            break;
        case 8:
            make_filter_window();
            dfp->value(eff->getpreset());
            dfp0->value(eff->geteffectpar(0));
            if (eff->insertion!=0)
                dfp0->label("D/W");
            dfp1->value(eff->geteffectpar(1));
            dfp2->value(eff->geteffectpar(2));
            dfp3->value(eff->geteffectpar(3));
            dfp4->value(eff->geteffectpar(4));
            dfp5->value(eff->geteffectpar(5));
            dfp6->value(eff->geteffectpar(6));
            dfp7->value(eff->geteffectpar(7));
            dfp8->value(eff->geteffectpar(8));
            dfp9->value(eff->geteffectpar(9));
            effdynamicfilterwindow->show();
            break;
        default:
            effnullwindow->show();
            break;
    }
    this->show();} {}
  }
  Function {refresh()} {} {
    code {refresh(eff, npart, neff);} {}
  }
  Function {EQbandUpdate()} {} {
    code {//
    int npb = eqband * 5 + 10;

    int type = eff->geteffectpar(npb);
    typechoice->value(type);

    if (type == 0)
        bandgroup->deactivate();
    else
        bandgroup->activate();

    if (type > 2)
        qdial->activate();
    else
        qdial->deactivate();

    if (type > 6)
        gaindial->activate();
    else
        gaindial->deactivate();

    int freq = eff->geteffectpar(npb + 1);
    freqdial->value(freq);

    int gain = eff->geteffectpar(npb + 2);
    gaindial->value(gain);

    int q = eff->geteffectpar(npb + 3);
    qdial->value(q);

    int dbl = eff->geteffectpar(npb + 4);
    stagescounter->value(dbl);} {}
  }
  decl {EffectMgr *eff;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int eqband;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int neff;} {private local
  }
}
