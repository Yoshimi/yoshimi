# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cc}
comment {EffUI.h} {not_in_source in_header
} 

comment {EffUI.cc} {in_source not_in_header
} 

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original, modified October 2010
} {in_source in_header
} 

decl {\#include <string>} {public local
} 

decl {\#include "WidgetPDialUI.h"} {public local
} 

decl {\#include "WidgetPCheckButtonUI.h"} {public local
} 

decl {\#include "WidgetPChoiceUI.h"} {public local
} 

decl {\#include "WidgetPCounterUI.h"} {public local
} 

decl {\#include "EnvelopeUI.h"} {public local
} 

decl {\#include "FilterUI.h"} {public local
} 

decl {\#include "Misc/ControllableByMIDIUI.h"} {public local
} 

decl {\#include "Misc/SynthEngine.h"} {public local
} 

decl {\#include "Effects/EffectMgr.h"} {public local
} 

decl {\#include "PresetsUI.h"} {public local
} 

class EQGraph {open : {public Fl_Box}
} {
  Function {EQGraph(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {open
  } {
    code {eff = NULL;
        maxdB = 30;} {}
  }
  Function {init(EffectMgr *eff_)} {open
  } {
    code {synth = eff_->getSynthEngine();
eff = eff_;
        oldx = -1;
        khzval = -1;} {}
  }
  Function {draw_freq_line(float freq, int type)} {open
  } {
    code {fl_color(FL_GRAY);
        float freqx = getfreqpos(freq);
        switch(type)
        {
            case 0:
                if (active_r())
                    fl_color(FL_WHITE);
                else
                    fl_color(205, 205, 205);
                fl_line_style(FL_SOLID);
                break;
            case 1:
                fl_line_style(FL_DOT);
                break;
            case 2:
                fl_line_style(FL_DASH);
                break;
        }

        if (freqx > 0.0 && freqx < 1.0)
        fl_line(x() + (int) (freqx * w()), y(),
            x() + (int) (freqx * w()), y( ) + h());} {}
  }
  Function {draw()} {open
  } {
    code {int ox = x(), oy = y(), lx = w(), ly = h(), i, iy, oiy;
        float freqx;

        if (active_r())
            fl_color(0, 70, 150);
        else
            fl_color(80, 120, 160);
        fl_rectf(ox, oy, lx, ly);

        // draw the lines
        fl_color(FL_GRAY);

        fl_line_style(FL_SOLID);
        fl_line(ox + 2, oy + ly / 2, ox + lx - 2, oy + ly / 2);

        freqx = getfreqpos(1000.0);
        if (freqx > 0.0 && freqx < 1.0)
            fl_line(ox + (int) (freqx * lx), oy,
                    ox + (int) (freqx * lx), oy + ly);

        for (i = 1; i < 10; ++i)
        {
            if(i == 1)
            {
                draw_freq_line(i * 100.0,0);
                draw_freq_line(i * 1000.0,0);
            }
            else
                if (i == 5)
                {
                    draw_freq_line(i * 10.0, 2);
                    draw_freq_line(i * 100.0, 2);
                    draw_freq_line(i * 1000.0, 2);
                }
                else
                {
                    draw_freq_line(i * 10.0, 1);
                    draw_freq_line(i * 100.0, 1);
                    draw_freq_line(i * 1000.0, 1);
                }
        }
        draw_freq_line(10000.0, 0);
        draw_freq_line(20000.0, 1);

        fl_line_style(FL_DOT);
        int GY = 6;
        if (ly < GY * 3)
            GY = -1;
        for (i = 1; i < GY; ++i)
        {
            int tmp = (int)(ly / (float)GY * i);
            fl_line(ox + 2, oy + tmp, ox + lx - 2, oy + tmp);
        }

        // draw the frequency response
        if (active_r())
            fl_color(FL_YELLOW);
        else
            fl_color(200, 200, 80);
        fl_line_style(FL_SOLID);
        oiy = getresponse(ly, getfreqx(0.0));
        float half_samplerate_f = synth->samplerate_f * 0.5f;
        for (i = 1; i < lx; ++i)
        {
            float frq = getfreqx(i / (float)lx);
            if (frq > half_samplerate_f)
                break;
            iy = getresponse(ly, frq);
            if (oiy >= 0 && oiy < ly && iy >= 0 && iy < ly)
                fl_line(ox + i - 1, oy + ly - oiy, ox + i, oy + ly - iy);
            oiy = iy;
        }} {}
  }
  Function {getresponse(int maxy,float freq)} {return_type int
  } {
    code {float dbresp = eff->getEQfreqresponse(freq);
        int idbresp = (int) ((dbresp / maxdB + 1.0) * maxy / 2.0);

        // fprintf(stderr,"%.5f\\n",(dbresp/maxdB+1.0)*maxy/2.0);

        return idbresp;} {}
  }
  Function {getfreqx(float x)} {open return_type float
  } {
    code {if (x > 1.0)
            x = 1.0;
        return 20.0 * powf(1000.0, x);} {}
  }
  Function {getfreqpos(float freq)} {open return_type float
  } {
    code {if (freq < 0.00001)
            freq = 0.00001;
        return logf(freq / 20.0) / logf(1000.0);} {}
  }
  decl {int oldx,oldy;} {private local
  }
  decl {float khzval;} {public local
  }
  decl {EffectMgr *eff;} {private local
  }
  decl {int maxdB;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
} 

class EffUI {open : {public Fl_Group,public PresetsUI_, public ControllableByMIDIUI}
} {
  decl {SynthEngine *synth;} {private local
  }
  Function {EffUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {open
  } {
    code {//
    eff = NULL;
    filterwindow = NULL;
    synth = NULL;} {}
  }
  Function {~EffUI()} {} {
    code {effnullwindow->hide();        // delete (effnullwindow);
        effreverbwindow->hide();        // delete (effreverbwindow);
        effechowindow->hide();          // delete (effechowindow);
        effchoruswindow->hide();        // delete (effchoruswindow);
        effphaserwindow->hide();        // delete (effphaserwindow);
        effalienwahwindow->hide();      // delete (effalienwahwindow);
        effdistorsionwindow->hide();    // delete (effdistorsionwindow);
        effeqwindow->hide();            // delete (effeqwindow);
        effdynamicfilterwindow->hide(); // delete (effdynamicfilterwindow);

        if (filterwindow != NULL)
        {
            filterwindow->hide();
            delete(filterwindow);
        }} {}
  }
  Function {make_null_window()} {} {
    Fl_Window effnullwindow {open
      xywh {915 700 380 95} type Double box PLASTIC_THIN_UP_BOX color 221 hide
      class Fl_Group
    } {
      Fl_Text_Display {} {
        label {no Efx applied}
        xywh {120 35 10 20} box NO_BOX labelfont 1 labelcolor 37 align 8
      }
    }
  }
  Function {make_reverb_window()} {open
  } {
    Fl_Window effreverbwindow {
      xywh {1016 535 380 95} type Double box PLASTIC_UP_BOX color 221 labelsize 12 align 33 hide
      class Fl_Group
    } {
      Fl_Text_Display {} {
        label {Reverb }
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 labelcolor 36 align 8
      }
      Fl_Choice revp {
        label Preset
        callback {eff->changepreset((int)o->value());
          refresh(eff);} open
        xywh {115 13 90 15} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label {Cathedral 1}
          xywh {10 10 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Cathedral 2}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Cathedral 3}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Hall 1}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Hall 2}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Room 1}
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Room 2}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Basement
          xywh {80 80 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Tunnel
          xywh {90 90 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echoed 1}
          xywh {100 100 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echoed 2}
          xywh {110 110 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Very Long 1}
          xywh {120 120 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Very Long 2}
          xywh {130 130 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Choice revp10 {
        label Type
        callback {eff->changepar(Reverb::c_Ptype, o->value());
if (eff->getparFloat(Reverb::c_Ptype)==2) revp12->activate();
else revp12->deactivate();} open
        xywh {240 13 75 15} down_box BORDER_BOX color 14 labelsize 11 textsize 11 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label Random
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Freeverb
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Bandwidth
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial revp0 {
        label Vol
        callback {eff->changepar(Reverb::c_Pvolume, o->value());}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Pvolume;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp1 {
        label Pan
        callback {eff->changepar(Reverb::c_Ppanning, o->value());}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Ppanning;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp2 {
        label Time
        callback {eff->changepar(Reverb::c_Ptime, o->value());}
        tooltip {Duration of Effect} xywh {80 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Ptime;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp3 {
        label {I.del}
        callback {eff->changepar(Reverb::c_Pidelay, o->value());}
        tooltip {Initial Delay} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Pidelay;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp4 {
        label {I.delfb}
        callback {eff->changepar(Reverb::c_PidelayFb, o->value());}
        tooltip {Initial Delay Feedback} xywh {155 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_PidelayFb;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp12 {
        label BW
        callback {eff->changepar(Reverb::c_Pbandwidth, o->value());}
        xywh {200 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127 deactivate
        code0 {if (eff->geteffectpar(10)==2) o->activate();}
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Pbandwidth;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp6 {
        label {E/R}
        callback {eff->changepar(Reverb::c_Perbalance, o->value());}
        xywh {235 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127 deactivate
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Perbalance;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp7 {
        label LPF
        callback {eff->changepar(Reverb::c_Plpf, o->value());}
        tooltip {Low Pass Filter} xywh {270 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Plpf;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp8 {
        label HPF
        callback {eff->changepar(Reverb::c_Phpf, o->value());}
        tooltip {High Pass Filter} xywh {305 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Phpf;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp9 {
        label Damp
        callback {eff->changepar(Reverb::c_Plohidamp, o->value());}
        tooltip Dampening xywh {340 40 30 30} box ROUND_UP_BOX labelsize 11 minimum 64 maximum 127 step 1
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Plohidamp;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial revp11 {
        label {R.S.}
        callback {int x=64;
if (Fl::event_button1()) x=(int)o->value();
   else o->value(x);
eff->changepar(Reverb::c_Proomsize,x);}
        tooltip RoomSize xywh {342 8 25 25} box ROUND_UP_BOX labelsize 10 align 4 minimum 1 maximum 127 step 1
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Reverb::c_Proomsize;
                 o->ui = this;}
            class WidgetPDial
      }
    }
  }
  Function {make_echo_window()} {} {
    Fl_Window effechowindow {
      xywh {1019 726 380 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 labelsize 12 hide
      class Fl_Group
    } {
      Fl_Choice echop {
        label Preset
        callback {eff->changepreset((int)o->value());
refresh(eff);} open
        xywh {102 13 96 15} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label {Echo 1}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echo 2}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Echo 3}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Simple Echo}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Canyon
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Panning Echo 1}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Panning Echo 2}
          xywh {80 80 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Panning Echo 3}
          xywh {90 90 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Feedback Echo}
          xywh {100 100 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label Echo
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial echop0 {
        label Vol
        callback {eff->changepar(Echo::c_Pvolume, o->value());}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Pvolume;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial echop1 {
        label Pan
        callback {eff->changepar(Echo::c_Ppanning, o->value());}
        xywh {59 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Ppanning;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial echop2 {
        label Delay
        callback {eff->changepar(Echo::c_Pdelay, o->value());}
        xywh {111 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Pdelay;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial echop3 {
        label {LRdl.}
        callback {eff->changepar(Echo::c_Plrdelay, o->value());}
        tooltip {Delay Between L/R} xywh {164 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Plrdelay;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial echop4 {
        label {LRc.}
        callback {eff->changepar(Echo::c_Plrcross, o->value());}
        tooltip {L/R Crossover} xywh {218 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Plrcross;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial echop5 {
        label {Fb.}
        callback {eff->changepar(Echo::c_Pfeedback, o->value());}
        tooltip Feedback xywh {273 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Pfeedback;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial echop6 {
        label Damp
        callback {eff->changepar(Echo::c_Phidamp, o->value());}
        tooltip Dampening xywh {334 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Echo::c_Phidamp;
                 o->ui = this;}
            class WidgetPDial
      }
    }
  }
  Function {make_chorus_window()} {} {
    Fl_Window effchoruswindow {open
      xywh {1019 245 380 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice chorusp {
        label Preset
        callback {eff->changepreset((int)o->value());
refresh(eff);}
        xywh {121 13 96 16} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label {Chorus 1}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Chorus 2}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Chorus 3}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Celeste 1}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Celeste 2}
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 1}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 2}
          xywh {80 80 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 3}
          xywh {90 90 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 4}
          xywh {100 100 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Flange 5}
          xywh {110 110 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label Chorus
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial chorusp0 {
        label Vol
        callback {eff->changepar(Chorus::c_Pvolume, o->value());}
        xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Pvolume;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp1 {
        label Pan
        callback {eff->changepar(Chorus::c_Ppanning, o->value());}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Ppanning;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp2 {
        label Freq
        callback {eff->changepar(Chorus::c_Pfreq, o->value());}
        tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Pfreq;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp3 {
        label Rnd
        callback {eff->changepar(Chorus::c_Prandomness, o->value());}
        tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Prandomness;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp5 {
        label {St.df}
        callback {eff->changepar(Chorus::c_Pstereo, o->value());}
        tooltip {L/R Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Pstereo;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp6 {
        label Dpth
        callback {eff->changepar(Chorus::c_Pdepth, o->value());}
        tooltip {LFO Depth} xywh {235 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Pdepth;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp7 {
        label Delay
        callback {eff->changepar(Chorus::c_Pdelay, o->value());}
        xywh {270 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Pdelay;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp8 {
        label Fb
        callback {eff->changepar(Chorus::c_Pfeedback, o->value());}
        tooltip Feedback xywh {305 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Pfeedback;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Dial chorusp9 {
        label {L/R}
        callback {eff->changepar(Chorus::c_Plrcross, o->value());}
        tooltip {Channel Routing} xywh {340 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Plrcross;
                 o->ui = this;}
            class WidgetPDial
      }
      Fl_Check_Button {} {
        label Flange
        callback {eff->changepar(Chorus::c_Pflangemode, o->value());}
        xywh {120 10 55 20} box THIN_UP_BOX down_box DOWN_BOX color 230 labelfont 1 labelsize 10 hide deactivate
        code0 {o->value(eff->geteffectpar(10));}
        class WidgetPCheckButton
      }
      Fl_Check_Button chorusp11 {
        label Substract
        callback {eff->changepar(Chorus::c_Poutsub, o->value());}
        tooltip {inverts the output} xywh {232 13 83 16} box THIN_UP_BOX down_box DOWN_BOX color 230 labelsize 11
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_Poutsub;
                 o->ui = this;}
        class WidgetPCheckButton
      }
      Fl_Choice chorusp4 {
        label {LFO type}
        callback {eff->changepar(Chorus::c_PLFOtype, o->value());}
        tooltip {LFO function} xywh {154 50 43 15} down_box BORDER_BOX labelsize 10 align 130 textsize 8
        class WidgetPChoice
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
    }
  }
  Function {make_phaser_window()} {open
  } {
    Fl_Window effphaserwindow {open
      xywh {866 341 380 95} type Double box PLASTIC_UP_BOX color 221 labelsize 11
      class Fl_Group visible
    } {
      Fl_Choice phaserp {
        label Preset
        callback {eff->changepreset((int)o->value());
refresh(eff);}
        xywh {80 21 82 15} box UP_BOX down_box BORDER_BOX color 31 selection_color 7 labelsize 11 align 1 textsize 11
        class WidgetPChoice
      } {
        MenuItem {} {
          label {Phaser 1}
          xywh {30 30 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 2}
          xywh {40 40 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 3}
          xywh {50 50 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 4}
          xywh {60 60 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 5}
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Phaser 6}
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 1}
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 2}
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 3}
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 4}
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 5}
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {APhaser 6}
          xywh {95 95 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Text_Display {} {
        label Phaser
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial phaserp0 {
        label Vol
        callback {eff->changepar(Phaser::c_Pvolume, o->value());} selected
        tooltip {Effect Volume} xywh {10 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pvolume;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial phaserp1 {
        label Pan
        callback {eff->changepar(Phaser::c_Ppanning, o->value());}
        xywh {48 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Ppanning;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial phaserp2 {
        label Freq
        callback {eff->changepar(Phaser::c_Pfreq, o->value());}
        tooltip {LFO frequency} xywh {86 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pfreq;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial phaserp3 {
        label Rnd
        callback {eff->changepar(Phaser::c_Prandomness, o->value());}
        tooltip {LFO randomness} xywh {124 50 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Prandomness;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Choice phaserp4 {
        label LFO
        callback {eff->changepar(Phaser::c_PLFOtype, o->value());} open
        tooltip {LFO function} xywh {314 60 50 16} down_box BORDER_BOX labelsize 10 align 130 textsize 8
        code {o->synth=synth;
                 o->controllable = true;
                 o->midiCtrl = eff;
                 o->par = Chorus::c_PLFOtype;
                 o->ui = this;}
        class WidgetPChoice
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial phaserp5 {
        label {St.df}
        callback {eff->changepar(Phaser::c_Pstereo, o->value());}
        tooltip {Left/Right Channel Phase Shift} xywh {162 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pstereo;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial phaserp6 {
        label Depth
        callback {eff->changepar(Phaser::c_Pdepth, o->value());}
        tooltip {LFO Depth} xywh {181 15 30 30} box ROUND_UP_BOX labelsize 11 align 1 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pdepth;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial phaserp7 {
        label Fb
        callback {eff->changepar(Phaser::c_Pfeedback, o->value());}
        tooltip Feedback xywh {200 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pfeedback;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Counter phaserp8 {
        label Stages
        callback {eff->changepar(Phaser::c_Pstages, o->value());}
        xywh {265 23 35 15} type Simple labelsize 11 align 1 minimum 0 maximum 127 step 1 textfont 1 textsize 11
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pstages;
            o->ui = this;}
        code0 {o->range(1,MAX_PHASER_STAGES);}
        class WidgetPCounter
      }
      Fl_Dial phaserp9 {
        label {L/R}
        callback {eff->changepar(Phaser::c_Plrcross, o->value());}
        tooltip {Channel Routing} xywh {238 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Plrcross;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Check_Button phaserp10 {
        label Subtract
        callback {eff->changepar(Phaser::c_Poutsub, o->value());}
        tooltip {inverts output} xywh {314 9 40 16} down_box DOWN_BOX color 230 
        labelsize 11
        class WidgetPCheckButton
      }
      Fl_Dial phaserp11 {
        label Phase
        callback {eff->changepar(Phaser::c_Pphase, o->value());}
        xywh {219 15 30 30} box ROUND_UP_BOX labelsize 11 align 1 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pphase;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Check_Button phaserp12 {
        label hyper
        callback {eff->changepar(Phaser::c_Phyper, o->value());}
        tooltip {hyper-sine} xywh {314 25 55 15} down_box DOWN_BOX labelsize 11
        class WidgetPCheckButton
      }
      Fl_Dial phaserp13 {
        label dist
        callback {eff->changepar(Phaser::c_Pdistorsion, o->value());}
        tooltip Distortion xywh {276 50 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Phaser::c_Pdistorsion;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Check_Button phaserp14 {
        label Analog
        callback {eff->changepar(Phaser::c_Panalog, o->value());}
        tooltip {Emulates FET} xywh {314 40 70 15} down_box DOWN_BOX labelsize 11
        class WidgetPCheckButton
      }
    }
  }
  Function {make_alienwah_window()} {open
  } {
    Fl_Window effalienwahwindow {
      xywh {1019 326 380 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice awp {
        label Preset
        callback {eff->changepreset((int)o->value());
refresh(eff);} open
        xywh {135 13 96 15} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textfont 1 textsize 11 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label {Alienwah 1}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Alienwah 2}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Alienwah 3}
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Alienwah 4}
          xywh {70 70 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label AlienWah
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial awp0 {
        label Vol
        callback {eff->changepar(Alienwah::c_Pvolume,o->value());}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Pvolume;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp1 {
        label Pan
        callback {eff->changepar(Alienwah::c_Ppanning, o->value());}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Ppanning;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp2 {
        label Freq
        callback {eff->changepar(Alienwah::c_Pfreq, o->value());}
        tooltip {LFO Frequency} xywh {85 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Pfreq;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp3 {
        label Rnd
        callback {eff->changepar(Alienwah::c_Prandomness, o->value());}
        tooltip {LFO Randomness} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Prandomness;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp5 {
        label {St.df}
        callback {eff->changepar(Alienwah::c_Pstereo, o->value());}
        tooltip {Left/Right Channel Phase Shift} xywh {200 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Pstereo;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp6 {
        label Dpth
        callback {eff->changepar(Alienwah::c_Pdepth, o->value());}
        tooltip Depth xywh {235 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Pdepth;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp7 {
        label Fb
        callback {eff->changepar(Alienwah::c_Pfeedback, o->value());}
        tooltip Feedback xywh {270 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Pfeedback;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial awp9 {
        label {L/R}
        callback {eff->changepar(Alienwah::c_Plrcross, o->value());}
        xywh {345 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Alienwah::c_Plrcross;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Choice awp4 {
        label {LFO type}
        callback {eff->changepar(4,(int) o->value());}
        tooltip {LFO function} xywh {155 50 43 15} down_box BORDER_BOX labelsize 10 align 130 textsize 8
        class WidgetPChoice
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Dial awp10 {
        label Phase
        callback {eff->changepar(10,(int) o->value());}
        xywh {309 8 26 26} box ROUND_UP_BOX labelsize 11 align 4 maximum 127
        class WidgetPDial
      }
      Fl_Counter awp8 {
        label Delay
        callback {eff->changepar(8,(int) o->value());}
        xywh {305 55 35 15} type Simple labelsize 11 minimum 0 maximum 127 step 1 textsize 11
        code0 {o->range(1,MAX_ALIENWAH_DELAY);}
        class WidgetPCounter
      }
    }
  }
  Function {make_distorsion_window()} {open
  } {
    Fl_Window effdistorsionwindow {
      xywh {1009 738 380 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice distp {
        label Preset
        callback {eff->changepreset((int)o->value());
refresh(eff);}
        xywh {139 13 96 16} down_box BORDER_BOX color 14 selection_color 0 labelsize 11 textsize 11 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label {Overdrive 1}
          xywh {20 20 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Overdrive 2}
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {A. Exciter 1}
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {A. Exciter 2}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label {Guitar Amp}
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Quantisize
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label Distortion
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial distp0 {
        label Vol
        callback {eff->changepar(Distorsion::c_Pvolume,(int) o->value());}
        tooltip {Effect Volume} xywh {10 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Pvolume;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial distp1 {
        label Pan
        callback {eff->changepar(Distorsion::c_Ppanning,(int) o->value());}
        xywh {45 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Ppanning;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial distp2 {
        label {LRc.}
        callback {eff->changepar(Distorsion::c_Plrcross,(int) o->value());}
        tooltip {L/R Mix} xywh {80 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Plrcross;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial distp3 {
        label Drive
        callback {eff->changepar(Distorsion::c_Pdrive,(int) o->value());}
        tooltip {Input Amplification} xywh {120 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Pdrive;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial distp4 {
        label Level
        callback {eff->changepar(Distorsion::c_Plevel,(int) o->value());}
        tooltip {Output Amplification} xywh {155 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Plevel;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial distp7 {
        label LPF
        callback {eff->changepar(Distorsion::c_Plpf,(int) o->value());}
        tooltip {Low Pass Filter} xywh {285 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Plpf;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial distp8 {
        label HPF
        callback {eff->changepar(Distorsion::c_Plpf,(int) o->value());}
        tooltip {High Pass Filter} xywh {320 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = Distorsion::c_Phpf;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Choice distp5 {
        label Type
        callback {eff->changepar(5,(int) o->value());}
        xywh {190 50 60 20} box UP_BOX down_box BORDER_BOX labelsize 11 align 2 textsize 10
        class WidgetPChoice
      } {
        MenuItem {} {
          label Atan
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Asym1
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Pow
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Sine
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Qnts
          xywh {95 95 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Zigzg
          xywh {105 105 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Lmt
          xywh {115 115 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label LmtU
          xywh {125 125 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label LmtL
          xywh {135 135 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label ILmt
          xywh {147 147 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Clip
          xywh {157 157 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Asym2
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Pow2
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Sgm
          xywh {95 95 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Check_Button distp6 {
        label {Neg.}
        callback {eff->changepar(6,(int) o->value());}

        xywh {260 55 15 15} down_box DOWN_BOX labelsize 11 align 2
        class WidgetPCheckButton
      }
      Fl_Check_Button distp9 {
        label {St.}
        callback {eff->changepar(9,(int) o->value());}
        tooltip Stereo xywh {355 60 15 15} down_box DOWN_BOX labelsize 11 align 2
        class WidgetPCheckButton
      }
      Fl_Check_Button distp10 {
        label PF
        callback {eff->changepar(10,(int) o->value());}
        tooltip {Applies the filters(before or after) the distorsion} xywh {355 44 15 15} down_box DOWN_BOX labelsize 11 align 1
        class WidgetPCheckButton
      }
    }
  }
  Function {make_eq_window()} {open
  } {
    Fl_Window effeqwindow {
      xywh {766 606 380 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Text_Display {} {
        label EQ
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial eqp0 {
        label Gain
        callback {eff->changepar(0, o->value());
eqgraph->redraw();}
        xywh {10 41 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = 0;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Counter bandcounter {
        label {B.}
        callback {eqband=(int) o->value();
        int npb=eqband*5+10;

        int type=eff->geteffectpar(npb);
        typechoice->value(type);

        if (type>6) gaindial->activate();
         else gaindial->deactivate();

        if (type==0) bandgroup->deactivate();
        else bandgroup->activate();

        int freq=eff->geteffectpar(npb+1);
        freqdial->value(freq);
        freqdial->par = eqband*5+11;

        int gain=eff->geteffectpar(npb+2);
        gaindial->value(gain);
        gaindial->par = eqband*5+12;

        int q=eff->geteffectpar(npb+3);
        qdial->value(q);
        qdial->par = eqband*5+13;

        int dbl=eff->geteffectpar(npb+4);
        stagescounter->value(dbl);}
        tooltip {Band no.} xywh {263 20 45 15} type Simple labelsize 11 align 1 minimum 0 maximum 1 step 1 textsize 11
        code0 {o->bounds(0,MAX_EQ_BANDS-1);}
      }
      Fl_Group bandgroup {open
        xywh {245 40 130 50} box ENGRAVED_FRAME
        code0 {if (eff->geteffectpar(10)==0) o->deactivate();}
      } {
        Fl_Dial freqdial {
          label Freq
          callback {int np=eqband*5+11;
eff->changepar(np, o->value());
eqgraph->redraw();}
          xywh {250 50 25 25} box ROUND_UP_BOX labelsize 10 when 3 maximum 127
          code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = eqband*5+11;
            o->ui = NULL;}
          class WidgetPDial
        }
        Fl_Dial gaindial {
          label Gain
          callback {int np=eqband*5+12;
eff->changepar(np, o->value());
eqgraph->redraw();}
          xywh {280 50 25 25} box ROUND_UP_BOX labelsize 10 when 3 maximum 127 step 1
          code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = eqband*5+12;
            o->ui = NULL;}
          class WidgetPDial
        }
        Fl_Dial qdial {
          label Q
          callback {int np=eqband*5+13;
eff->changepar(np, o->value());
eqgraph->redraw();}
          tooltip {Resonance/Bandwidth} xywh {310 50 25 25} box ROUND_UP_BOX labelsize 10 when 3 maximum 127
          code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = eqband*5+13;
            o->ui = NULL;}
          class WidgetPDial
        }
        Fl_Counter stagescounter {
          label {St.}
          callback {int np=eqband*5+14;
eff->changepar(np, o->value());
eqgraph->redraw();}
          tooltip {Additional filter stages} xywh {340 60 30 15} type Simple labelsize 10 minimum 1 maximum 127 step 1 textfont 1 textsize 11
          code0 {o->bounds(0,MAX_FILTER_STAGES-1);}
        }
      }
      Fl_Choice typechoice {
        label {T.}
        callback {int np=eqband*5+10;
eff->changepar(np, o->value());
bandcounter->do_callback();
eqgraph->redraw();}
        tooltip Type xywh {323 20 40 15} down_box BORDER_BOX labelsize 11 align 1 when 6 textsize 11
        class WidgetPChoice
      } {
        MenuItem {} {
          label OFF
          xywh {0 0 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Lp1
          xywh {10 10 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Hp1
          xywh {20 20 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Lp2
          xywh {30 30 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Hp2
          xywh {40 40 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Bp2
          xywh {50 50 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label N2
          xywh {60 60 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Pk
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label LSh
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label HSh
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Box eqgraph {
        xywh {45 10 190 75} box BORDER_BOX color 178
        code0 {o->init(eff);}
        class EQGraph
      }
    }
  }
  Function {make_dynamicfilter_window()} {open
  } {
    Fl_Window effdynamicfilterwindow {
      xywh {1019 421 380 95} type Double box PLASTIC_UP_BOX color 221 labelfont 1 hide
      class Fl_Group
    } {
      Fl_Choice dfp {
        label Preset
        callback {eff->changepreset((int)o->value());
refresh(eff);}
        xywh {132 13 90 16} down_box BORDER_BOX color 14 selection_color 0 labelsize 10 textsize 10 textcolor 7
        class WidgetPChoice
      } {
        MenuItem {} {
          label WahWah
          xywh {30 30 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label AutoWah
          xywh {40 40 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label Sweep
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label VocalMorph1
          xywh {50 50 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
        MenuItem {} {
          label VocalMorph2
          xywh {60 60 100 20} labelfont 1 labelsize 10 labelcolor 7
        }
      }
      Fl_Text_Display {} {
        label DynFilter
        xywh {10 10 0 20} box NO_BOX labelfont 1 labelsize 12 align 8
      }
      Fl_Dial dfp0 {
        label Vol
        callback {eff->changepar(DynamicFilter::c_Pvolume, o->value());}
        tooltip {Effect Volume} xywh {6 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Pvolume;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial dfp1 {
        label Pan
        callback {eff->changepar(DynamicFilter::c_Ppanning, o->value());}
        xywh {42 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Ppanning;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial dfp2 {
        label Freq
        callback {eff->changepar(DynamicFilter::c_Pfreq, o->value());}
        tooltip {LFO Frequency} xywh {80 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Pfreq;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial dfp3 {
        label Rnd
        callback {eff->changepar(DynamicFilter::c_Prandomness, o->value());}
        tooltip {LFO Randomness} xywh {118 40 30 30} box ROUND_UP_BOX labelsize 11 when 4 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Prandomness;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial dfp5 {
        label {St.df}
        callback {eff->changepar(DynamicFilter::c_Pstereo, o->value());}
        tooltip {Left/Right Channel Phase Shift} xywh {205 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Pstereo;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Dial dfp6 {
        label LfoD
        callback {eff->changepar(DynamicFilter::c_Pdepth, o->value());}
        tooltip {LFO Depth} xywh {240 40 30 30} box ROUND_UP_BOX labelsize 11 maximum 127
        code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Pdepth;
            o->ui = this;}
        class WidgetPDial
      }
      Fl_Choice dfp4 {
        label {LFO type}
        callback {eff->changepar(4,(int) o->value());}
        tooltip {LFO function} xywh {152 55 48 15} down_box BORDER_BOX labelsize 10 align 130 textsize 8
        class WidgetPChoice
      } {
        MenuItem {} {
          label SINE
          xywh {15 15 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label TRI
          xywh {25 25 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Button {} {
        label Filter
        callback {filterwindow->show();}
        xywh {235 13 37 16} box PLASTIC_THIN_UP_BOX labelsize 11
      }
      Fl_Group {} {open
        xywh {275 40 100 45} box BORDER_BOX color 181
      } {
        Fl_Dial dfp7 {
          label {A.S.}
          callback {eff->changepar(DynamicFilter::c_Pampsns, o->value());}
          tooltip {Filter vs Amplitude} xywh {280 45 25 25} box ROUND_UP_BOX labelsize 11 maximum 127
          code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Pampsns;
            o->ui = this;}
          class WidgetPDial
        }
        Fl_Dial dfp9 {
          label {A.M}
          callback {eff->changepar(DynamicFilter::c_Pampsmooth, o->value());}
          tooltip {rate that  amplitude changes the filter} xywh {309 45 25 25} box ROUND_UP_BOX labelsize 11 maximum 127
          code {o->synth=synth;
            o->controllable = true;
            o->midiCtrl = eff;
            o->par = DynamicFilter::c_Pampsmooth;
            o->ui = this;}
          class WidgetPDial
        }
        Fl_Check_Button dfp8 {
          label {A.Inv.}
          callback {eff->changepar(DynamicFilter::c_Pampsnsinv, o->value());}
          tooltip {enable for filter frequency to lower with higher input amplitude} xywh {348 55 15 15} down_box DOWN_BOX labelsize 11 align 2
          class WidgetPCheckButton
        }
      }
    }
  }
  Function {make_filter_window()} {open
  } {
    Fl_Window filterwindow {
      label {Filter Parameters for DynFilter Eff.} open
      xywh {1109 779 290 110} type Double hide
    } {
      Fl_Group {} {
        label {DynFilter effect  - Filter}
        xywh {5 5 275 75} box FLAT_BOX color 50 labelsize 12 align 144
        code0 {o->init(eff->filterpars,NULL,NULL);}
        code1 {o->use_for_dynamic_filter();}
        class FilterUI
      } {}
      Fl_Button {} {
        label Close
        callback {filterwindow->hide();}
        xywh {124 86 46 20} box THIN_UP_BOX labelsize 12
      }
    }
  }
  Function {init(EffectMgr *eff_, SynthEngine *_synth)} {open
  } {
    code {eff=eff_;
    synth = _synth;
controller = eff->getefx();
make_null_window();
make_reverb_window();
make_echo_window();
make_chorus_window();
make_phaser_window();
make_alienwah_window();
make_distorsion_window();
make_eq_window();
make_dynamicfilter_window();

int px=this->parent()->x();
int py=this->parent()->y();

effnullwindow->position(px,py);
effreverbwindow->position(px,py);
effechowindow->position(px,py);
effchoruswindow->position(px,py);
effphaserwindow->position(px,py);
effalienwahwindow->position(px,py);
effdistorsionwindow->position(px,py);
effeqwindow->position(px,py);
effdynamicfilterwindow->position(px,py);

refresh(eff);} {}
  }
  Function {refresh(EffectMgr *eff_)} {open
  } {
    code {eff = eff_;
        this->hide();
        effnullwindow->hide();
        effreverbwindow->hide();
        effechowindow->hide();
        effchoruswindow->hide();
        effphaserwindow->hide();
        effalienwahwindow->hide();
        effdistorsionwindow->hide();
        effeqwindow->hide();
        effdynamicfilterwindow->hide();
        eqband=0;
        if (filterwindow != NULL)
        {
            filterwindow->hide();
            delete(filterwindow);
            filterwindow=NULL;
        }
        switch(eff->geteffect())
        {
            case 1:
                revp->value(eff->getpreset());
                revp0->value(eff->geteffectpar(0));
                if (eff->insertion != 0)
                    revp0->label("D/W");
                revp1->value(eff->geteffectpar(1));
                revp2->value(eff->geteffectpar(2));
                revp3->value(eff->geteffectpar(3));
                revp4->value(eff->geteffectpar(4));
                revp6->value(eff->geteffectpar(6));
                revp7->value(eff->geteffectpar(7));
                revp8->value(eff->geteffectpar(8));
                revp9->value(eff->geteffectpar(9));
                revp10->value(eff->geteffectpar(10));
                revp11->value(eff->geteffectpar(11));
                revp12->value(eff->geteffectpar(12));
                revp0->midiCtrl = eff;
                revp1->midiCtrl = eff;
                revp2->midiCtrl = eff;
                revp3->midiCtrl = eff;
                revp4->midiCtrl = eff;
                revp6->midiCtrl = eff;
                revp7->midiCtrl = eff;
                revp8->midiCtrl = eff;
                revp9->midiCtrl = eff;
                revp10->midiCtrl = eff;
                revp11->midiCtrl = eff;
                revp12->midiCtrl = eff;
                effreverbwindow->show();
                break;
             case 2:
                echop->value(eff->getpreset());
                echop0->value(eff->geteffectpar(0));
                if (eff->insertion != 0)
                    echop0->label("D/W");
                echop1->value(eff->geteffectpar(1));
                echop2->value(eff->geteffectpar(2));
                echop3->value(eff->geteffectpar(3));
                echop4->value(eff->geteffectpar(4));
                echop5->value(eff->geteffectpar(5));
                echop6->value(eff->geteffectpar(6));
                echop0->midiCtrl = eff;
                echop1->midiCtrl = eff;
                echop2->midiCtrl = eff;
                echop3->midiCtrl = eff;
                echop4->midiCtrl = eff;
                echop6->midiCtrl = eff;
                effechowindow->show();
                break;
             case 3:
                chorusp->value(eff->getpreset());
                chorusp0->value(eff->geteffectpar(0));
                if (eff->insertion != 0)
                    chorusp0->label("D/W");
                chorusp1->value(eff->geteffectpar(1));
                chorusp2->value(eff->geteffectpar(2));
                chorusp3->value(eff->geteffectpar(3));
                chorusp4->value(eff->geteffectpar(4));
                chorusp5->value(eff->geteffectpar(5));
                chorusp6->value(eff->geteffectpar(6));
                chorusp7->value(eff->geteffectpar(7));
                chorusp8->value(eff->geteffectpar(8));
                chorusp9->value(eff->geteffectpar(9));
                chorusp11->value(eff->geteffectpar(11));
                chorusp0->midiCtrl = eff;
                chorusp1->midiCtrl = eff;
                chorusp2->midiCtrl = eff;
                chorusp3->midiCtrl = eff;
                chorusp4->midiCtrl = eff;
                chorusp6->midiCtrl = eff;
                chorusp7->midiCtrl = eff;
                chorusp8->midiCtrl = eff;
                chorusp9->midiCtrl = eff;
                chorusp11->midiCtrl = eff;
                effchoruswindow->show();
                break;
             case 4:
                phaserp->value(eff->getpreset());
                phaserp0->value(eff->geteffectpar(0));
                if (eff->insertion != 0)
                    phaserp0->label("D/W");
                phaserp1->value(eff->geteffectpar(1));
                phaserp2->value(eff->geteffectpar(2));
                phaserp3->value(eff->geteffectpar(3));
                phaserp4->value(eff->geteffectpar(4));
                phaserp5->value(eff->geteffectpar(5));
                phaserp6->value(eff->geteffectpar(6));
                phaserp7->value(eff->geteffectpar(7));
                phaserp8->value(eff->geteffectpar(8));
                phaserp9->value(eff->geteffectpar(9));
                phaserp10->value(eff->geteffectpar(10));
                phaserp11->value(eff->geteffectpar(11));
                phaserp12->value(eff->geteffectpar(12));
                phaserp13->value(eff->geteffectpar(13));
                phaserp14->value(eff->geteffectpar(14));
                phaserp0->midiCtrl = eff;
                phaserp1->midiCtrl = eff;
                phaserp2->midiCtrl = eff;
                phaserp3->midiCtrl = eff;
                phaserp4->midiCtrl = eff;
                phaserp6->midiCtrl = eff;
                phaserp7->midiCtrl = eff;
                phaserp8->midiCtrl = eff;
                phaserp9->midiCtrl = eff;
                phaserp10->midiCtrl = eff;
                phaserp11->midiCtrl = eff;
                phaserp12->midiCtrl = eff;
                phaserp13->midiCtrl = eff;
                phaserp14->midiCtrl = eff;
                effphaserwindow->show();
                break;
             case 5:
                awp->value(eff->getpreset());
                awp0->value(eff->geteffectpar(0));
                if (eff->insertion != 0)
                    awp0->label("D/W");
                awp1->value(eff->geteffectpar(1));
                awp2->value(eff->geteffectpar(2));
                awp3->value(eff->geteffectpar(3));
                awp4->value(eff->geteffectpar(4));
                awp5->value(eff->geteffectpar(5));
                awp6->value(eff->geteffectpar(6));
                awp7->value(eff->geteffectpar(7));
                awp8->value(eff->geteffectpar(8));
                awp9->value(eff->geteffectpar(9));
                awp10->value(eff->geteffectpar(10));
                awp0->midiCtrl = eff;
                awp1->midiCtrl = eff;
                awp2->midiCtrl = eff;
                awp3->midiCtrl = eff;
                awp4->midiCtrl = eff;
                awp6->midiCtrl = eff;
                awp7->midiCtrl = eff;
                awp8->midiCtrl = eff;
                awp9->midiCtrl = eff;
                awp10->midiCtrl = eff;
                effalienwahwindow->show();
                break;
             case 6:
                distp->value(eff->getpreset());
                distp0->value(eff->geteffectpar(0));
                if (eff->insertion != 0)
                    distp0->label("D/W");
                distp1->value(eff->geteffectpar(1));
                distp2->value(eff->geteffectpar(2));
                distp3->value(eff->geteffectpar(3));
                distp4->value(eff->geteffectpar(4));
                distp5->value(eff->geteffectpar(5));
                distp6->value(eff->geteffectpar(6));
                distp7->value(eff->geteffectpar(7));
                distp8->value(eff->geteffectpar(8));
                distp9->value(eff->geteffectpar(9));
                distp10->value(eff->geteffectpar(10));
                distp0->midiCtrl = eff;
                distp1->midiCtrl = eff;
                distp2->midiCtrl = eff;
                distp3->midiCtrl = eff;
                distp4->midiCtrl = eff;
                distp6->midiCtrl = eff;
                distp7->midiCtrl = eff;
                distp8->midiCtrl = eff;
                distp9->midiCtrl = eff;
                distp10->midiCtrl = eff;
                effdistorsionwindow->show();
                break;
             case 7:
                eqband = 0;
                eqp0->value(eff->geteffectpar(0));
                eqp0->midiCtrl = eff;
                bandcounter->value(eqband);
                bandcounter->do_callback();
                typechoice->value(eff->geteffectpar(10));
                eqgraph->redraw();
                freqdial->value(eff->geteffectpar(11));
                freqdial->midiCtrl = eff;
                gaindial->value(eff->geteffectpar(12));
                gaindial->midiCtrl = eff;
                if (eff->geteffectpar(10) < 6)
                    gaindial->deactivate();
                qdial->value(eff->geteffectpar(13));
                qdial->midiCtrl = eff;
                stagescounter->value(eff->geteffectpar(14));
                eqgraph->init(eff);
                effeqwindow->show();
                break;
             case 8:
                make_filter_window();
                dfp->value(eff->getpreset());
                dfp0->value(eff->geteffectpar(0));if (eff->insertion!=0) dfp0->label("D/W");
                dfp1->value(eff->geteffectpar(1));
                dfp2->value(eff->geteffectpar(2));
                dfp3->value(eff->geteffectpar(3));
                dfp4->value(eff->geteffectpar(4));
                dfp5->value(eff->geteffectpar(5));
                dfp6->value(eff->geteffectpar(6));
                dfp7->value(eff->geteffectpar(7));
                dfp8->value(eff->geteffectpar(8));
                dfp9->value(eff->geteffectpar(9));
                dfp0->midiCtrl = eff;
                dfp1->midiCtrl = eff;
                dfp2->midiCtrl = eff;
                dfp3->midiCtrl = eff;
                dfp4->midiCtrl = eff;
                dfp6->midiCtrl = eff;
                dfp7->midiCtrl = eff;
                dfp8->midiCtrl = eff;
                dfp9->midiCtrl = eff;
                effdynamicfilterwindow->show();
                break;
            default:
                effnullwindow->show();
                break;
        }
        this->show();} {}
  }
  Function {refresh()} {open
  } {
    code {refresh(eff);} {}
  }
  decl {EffectMgr *eff;} {private local
  }
  decl {int eqband;} {private local
  }
} 
