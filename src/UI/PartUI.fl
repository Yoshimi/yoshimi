# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {PartUI.h} {not_in_source in_header
}

comment {PartUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014-2017, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code.

Modified December 2017
} {in_source in_header
}

decl {\#include <FL/fl_ask.H>
    \#include "Misc/Config.h"
    \#include "Misc/SynthEngine.h"} {private global
}

decl {\#include "UI/MiscGui.h"
    \#include "EffUI.h"
    \#include "BankUI.h"
    \#include "ADnoteUI.h"
    \#include "SUBnoteUI.h"
    \#include "PADnoteUI.h"
    \#include "UI/WidgetMWSlider.h"
    \#include "Params/Controller.h"
    \#include "Misc/MiscFuncs.h"} {public global
}

decl {\#include "Misc/Part.h"
    \#define MAX_INFO_TEXT_SIZE 256} {public local
}

decl {\#include "MasterUI.h"} {private global
}

class PartSysEffSend {: {public Fl_Group, private MiscFuncs}
} {
  Function {make_window()} {} {
    Fl_Window syseffsend {
      xywh {916 904 50 40} type Double hide
      class Fl_Group
    } {
      Fl_Dial sysend {
        label 01
        callback {//
        if (Fl::event_button() == 3)
            o->value(0);
        send_data(neff, o->value(), 0xc8);}
        xywh {0 0 25 25} box ROUND_UP_BOX labelsize 10 align 130 maximum 127 step 1
        code0 {o->size(25,25);}
        code1 {o->value(synth->Psysefxvol[neff][npart]);}
        code2 {o->copy_label(asString(neff + 1).c_str());}
        code3 {o->setValueType(VC_FXSysSend);}
        class WidgetPDial
      }
    }
  }
  Function {PartSysEffSend(int x, int y, int w, int h) :
    Fl_Group(x, y, w, h, NULL)} {} {
    code {//
    neff = 0;npart = 0;} {}
  }
  Function {send_data(int control, float value, int type)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control + 0x28, npart);} {}
  }
  Function {init(int npart_, int neff_, SynthEngine *_synth)} {} {
    code {//
    synth = _synth;
    npart = npart_;
    neff = neff_;
    make_window();
    syseffsend->show();
    end();} {}
  }
  Function {~PartSysEffSend()} {} {
    code {//
    syseffsend->hide();} {}
  }
  decl {int neff;} {private local
  }
  decl {int npart;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class PartUI_ {} {
  Function {showparameters(int kititem,int engine)} {return_type virtual
  } {
    code {;} {}
  }
}

class PartKitItem {: {public Fl_Group}
} {
  Function {make_window()} {} {
    Fl_Window partkititem {
      xywh {726 127 670 30} type Double hide
      class Fl_Group
    } {
      Fl_Group partkititemgroup {
        xywh {55 0 605 20} box FLAT_BOX
        code0 {if (part->kit[n].Penabled == 0) o->deactivate();}
      } {
        Fl_Check_Button mutedcheck {
          callback {//
          send_data(9, o->value(), 0xc8, n, 0xff, 32);}
          xywh {60 0 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Pmuted);}
        }
        Fl_Button labelbutton {
          label {Bass Drum}
          callback {//
          const char *tmp = fl_input("Kit item name:", part->kit[n].Pname.c_str());
          if (tmp != NULL)
          {
              part->kit[n].Pname = string(tmp);
              o->copy_label(tmp);
          }}
          xywh {90 0 130 15} box THIN_DOWN_BOX down_box FLAT_BOX color 7 labelfont 1 labelsize 10 align 20
          code0 {o->copy_label(part->kit[n].Pname.c_str());}
        }
        Fl_Counter minkcounter {
          callback {//
          int tmp = o->value();
          int other = maxkcounter->value();
          if (tmp >= other)
          {
              tmp = other;
              o->value(tmp);
          }

          send_data(16, tmp, 0xc0, n, 0xff, 32);}
          xywh {225 0 55 15} type Simple minimum 0 maximum 128 step 1
          code0 {o->value(part->kit[n].Pminkey);}
        }
        Fl_Button {} {
          label m
          callback {//
          int last = part->lastnote;
          if (last <= 0)
              return;
          int tmp;
          int other = maxkcounter->value();
          if (last >= other)
              tmp = other;
          else
              tmp = last;
          minkcounter->value(tmp);

          send_data(18, tmp, 0xc0, n, 0xff, 32);}
          tooltip {set the minimum key to the last pressed key} xywh {285 3 15 12} box THIN_UP_BOX labelsize 10
        }
        Fl_Button {} {
          label M
          callback {//
          int last = part->lastnote;
          if (last <= 0)
              return;
          int tmp;
          int other = minkcounter->value();
          if (last <= other)
              tmp = other;
          else
              tmp = last;
          maxkcounter->value(tmp);

          send_data(19, tmp, 0xc0, n, 0xff, 32);}
          tooltip {set the maximum key to the last pressed key} xywh {315 3 15 12} box THIN_UP_BOX labelsize 10
        }
        Fl_Button {} {
          label R
          callback {//
          minkcounter->value(0);
          maxkcounter->value(127);

          send_data(96, o->value(), 0xc0, n, 0xff, 32);}
          tooltip {reset the minimum key to 0 and maximum key to 127} xywh {300 3 15 12} box THIN_UP_BOX labelfont 1 labelsize 10
        }
        Fl_Counter maxkcounter {
          callback {//
          int tmp = o->value();
          int other = minkcounter->value();
          if (tmp <= other)
          {
              tmp = other;
              o->value(tmp);
          }
          send_data(17, tmp, 0xc0, n, 0xff, 32);}
          xywh {335 0 55 15} type Simple minimum 0 maximum 128 step 1
          code0 {o->value(part->kit[n].Pmaxkey);}
        }
        Fl_Button adeditbutton {
          label edit
          callback {//
          partui->showparameters(n,0);
          if ((Fl::event_button() == 3))
              synth->getGuiMaster()->partui->instrumentkitlist->hide();}
          xywh {420 0 40 15} box THIN_UP_BOX labelsize 11
          code0 {if (part->kit[n].Padenabled==0) o->deactivate();}
        }
        Fl_Check_Button adcheck {
          callback {//
          int x = o->value();
          if (x)
              adeditbutton->activate();
          else
              adeditbutton->deactivate();
          if (n == 0)
          {
              synth->getGuiMaster()->partui->adsynenabledcheck->value(x);
              if (x)
                  synth->getGuiMaster()->partui->adeditbutton->activate();
              else
                  synth->getGuiMaster()->partui->adeditbutton->deactivate();
          }
          synth->getGuiMaster()->partui->checkEngines();
          send_data(8, o->value(), 0xc8, n, 0, 32);}
          xywh {400 0 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Padenabled);}
        }
        Fl_Button subeditbutton {
          label edit
          callback {//
          partui->showparameters(n,1);
          if ((Fl::event_button() == 3))
              synth->getGuiMaster()->partui->instrumentkitlist->hide();}
          xywh {490 0 40 15} box THIN_UP_BOX labelsize 11
          code0 {if (part->kit[n].Psubenabled==0) o->deactivate();}
        }
        Fl_Check_Button subcheck {
          callback {//
          int x = o->value();
          if (x)
              subeditbutton->activate();
          else
              subeditbutton->deactivate();
          if (n == 0)
          {
              synth->getGuiMaster()->partui->subsynenabledcheck->value(x);
              if (x)
                  synth->getGuiMaster()->partui->subeditbutton->activate();
              else
                  synth->getGuiMaster()->partui->subeditbutton->deactivate();
          }
          synth->getGuiMaster()->partui->checkEngines();
          send_data(8, o->value(), 0xc8, n, 1, 32);}
          xywh {470 0 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Psubenabled);}
        }
        Fl_Button padeditbutton {
          label edit
          callback {//
          partui->showparameters(n,2);
          if ((Fl::event_button() == 3))
              synth->getGuiMaster()->partui->instrumentkitlist->hide();}
          xywh {560 0 40 15} box THIN_UP_BOX labelsize 11
          code0 {if (part->kit[n].Ppadenabled==0) o->deactivate();}
        }
        Fl_Check_Button padcheck {
          callback {//
          int x = o->value();
          if (x)
              padeditbutton->activate();
          else
              padeditbutton->deactivate();
          if (n == 0)
          {
              synth->getGuiMaster()->partui->padsynenabledcheck->value(x);
              if (x)
                  synth->getGuiMaster()->partui->padeditbutton->activate();
              else
                  synth->getGuiMaster()->partui->padeditbutton->deactivate();
          }
          synth->getGuiMaster()->partui->checkEngines();
          send_data(8, o->value(), 0xc8, n, 2, 32);}
          xywh {540 0 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Ppadenabled);}
        }
        Fl_Choice sendtoeffect {
          callback {//
          send_data(24, o->value(), 0xc0, n, 0xff, 32);}
          xywh {615 0 45 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {o->add("OFF"); char nrstr[10]; for(int i = 0; i < NUM_PART_EFX; i++) {sprintf(nrstr,"FX%d",i+1);o->add(nrstr);};}
          code1 {o->value(part->kit[n].Psendtoparteffect+1);if (part->kit[n].Psendtoparteffect==127) o->value(0);}
        } {}
      }
      Fl_Check_Button enabledcheck {
        label 01
        callback {//
        int answer = 1;
        if (o->value() == 0)
            answer = (fl_choice("Delete the item?", NULL,"No","Yes") > 1);
        if (answer != 0)
        {
            if (o->value() == 0)
                clearLine();
            else
                partkititemgroup->activate();
            o->redraw();
            partui->showparameters(n, -1); // use to delete the ui, if it is not to item 0
        }
        else
            o->value(1);
        send_data(8, o->value(), 0xc0, n, 0xff, 32);}
        xywh {30 0 20 15} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 13 align 4
        code0 {snprintf(label,10,"%d",n+1);o->label(label);}
        code1 {o->value(part->kit[n].Penabled);}
        code2 {if (n==0) o->hide();}
        code3 {if (o->value() == 0) labelbutton->color(FL_WHITE);}
      }
    }
  }
  Function {send_data(int control, float value, int type, int kititem = 0xff, int engine = 0xff, int insert = 0xff)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, engine, insert);} {}
  }
  Function {PartKitItem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {//
    n=0;part=NULL;} {}
  }
  Function {clearLine()} {} {
    code {//
    partkititemgroup->deactivate();
    mutedcheck->value(0);
    labelbutton->copy_label("");
    minkcounter->value(0);
    maxkcounter->value(127);
    adcheck->value(0);
    adeditbutton->deactivate();
    subcheck->value(0);
    subeditbutton->deactivate();
    padcheck->value(0);
    padeditbutton->deactivate();
    sendtoeffect->value(1);} {}
  }
  Function {init(Part *part_, int n_, int npart_, PartUI_ *partui_)} {} {
    code {//
    synth = part_->getSynthEngine();
    part = part_;
    n = n_;
    npart = npart_;
    partui = partui_;
    make_window();
    end();} {}
  }
  Function {~PartKitItem()} {} {
    code {//
    partkititem->hide();} {}
  }
  decl {Part *part;} {public local
  }
  decl {int n;} {private local
  }
  decl {int npart;} {private local
  }
  decl {char label[10];} {private local
  }
  decl {PartUI_ *partui;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class PartUI {selected : {public Fl_Group, PartUI_, private MiscFuncs}
} {
  Function {make_window()} {} {
    Fl_Window partgroup {
      xywh {272 534 380 170} type Double box NO_BOX hide
      class Fl_Group
    } {
      Fl_Group partgroupui {
        xywh {0 0 378 168}
        code0 {if (part->Penabled != 1) o->deactivate();}
      } {
        Fl_Box instrumentaddbox {
          xywh {136 9 63 16} box FLAT_BOX
        }
        Fl_Box instrumentsubbox {
          xywh {199 9 63 16} box FLAT_BOX
        }
        Fl_Box instrumentpadbox {
          xywh {262 9 63 16} box FLAT_BOX
        }
        Fl_Text_Display instrumentlabel {
          comment {We need this to stop the text ovewriting without the background redrawn}
          xywh {134 24 192 1} box NO_BOX labelfont 1 labelsize 12 align 65 textsize 12
        }
        Fl_Button instrumentlab {
          callback {//
          int event = Fl::event_button();
          const char *tmp = NULL;
          if (event == FL_LEFT_MOUSE)
              bankui->Show();
          else if (event == FL_RIGHT_MOUSE)
          {
              tmp = fl_input("Instrument name:", part->Pname.c_str());
              if (tmp != NULL and not string(tmp).empty())
              {
                  if (string(tmp) == "Simple Sound")
                      fl_alert("Can't use name of default sound");
                  else
                  {
                      unsigned char id = miscMsgPush(string(tmp));
                      send_data(222, 0, 0xd0, 0xff, 0xff, 0xff, 0xff, id);
                  }
              }
          }}
          tooltip {Left mouse button: choose/save/.. from/to bank, Right button: instrument name} xywh {134 7 192 20} box THIN_DOWN_FRAME labelfont 1 labelsize 12 align 16
          code0 {setinstrumentlabel();}
        }
        Fl_Button {} {
          label Edit
          callback {//
          instrumenteditwindow->show();}
          xywh {330 6 40 22} box PLASTIC_UP_BOX color 22 labelfont 1 labelsize 12
        }
        Fl_Dial velocitysense {
          label {Velocity
Sense}
          callback {//
          if (Fl::event_button() == 3)
              o->value(64);

          send_data(1, o->value(), 0xc8);}
          xywh {200 40 28 28} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(part->Pvelsns);}
          code1 {//o->init(64);}
          code2 {o->setValueType(VC_AmpVelocitySense);}
          class WidgetPDial
        }
        Fl_Dial velocityoffset {
          label {Velocity
Offset}
          callback {//
          if (Fl::event_button() == 3)
              o->value(64);

          send_data(4, o->value(), 0xc8);}
          xywh {244 40 28 28} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(part->Pveloffs);}
          code1 {//o->init(64);}
          class WidgetPDial
        }
        Fl_Dial partpan {
          label Pan
          callback {//;
          if (Fl::event_button() == 3)
              o->value(64);
          if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
              synth->getGuiMaster()->setPanelPartPanWidget(npart % NUM_MIDI_CHANNELS, o->value());

          send_data(2, o->value(), 0x48);}
          xywh {289 39 32 32} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_PanningStd);}
          code1 {o->value(part->Ppanning);}
          code2 {//o->init(64);}
          class WidgetPDial
        }
        Fl_Dial partvol {
          label Volume
          callback {//;
          if (Fl::event_button() == 3)
              o->value(96);
          if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
          synth->getGuiMaster()->setPanelPartVolWidget(npart % NUM_MIDI_CHANNELS, o->value());

          send_data(0, o->value(), 0x48);}
          xywh {335 39 32 32} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_PartVolume);}
          code1 {o->value(part->Pvolume);}
          code2 {//o->init(96);}
          class WidgetPDial
        }
        Fl_Check_Button enportamento {
          label Portamento
          callback {//
          send_data(7, o->value(), 0xc8);}
          tooltip {Enable/Disable the portamento} xywh {83 61 17 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelsize 11 align 8
          code0 {o->value(part->ctl->portamento.portamento);}
        }
        Fl_Spinner midich {
          label Midi
          callback {//
          int tmp = ((int)o->value() -1);
          if (tmp > 15)
          {
              tmp &= 15;
              o->value(tmp +1);
          }
          o->textcolor(FL_BLACK);
          if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
              synth->getGuiMaster()->setPanelPartMidiWidget(npart % NUM_MIDI_CHANNELS, tmp);

          send_data(5, tmp, 0xc0);}
          tooltip {MIDI channel for this part} xywh {31 36 40 19} labelsize 11 maximum 16 textsize 11
          code0 {o->value(part->Prcvchn + 1);}
          code1 {if (part->Prcvchn < NUM_MIDI_CHANNELS) o->textcolor(FL_BLACK); else o->textcolor(FL_WHITE);}
        }
        Fl_Choice keymode {
          label Mode
          callback {//
          if (o->value() > 1 && drumMode->value() != 0)
              legatoMode->labelcolor(FL_RED);
          else
              legatoMode->labelcolor(FL_BLACK);
          send_data(6, o->value(), 0xc0);}
          tooltip {Poly, Mono or Legato mode} xywh {83 36 68 19} down_box BORDER_BOX selection_color 49 labelsize 11 align 8 textfont 1 textsize 11
          code0 {int tmp = synth->ReadPartKeyMode(npart);}
          code1 {if (tmp > 1) o->value(2); else o->value(tmp);}
        } {
          MenuItem {} {
            label Poly
            xywh {0 0 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Mono
            xywh {10 10 34 20} labelfont 1 labelsize 11
          }
          MenuItem legatoMode {
            label Legato
            xywh {20 20 34 20} labelfont 1 labelsize 11
          }
        }
        Fl_Button {} {
          label Controllers
          callback {//
          if (Fl::event_button() != 3)
              ctlwindow->show();
          else
              ctlmidi->show();}
          tooltip {Left mouse button: Controller range settings, Right mouse button: MIDI CCs} xywh {8 81 167 25} box PLASTIC_UP_BOX color 222 labelsize 12
        }
        Fl_Spinner partkeyshift {
          label {Key Shift}
          callback {//
          send_data(35, o->value(), 0xc0);}
          xywh {194 111 38 20} labelsize 10 minimum -36 maximum 36 textsize 11
          code0 {o->range(MIN_KEY_SHIFT, MAX_KEY_SHIFT);o->step(1.0);}
          code1 {o->value(part->Pkeyshift - 64);}
        }
        Fl_Spinner partkeylimit {
          label {Key Limit}
          callback {//
          send_data(33, o->value(), 0xc0);}
          tooltip {Maximum keys for this part} xywh {194 143 38 20} labelsize 10 value 20 textsize 11
          code0 {o->range(1, POLIPHONY - 20); // enough for one part!}
          code1 {o->value(part->Pkeylimit);}
        }
        Fl_Spinner minkcounter {
          label {Min Note}
          callback {//
          int tmp = o->value();
          int other = maxkcounter->value();
          if (tmp > other)
          {
              tmp = other;
              o->value(tmp);
          }

          send_data(16, tmp, 0xc0);}
          tooltip {Minimum note the part receives} xywh {57 111 42 20} labelsize 10 minimum 0 maximum 127 textsize 11
          code0 {o->range(0.0, 127.0);o->step(1.0);}
          code1 {o->value(part->Pminkey);}
        }
        Fl_Spinner maxkcounter {
          label {Max Note}
          callback {//
          int tmp = o->value();
          int other = minkcounter->value();
          if (tmp < other)
          {
              tmp = other;
              o->value(tmp);
          }

          send_data(17, tmp, 0xc0);}
          tooltip {Maximum note the part receives} xywh {57 143 42 20} labelsize 10 minimum 0 maximum 127 textsize 11
          code0 {o->range(0.0, 127.0);o->step(1.0);}
          code1 {o->value(part->Pmaxkey);}
        }
        Fl_Button {} {
          label Set
          callback {//
          if (part->lastnote >= 0)
              minkcounter->value(part->lastnote);

          send_data(18, o->value(), 0xc0);}
          tooltip {Set minimum note to the last note played} xywh {104 111 30 16} box PLASTIC_UP_BOX labelsize 10
        }
        Fl_Button {} {
          label R
          callback {//
          minkcounter->value(0);
          maxkcounter->value(127);

          send_data(20, o->value(), 0xc0);}
          tooltip {Reset the minimum key to 0 and maximum key to 127} xywh {104 129 30 16} box PLASTIC_UP_BOX labelfont 1 labelsize 11
        }
        Fl_Button {} {
          label Set
          callback {//
          if (part->lastnote >= 0) maxkcounter->value(part->lastnote);

          send_data(19, o->value(), 0xc0);}
          tooltip {Set maximum note to the last note played} xywh {104 147 30 16} box PLASTIC_UP_BOX labelsize 10
        }
        Fl_Box {} {
          xywh {240 96 134 69} box ENGRAVED_FRAME
        }
      }
      Fl_Check_Button partGroupEnable {
        label Enabled
        callback {//;
        if (o->value() != 1)
        {
            partgroupui->deactivate();
            toSysEfx->deactivate();
        }
        else
        {
            partgroupui->activate();
            toSysEfx->activate();
        }

        if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
        {
            synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->partenabled->value(o->value());
            if (o->value() != 1)
                synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->panellistitemgroup->deactivate();
            else
            synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->panellistitemgroup->activate();
        }

        send_data(8, o->value(), 0xc0);}
        xywh {58 59 20 20} down_box DOWN_BOX labelsize 11 align 4
        code0 {o->value(part->Penabled == 1);}
      }
      Fl_Box {} {
        label Mask
        xywh {242 98 128 63} box FLAT_BOX labeltype NO_LABEL
      }
      Fl_Scroll toSysEfx {
        label {System Effect Sends}
        xywh {245 111 127 52} labelsize 11
        code0 {if (part->Penabled != 1)
        {
            toSysEfx->deactivate();
        }
        else
        {
           toSysEfx->activate();
        }}
      } {
        Fl_Pack {} {
          label {To Sys Efx} open
          xywh {246 113 126 45} type HORIZONTAL labeltype NO_LABEL labelsize 11 align 0
          code0 {o->spacing(8);}
          code1 {//
              for (int i = 0; i < NUM_SYS_EFX; ++i)
            {
              psyef[i] = new PartSysEffSend(0, 0, 25, 25);
              psyef[i]->init(npart, i, synth);
            }}
        } {}
      }
    }
    Fl_Window ctlwindow {
      label Controllers
      xywh {756 52 505 130} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("Controllers").c_str());}
      code1 {o->position(synth->getGuiMaster()->controllersX, synth->getGuiMaster()->controllersY);}
    } {
      Fl_Dial volrng {
        label {Vol Rng}
        callback {//
        send_data(128, o->value(), 0xc8);}
        tooltip {Volume Range} xywh {132 55 30 30} labelsize 10 minimum 64 maximum 127 step 1
        code0 {o->value(part->ctl->volume.data);}
        code1 {o->init(96);}
        class WidgetPDial
      }
      Fl_Check_Button vol {
        label Vol
        callback {//
        send_data(129, o->value(), 0xc0);}
        tooltip {Volume enable} xywh {175 81 45 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->volume.receive);}
      }
      Fl_Dial panwidth {
        label PanWdth
        callback {//
        send_data(130, o->value(), 0xc8);}
        tooltip {Panning Width} xywh {10 55 30 30} labelsize 10 maximum 64 step 1
        code0 {o->value(part->ctl->panning.depth);}
        code1 {o->init(64);}
        class WidgetPDial
      }
      Fl_Dial modwh {
        label ModWh
        callback {//
        send_data(131, o->value(), 0xc8);}
        tooltip {Modulation Wheel depth} xywh {50 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->modwheel.depth);}
        code1 {o->init(80);}
        class WidgetPDial
      }
      Fl_Check_Button expmwh {
        label {Exp MWh}
        callback {//
        send_data(132, o->value(), 0xc0);}
        tooltip {Exponential modulation wheel} xywh {10 15 40 25} down_box DOWN_BOX labelsize 10 align 148
        code0 {o->value(part->ctl->modwheel.exponential);}
      }
      Fl_Dial bwdpth {
        label BwDpth
        callback {//
        send_data(133, o->value(), 0xc8);}
        tooltip {BandWidth depth} xywh {132 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->bandwidth.depth);}
        code1 {o->init(64);}
        class WidgetPDial
      }
      Fl_Check_Button expbw {
        label {Exp BW}
        callback {//
        send_data(134, o->value(), 0xc0);}
        tooltip {Exponential BandWidth Controller} xywh {92 15 35 25} down_box DOWN_BOX labelsize 10 align 148
        code0 {o->value(part->ctl->bandwidth.exponential);}
      }
      Fl_Check_Button expr {
        label Expr
        callback {//
        send_data(135, o->value(), 0xc0);}
        tooltip {Expression enable} xywh {175 59 45 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->expression.receive);}
      }
      Fl_Check_Button fmamp {
        label FMamp
        callback {//
        send_data(136, o->value(), 0xc0);}
        tooltip {FM amplitude enable} xywh {225 59 60 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->fmamp.receive);}
      }
      Fl_Check_Button sustain {
        label Sustain
        callback {//
        send_data(137, o->value(), 0xc0);}
        tooltip {Sustain pedal enable} xywh {225 81 60 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->sustain.receive);}
      }
      Fl_Check_Button breath {
        label Breath
        callback {//
        send_data(141, o->value(), 0xc0);}
        tooltip {Breath Control enable} xywh {225 38 60 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->PbreathControl == 2);}
      }
      Fl_Counter pwheelbrng {
        label {PWheel Rng (cents)}
        callback {//
        if (Fl::event_button() == 3)
            o->value(200);
        send_data(138, o->value(), 0xc8);}
        tooltip {Pitch Wheel Bend Range (cents)} xywh {174 15 110 20} color 237 selection_color 0 labelsize 10 align 1 minimum -6400 maximum 6400 step 1
        code0 {o->value(part->ctl->pitchwheel.bendrange);}
        code1 {o->lstep(100);}
      }
      Fl_Dial filtq {
        label FltQ
        callback {//
        send_data(139, o->value(), 0xc8);}
        tooltip {Filter Q depth} xywh {50 55 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filterq.depth);}
        code1 {o->init(64);}
        class WidgetPDial
      }
      Fl_Dial fltcut {
        label FltCut
        callback {//
        send_data(140, o->value(), 0xc8);}
        tooltip {Filter Cutoff depth} xywh {90 55 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filtercutoff.depth);}
        code1 {o->init(64);}
        class WidgetPDial
      }
      Fl_Button {} {
        label Close
        callback {//
        ctlwindow->hide();}
        xywh {405 105 95 20} box THIN_UP_BOX
      }
      Fl_Button {} {
        label {Reset all controllers}
        callback {//
        send_data(224, o->value(), 0xd0);}
        xywh {5 105 210 20} box THIN_UP_BOX
      }
      Fl_Group {} {
        label Resonance
        xywh {290 15 45 85} box ENGRAVED_BOX labelfont 1 labelsize 10 align 5
      } {
        Fl_Dial cfdpth {
          label CFdpth
          callback {//
          send_data(144, o->value(), 0xc8);}
          tooltip {Center Frequency controller Depth} xywh {300 20 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->resonancecenter.depth);}
          code1 {o->init(64);}
          class WidgetPDial
        }
        Fl_Dial rbwdpth {
          label BWdpth
          callback {//
          send_data(145, o->value(), 0xc8);}
          tooltip {BandWidth controller depth} xywh {300 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->resonancebandwidth.depth);}
          code1 {o->init(64);}
          class WidgetPDial
        }
      }
      Fl_Group {} {
        label Portamento
        xywh {340 15 160 85} box ENGRAVED_FRAME labelfont 1 labelsize 10
      } {
        Fl_Box {} {
          label {x100 cnt.}
          xywh {400 50 55 15} labelsize 10 align 16
        }
        Fl_Dial prtime {
          label time
          callback {//
          send_data(160, o->value(), 0xc8);}
          tooltip {Portamento time} xywh {345 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.time);}
          code1 {o->init(64);}
          class WidgetPDial
        }
        Fl_Dial timedu {
          label {t.dn/up}
          callback {//
          send_data(161, o->value(), 0xc8);}
          tooltip {Portamento time stretch (up/down)} xywh {375 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.updowntimestretch);}
          code1 {o->init(64);}
          class WidgetPDial
        }
        Fl_Counter thresh {
          label Thresh
          callback {//
          send_data(162, o->value(), 0xc8);}
          tooltip {Minimum or max. difference of the notes in order to do the portamento (x 100 cents)} xywh {400 20 50 20} type Simple color 237 selection_color 0 labelsize 10 minimum 0 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.pitchthresh);}
        }
        Fl_Check_Button thtype {
          label {th.type}
          callback {//
          send_data(163, o->value(), 0xc0);}
          tooltip {Threshold type (min/max)} xywh {425 68 15 15} down_box DOWN_BOX labelsize 10 align 2
          code0 {o->value(part->ctl->portamento.pitchthreshtype);}
        }
        Fl_Dial propta {
          label {Prp.Rate}
          callback {//
          send_data(165, o->value(), 0xc8);}
          tooltip {Distance required to double change from nonpropotinal portamento time} xywh {463 20 25 25} labelsize 9 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.propRate);}
          code1 {o->init(80);}
          class WidgetPDial
        }
        Fl_Dial proptb {
          label {Prp.Dpth}
          callback {//
          send_data(166, o->value(), 0xc8);}
          tooltip {The difference from nonproportinal portamento} xywh {463 60 25 25} labelsize 9 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.propDepth);}
          code1 {o->init(90);}
          class WidgetPDial
        }
        Fl_Check_Button rcv {
          label Rcv
          callback {//
          send_data(168, o->value(), 0xc0);}
          tooltip {Receive Portamento Controllers} xywh {345 20 40 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
          code0 {o->value(part->ctl->portamento.receive);}
        }
        Fl_Check_Button proprt {
          label {Proprt.}
          callback {//
          if(o->value())
          {
              propta->activate();
              proptb->activate();
          }
          else
          {
              propta->deactivate();
              proptb->deactivate();
          }
          send_data(164, o->value(), 0xc0);}
          tooltip {Enable Proportinal Portamento (over fixed Portamento)} xywh {345 40 50 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 9
          code0 {o->value(part->ctl->portamento.proportional);}
          code1 {if(o->value()){propta->activate();proptb->activate();}}
          code2 {else {propta->deactivate();proptb->deactivate();}}
        }
      }
    }
    Fl_Window ctlmidi {
      label {MIDI Controls}
      xywh {661 261 365 60} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("MIDI Controls").c_str());}
      code1 {o->position(synth->getGuiMaster()->controllersX, synth->getGuiMaster()->controllersY);}
    } {
      Fl_Dial modulation {
        label Modulation
        callback {//
        if (Fl::event_button() == 3)
            o->value(64);
        send_data(192, o->value(), 0xc8);}
        tooltip {Modulation Wheel} xywh {20 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->modwheel.data);}
        class WidgetPDial
      }
      Fl_Dial expression {
        label Expression
        callback {//
        if (Fl::event_button() == 3)
            o->value(127);
        send_data(194,  o->value(), 0xc8);}
        tooltip Expression xywh {80 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->expression.data);}
        class WidgetPDial
      }
      Fl_Dial filterq {
        label {Filter Q}
        callback {//
        if (Fl::event_button() == 3)
            o->value(64);
        send_data(197, o->value(), 0xc8);}
        tooltip {Filter Q} xywh {140 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filterq.data);}
        class WidgetPDial
      }
      Fl_Dial filtercutoff {
        label {Filter Cutoff}
        callback {//
        if (Fl::event_button() == 3)
            o->value(64);
        send_data(198, o->value(), 0xc8);}
        tooltip {Filter Cutoff} xywh {200 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filtercutoff.data);}
        class WidgetPDial
      }
      Fl_Dial masterbandwidth {
        label Bandwidth
        callback {//
        if (Fl::event_button() == 3)
            o->value(64);
        send_data(199, o->value(), 0xc8);}
        tooltip {Master Bandwidth} xywh {260 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->bandwidth.data);}
        class WidgetPDial
      }
      Fl_Button {} {
        label Close
        callback {//
        ctlmidi->hide();}
        xywh {309 35 50 20} box THIN_UP_BOX
      }
    }
    Fl_Window partfx {
      label {Part's Insert Effects}
      xywh {134 114 385 160} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("Insert Effects").c_str());}
    } {
      Fl_Spinner inseffnocounter {
        callback {//
        ninseff = o->value() - 1;
        insefftype->value(part->partefx[ninseff]->geteffect());

        inseffectui->refresh(part->partefx[ninseff], npart, ninseff);
        int x = part->Pefxroute[ninseff];
        if (x == 127)
            x = 1;
        bypasseff->value(part->Pefxbypass[ninseff]);
        sendtochoice->value(x);

        send_data(64, ninseff, 0xc0, 0xff, ninseff);}
        tooltip {Effect No.} xywh {35 8 35 22} labelsize 12 maximum 3 textsize 11
        code1 {o->value(ninseff+1);}
      }
      Fl_Choice insefftype {
        callback {//
        send_data(65, o->value(), 0xd0, 0xff, ninseff);}
        tooltip {Effect Type} xywh {104 8 95 22} box UP_BOX down_box BORDER_BOX labelsize 11
        code0 {o->value(part->partefx[ninseff]->geteffect());}
      } {
        MenuItem {} {
          label {No Effect}
          xywh {35 35 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Reverb
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Echo
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Chorus
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Phaser
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label AlienWah
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Distortion
          xywh {90 90 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label EQ
          xywh {100 100 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label DynFilter
          xywh {110 110 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Group inseffectuigroup {
        xywh {5 37 380 96} box FLAT_BOX color 48
      } {
        Fl_Group inseffectui {
          xywh {5 38 379 95}
          code0 {o->init(part->partefx[ninseff], npart, ninseff);}
          class EffUI
        } {}
      }
      Fl_Button {} {
        label Close
        callback {//
        partfx->hide();
        if ((Fl::event_button() == 3))
            synth->getGuiMaster()->partui->instrumenteditwindow->show();}
        xywh {314 136 60 20} box THIN_UP_BOX
      }
      Fl_Choice sendtochoice {
        label To
        callback {//
        send_data(66, o->value(), 0xc0, 0xff, ninseff);}
        xywh {244 8 90 22} down_box BORDER_BOX labelfont 1 labelsize 11
        code0 {int x=part->Pefxroute[ninseff]; if (x==127) x=1;}
        code1 {o->value(x);}
      } {
        MenuItem {} {
          label {Next Effect}
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Part Out}
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Dry Out}
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Check_Button bypasseff {
        label Bypass
        callback {//
        send_data(67, o->value(), 0xc0, 0xff, ninseff);}
        tooltip {if the effect is not used (is bypassed)} xywh {55 135 20 22} down_box DOWN_BOX labelsize 12 align 4
        code0 {int x=part->Pefxbypass[ninseff];o->value(x);}
      }
      Fl_Button {} {
        label C
        callback {//
        synth->getGuiMaster()->getPresetsUi()->copy(part->partefx[ninseff]);}
        xywh {350 3 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {//
        synth->getGuiMaster()->getPresetsUi()->paste(part->partefx[ninseff], inseffectui);}
        xywh {350 19 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
    }
    Fl_Window instrumentkitlist {
      label {Instrument Kit}
      xywh {355 84 670 370} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("kit List").c_str());}
    } {
      Fl_Button {} {
        label Close
        callback {//
        instrumentkitlist->hide();
        if ((Fl::event_button() == 3))
        synth->getGuiMaster()->partui->instrumenteditwindow->show();}
        xywh {569 348 63 20} box THIN_UP_BOX
      }
      Fl_Scroll kitlist {
        xywh {0 15 670 330} type VERTICAL box THIN_UP_BOX
      } {
        Fl_Pack {} {
          xywh {0 20 670 320}
          code0 {for (int i=0;i<NUM_KIT_ITEMS;i++){partkititem[i]=new PartKitItem(0,0,670,20,"");partkititem[i]->init(part, i, npart, this);}}
        } {}
      }
      Fl_Box {} {
        label {No.}
        xywh {10 0 25 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Mute
        xywh {55 0 25 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label {Min key}
        xywh {235 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label {Max key}
        xywh {345 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label ADsynth
        xywh {410 0 50 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label SUBsynth
        xywh {470 0 60 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Choice kitMode {
        label Mode
        callback {//
        int tmp = o->value();
        partKitOn = tmp > 0;
        if (partKitOn)
            kitlist->activate();
        else
            kitlist->deactivate();

        send_data(58, tmp, 0xc0);}
        tooltip {Single = only 1st item in defined note range sounds} xywh {35 348 88 19} down_box BORDER_BOX labelsize 11 textfont 1 textsize 11
        code0 {if (part->Pkitfade) {o->value(3);} else {o->value(part->Pkitmode);}}
        code1 {partKitOn = o->value() > 0;}
        code2 {if (!partKitOn) kitlist->deactivate();}
      } {
        MenuItem {} {
          label {     Off}
          xywh {0 0 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label {    Multi}
          xywh {10 10 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label {  Single}
          xywh {20 20 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label Crossfade
          xywh {0 0 34 20} labelfont 1 labelsize 11
        }
      }
      Fl_Check_Button drumMode {
        label {Drum mode}
        callback {//
        send_data(57, o->value(), 0xd0);}
        tooltip {Disables microtonal tuning} xywh {285 350 15 15} down_box DOWN_BOX labelsize 10
        code0 {o->value(part->Pdrummode);}
      }
      Fl_Box {} {
        label {FX.r.}
        xywh {620 0 30 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label PADsynth
        xywh {540 0 60 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Name
        xywh {137 0 40 15} labelfont 1 labelsize 11 align 18
      }
    }
    Fl_Window instrumenteditwindow {
      label {Instrument Edit}
      xywh {950 85 395 360} type Double hide
      code0 {seteditname();}
      code1 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("Instrument Edit").c_str());}
    } {
      Fl_Group {} {
        xywh {0 220 395 110} box ENGRAVED_FRAME
      } {
        Fl_Group ADD {
          label ADDsynth
          xywh {5 245 100 80} box ENGRAVED_FRAME labelfont 1
        } {
          Fl_Check_Button adsynenabledcheck {
            label Enabled
            callback {//
            int x = o->value();
            if (x == 0)
                adeditbutton->deactivate();
            else
                adeditbutton->activate();
            partkititem[0]->adcheck->value(x);
            if (partKitOn)
            {
            if (x == 0)
                partkititem[0]->adeditbutton->deactivate();
            else
                partkititem[0]->adeditbutton->activate();
            }
            checkEngines();

            send_data(8, o->value(), 0xc8, 0xff, 0);}
            tooltip {enable/disable ADsynth} xywh {15 255 80 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 228 labelfont 1 labelsize 11
            code1 {o->value(part->kit[0].Padenabled);}
          }
          Fl_Box addbox {
            xywh {10 226 89 18} box FLAT_BOX
            code1 {if (adsynenabledcheck->value() != 0 && engine != 0) o->color(ADD_COLOUR); else o->color(BASE_COLOUR);}
          }
          Fl_Button adeditbutton {
            label Edit
            callback {//
            showparameters(0,0);
            checkEngines();
            seteditname();
            if ((Fl::event_button() == 3))
                instrumenteditwindow->hide();}
            xywh {15 281 80 34} box PLASTIC_UP_BOX color 222 selection_color 220 labelfont 1 labelsize 13 align 128
            code0 {if (part->kit[0].Padenabled==0) o->deactivate();}
          }
        }
        Fl_Group SUB {
          label SUBsynth
          xywh {105 245 100 80} box ENGRAVED_FRAME labelfont 1
        } {
          Fl_Check_Button subsynenabledcheck {
            label Enabled
            callback {//
            int x = o->value();
            if (x == 0)
                subeditbutton->deactivate();
            else
                subeditbutton->activate();
            partkititem[0]->subcheck->value(x);
            if (partKitOn)
            {
            if (x == 0)
                partkititem[0]->subeditbutton->deactivate();
            else
                partkititem[0]->subeditbutton->activate();
            }
            checkEngines();

            send_data(8, o->value(), 0xc8, 0xff, 1);}
            tooltip {enable/disable SUBsynth} xywh {115 255 80 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 228 labelfont 1 labelsize 11
            code1 {o->value(part->kit[0].Psubenabled);}
          }
          Fl_Box subbox {
            xywh {110 226 89 18} box FLAT_BOX
            code1 {if (subsynenabledcheck->value() != 0 && engine != 0) o->color(SUB_COLOUR); else o->color(BASE_COLOUR);}
          }
          Fl_Button subeditbutton {
            label Edit
            callback {//
            showparameters(0,1);
            checkEngines();
            seteditname();
            if ((Fl::event_button() == 3))
                instrumenteditwindow->hide();}
            xywh {115 280 80 35} box PLASTIC_UP_BOX color 222 selection_color 220 labelfont 1 labelsize 13 align 128
            code0 {if (part->kit[0].Psubenabled==0) o->deactivate();}
          }
        }
        Fl_Group PAD {
          label PADsynth
          xywh {205 245 100 80} box ENGRAVED_FRAME labelfont 1
        } {
          Fl_Check_Button padsynenabledcheck {
            label Enabled
            callback {//
            int x = o->value();
            if (x == 0)
                padeditbutton->deactivate();
            else
                padeditbutton->activate();
            partkititem[0]->padcheck->value(x);
            if (partKitOn)
            {
            if (x == 0)
                partkititem[0]->padeditbutton->deactivate();
            else
                partkititem[0]->padeditbutton->activate();
            }
            checkEngines();

            send_data(8, o->value(), 0xc8, 0xff, 2);}
            tooltip {enable/disable PADsynth} xywh {215 255 80 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 228 labelfont 1 labelsize 11
            code1 {o->value(part->kit[0].Ppadenabled);}
          }
          Fl_Box padbox {
            xywh {210 226 89 18} box FLAT_BOX
            code1 {if (padsynenabledcheck->value() != 0 && engine != 0) o->color(PAD_COLOUR); else o->color(BASE_COLOUR);}
          }
          Fl_Button padeditbutton {
            label Edit
            callback {//
            showparameters(0,2);
            checkEngines();
            seteditname();
            if ((Fl::event_button() == 3))
                instrumenteditwindow->hide();}
            xywh {215 280 80 35} box PLASTIC_UP_BOX color 222 selection_color 220 labelfont 1 labelsize 13 align 128
            code0 {if (part->kit[0].Ppadenabled==0) o->deactivate();}
          }
        }
        Fl_Button {} {
          label {Kit Edit}
          callback {//
          instrumentkitlist->show();
          if ((Fl::event_button() == 3))
              instrumenteditwindow->hide();}
          xywh {310 245 80 35} box PLASTIC_UP_BOX color 238 selection_color 220 labelfont 1 align 128
        }
        Fl_Button {} {
          label Effects
          callback {//
          partfx->show();
          if ((Fl::event_button() == 3))
              instrumenteditwindow->hide();}
          xywh {310 290 80 35} box PLASTIC_UP_BOX color 230 labelfont 1 labelsize 13
        }
      }
      Fl_Group {} {
        xywh {0 5 395 215} box ENGRAVED_FRAME
      } {
        Fl_Input {} {
          label {Author and Copyright}
          callback {//
          part->info.Pauthor = string(o->value());}
          xywh {5 60 385 50} type Multiline color 26 labelsize 10 align 5
          code0 {o->maximum_size(MAX_INFO_TEXT_SIZE);}
          code1 {o->value(part->info.Pauthor.c_str());}
        }
        Fl_Input {} {
          label Comments
          callback {//
          part->info.Pcomments = string(o->value());}
          xywh {5 125 385 90} type Multiline color 26 labelsize 11 align 5
          code0 {o->maximum_size(MAX_INFO_TEXT_SIZE);}
          code1 {o->value(part->info.Pcomments.c_str());}
        }
        Fl_Choice {} {
          label {Type:}
          callback {//
          part->info.Ptype=o->value();}
          xywh {5 25 155 20} down_box BORDER_BOX labelfont 1 labelsize 11 align 5 textsize 10
          code0 {o->value(part->info.Ptype);}
        } {
          MenuItem {} {
            label {--------------------------}
            xywh {20 20 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Piano
            xywh {10 10 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Chromatic Percussion}
            xywh {20 20 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Organ
            xywh {30 30 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Guitar
            xywh {40 40 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Bass
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Solo Strings}
            xywh {60 60 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Ensemble
            xywh {70 70 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Brass
            xywh {80 80 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Reed
            xywh {90 90 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Pipe
            xywh {100 100 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Synth Lead}
            xywh {110 110 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Synth Pad}
            xywh {120 120 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Synth Effects}
            xywh {130 130 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Ethnic
            xywh {140 140 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Percussive
            xywh {150 150 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Sound Effects}
            xywh {160 160 100 20} labelfont 1 labelsize 11
          }
        }
      }
      Fl_Value_Slider humanise {
        label Humanise
        callback {//
        if (Fl::event_button() == 3)
            o->value(0);

        send_data(48, o->value(), 0xc8);}
        tooltip {Random detune of whole part in cents} xywh {8 337 201 16} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 8 maximum 50 step 1
        code0 {o->value(part->Pfrand);}
        class mwheel_val_slider_rev
      }
      Fl_Button {} {
        label Close
        callback {instrumenteditwindow->hide();}
        xywh {311 335 80 21} box THIN_UP_BOX labelfont 1 labelsize 13
      }
    }
  }
  Function {send_data(int control, float value, int type, int kititem = 0xff, int engine = 0xff, int insert = 0xff, int parameter = 0xff, int par2 = 0xff)} {} {
    code {//
    collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, engine, insert, parameter, par2);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char newpart = getData->data.part;
    unsigned char kititem = getData->data.kit;
    unsigned char engine = getData->data.engine;
    unsigned char insert = getData->data.insert;

    bool valBool = (value > 0.5f);
    int valInt = lrint(value);

    // these are specific to the mixer panel
    if (newpart >= *plgroup && newpart < (*plgroup + NUM_MIDI_CHANNELS))
    {
        int displaypart = newpart % NUM_MIDI_CHANNELS;
        switch (control)
        {
            case 0:
                synth->getGuiMaster()->panellistitem[displaypart]->partvolume->value(value);
                break;
            case 2:
                synth->getGuiMaster()->panellistitem[displaypart]->partpanning->value(value);
                break;
            case 5:
                synth->getGuiMaster()->panellistitem[displaypart]->partrcv->value(valInt & 0xf);
                if (valInt < (NUM_MIDI_CHANNELS - 1))
                    synth->getGuiMaster()->panellistitem[displaypart]->partrcv->textcolor(FL_BLACK);
                else
                    synth->getGuiMaster()->panellistitem[displaypart]->partrcv->textcolor(FL_WHITE);
                break;
            case 8:
                if (engine == 255)
                {
                    synth->getGuiMaster()->panellistitem[displaypart]->partenabled->value(valBool);
                    if (valBool)
                        synth->getGuiMaster()->panellistitem[displaypart]->panellistitemgroup->activate();
                    else
                        synth->getGuiMaster()->panellistitem[displaypart]->panellistitemgroup->deactivate();
                }
                break;
            case 120:
                int send = valInt - 1;
                if (send < 0 or send > 2)
                    send = 0;
                synth->getGuiMaster()->panellistitem[displaypart]->audiosend->value(send);
        }
    }
    if (npart != newpart && control != 8)
        return;

    bool sameEff = (engine == (inseffnocounter->value() - 1));
    bool kitType = (insert == 0x20);
    switch(control)
    {
        case 0:
            partvol->value(value);
            break;

        case 1:
            velocitysense->value(value);
            break;

        case 2:
            partpan->value(value);
            break;

        case 4:
            velocityoffset->value(value);
            break;

        case 5:
            midich->value(valInt + 1);
            if (valInt < NUM_MIDI_CHANNELS)
                midich->textcolor(FL_BLACK);
            else
                midich->textcolor(FL_WHITE);
            break;

        case 6:
            legatoMode->labelcolor(FL_BLACK);
            if(valInt > 1)
            {
                keymode->value(2);
                if (drumMode->value())
                    legatoMode->labelcolor(FL_RED);
            }
            else
                keymode->value(valInt);
            keymode->damage(1);
            break;

        case 7:
            enportamento->value(valBool);
            break;

        case 8:
        {
            if (kitType)
            {
                switch(engine)
                {
                    case 0:
                        partkititem[kititem]->adcheck->value(valBool);
                        if (valBool)
                        {
                            partkititem[kititem]->adeditbutton->activate();
                            instrumentaddbox->color(ADD_COLOUR);
                        }
                        else
                        {
                            partkititem[kititem]->adeditbutton->deactivate();
                            instrumentaddbox->color(BASE_COLOUR);
                        }
                        break;
                    case 1:
                        partkititem[kititem]->subcheck->value(valBool);
                        if (valBool)
                        {
                            partkititem[kititem]->subeditbutton->activate();
                            instrumentsubbox->color(SUB_COLOUR);
                        }
                        else
                        {
                            partkititem[kititem]->subeditbutton->deactivate();
                            instrumentsubbox->color(BASE_COLOUR);
                        }
                        break;
                    case 2:
                        partkititem[kititem]->padcheck->value(valBool);
                        if (valBool)
                        {
                            partkititem[kititem]->padeditbutton->activate();
                            instrumentpadbox->color(PAD_COLOUR);
                        }
                        else
                        {
                            partkititem[kititem]->padeditbutton->deactivate();
                            instrumentpadbox->color(BASE_COLOUR);
                        }
                        break;
                    default:
                        partkititem[kititem]->enabledcheck->value(valBool);
                        if (valBool)
                            partkititem[kititem]->partkititemgroup->activate();
                        else
                            partkititem[kititem]->clearLine();
                        break;
                }
                if (kititem == 0)
                {
                    switch(engine)
                    {
                        case 0:
                            partkititem[kititem]->adcheck->value(valBool);
                            adsynenabledcheck->value(valBool);
                            if (valBool)
                            {
                                adeditbutton->activate();
                                addbox->color(ADD_COLOUR);
                                instrumentaddbox->color(ADD_COLOUR);
                            }
                            else
                            {
                                adeditbutton->deactivate();
                                addbox->color(BASE_COLOUR);
                                instrumentaddbox->color(BASE_COLOUR);
                            }
                            break;
                        case 1:
                            partkititem[kititem]->subcheck->value(valBool);
                            subsynenabledcheck->value(valBool);
                            if (valBool)
                            {
                                subeditbutton->activate();
                                subbox->color(SUB_COLOUR);
                                instrumentsubbox->color(SUB_COLOUR);
                            }
                            else
                            {
                                subeditbutton->deactivate();
                                subbox->color(BASE_COLOUR);
                                instrumentsubbox->color(BASE_COLOUR);
                            }
                            break;
                        case 2:
                            partkititem[kititem]->padcheck->value(valBool);
                            padsynenabledcheck->value(valBool);
                            if (valBool)
                            {
                                padeditbutton->activate();
                                padbox->color(PAD_COLOUR);
                                instrumentpadbox->color(PAD_COLOUR);
                            }
                            else
                            {
                                padeditbutton->deactivate();
                                padbox->color(BASE_COLOUR);
                                instrumentpadbox->color(BASE_COLOUR);
                            }
                            break;
                    }
                }
            }
            else
            {
                switch(engine)
                {
                    case 0:
                        partkititem[0]->adcheck->value(valBool);
                        adsynenabledcheck->value(valBool);
                        if (valBool)
                        {
                            adeditbutton->activate();
                            addbox->color(ADD_COLOUR);
                            instrumentaddbox->color(ADD_COLOUR);
                        }
                        else
                        {
                            adeditbutton->deactivate();
                            addbox->color(BASE_COLOUR);
                            instrumentaddbox->color(BASE_COLOUR);
                        }
                        break;
                    case 1:
                        partkititem[0]->subcheck->value(valBool);
                        subsynenabledcheck->value(valBool);
                        if (valBool)
                        {
                            subeditbutton->activate();
                            subbox->color(SUB_COLOUR);
                            instrumentsubbox->color(SUB_COLOUR);
                        }
                        else
                        {
                            subeditbutton->deactivate();
                            subbox->color(BASE_COLOUR);
                            instrumentsubbox->color(BASE_COLOUR);
                        }
                        break;
                    case 2:
                        partkititem[0]->padcheck->value(valBool);
                        padsynenabledcheck->value(valBool);
                        if (valBool)
                        {
                            padeditbutton->activate();
                            padbox->color(PAD_COLOUR);
                            instrumentpadbox->color(PAD_COLOUR);
                        }
                        else
                        {
                            padeditbutton->deactivate();
                            padbox->color(BASE_COLOUR);
                            instrumentpadbox->color(BASE_COLOUR);
                        }
                        break;
                    case 255:
                        partGroupEnable->value(valBool);
                        if (valBool)
                        {
                            partgroupui->activate();
                            toSysEfx->activate();
                        }
                        else
                        {
                            partgroupui->deactivate();
                            toSysEfx->deactivate();
                        }
                        break;
                }
            }
            instrumentlabel->copy_label(part->Pname.c_str());
            synth->getGuiMaster()->updatepanel();
            break;
        }
        case 9:
            partkititem[kititem]->mutedcheck->value(valBool);
            break;
        case 16:
        case 18: // this will have been modifed for last key press
            if (kitType)
               partkititem[kititem]->minkcounter->value(valInt);
            else
                minkcounter->value(valInt);
            break;

        case 17:
        case 19: // this will have been modifed for last key press
            if (kitType)
                partkititem[kititem]->maxkcounter->value(valInt);
            else
                maxkcounter->value(valInt);
            break;

        case 20:
            if (kitType)
            {
                partkititem[kititem]->minkcounter->value(0);
                partkititem[kititem]->maxkcounter->value(127);
            }
            else
            {
                minkcounter->value(0);
                maxkcounter->value(127);
            }
            break;

        case 24:
            partkititem[kititem]->sendtoeffect->value(valInt);
            break;

        case 33:
            partkeylimit->value(valInt);
            break;

        case 35:
            partkeyshift->value(valInt);
            break;

        case 40:
        case 41:
        case 42:
        case 43:
            psyef[control - 40]->sysend->value(value);
            break;

        case 57:
            drumMode->value(valBool);
            if (valBool && keymode->value() > 1)
                legatoMode->labelcolor(FL_RED);
            else
                legatoMode->labelcolor(FL_BLACK);
            keymode->damage(1);
            break;

        case 58:
            kitMode->value(valInt);
            partKitOn =  (kitMode->value() > 0);
            if (partKitOn > 0)
                kitlist->activate();
            else
                kitlist->deactivate();
            break;

        case 48:
            humanise->value(valInt);
            break;

        case 65:
            if (sameEff)
            {
                insefftype->value(valInt);
                part->partefx[engine]->geteffect();
                inseffectui->refresh(part->partefx[engine], npart, engine);
            }
            break;

        case 66:
            if (sameEff)
                sendtochoice->value(valInt);
            break;

        case 67:
            if (sameEff)
                bypasseff->value(valBool);
            break;

        case 96: // now done in master
            break;

// controllers
        case 128:
            volrng->value(valInt);
            break;

        case 129:
            vol->value(valInt);
            break;

        case 130:
            panwidth->value(valInt);
            break;

        case 131:
            modwh->value(valInt);
            break;

        case 132:
            expmwh->value(valInt);
            break;

        case 133:
            bwdpth->value(valInt);
            break;

        case 134:
            expbw->value(valInt);
            break;

        case 135:
            expr->value(valInt);
            break;

        case 136:
            fmamp->value(valInt);
            break;

        case 137:
            sustain->value(valInt);
            break;

        case 138:
            pwheelbrng->value(valInt);
            break;

        case 139:
            filtq->value(valInt);
            break;

        case 140:
            fltcut->value(valInt);
            break;

        case 141:
            breath->value(valBool);
            break;

        case 144:
            cfdpth->value(valInt);
            break;

        case 145:
            rbwdpth->value(valInt);
            break;

        case 160:
            prtime->value(valInt);
            break;

        case 161:
            timedu->value(valInt);
            break;

        case 162:
            thresh->value(valInt);
            break;

        case 163:
            thtype->value(valInt);
            break;

        case 164:
            proprt->value(valInt);
            if(value != 0)
            {
                propta->activate();
                proptb->activate();
            }
            else
            {
                propta->deactivate();
                proptb->deactivate();
            }
            break;

        case 165:
            propta->value(valInt);
            break;

        case 166:
            proptb->value(valInt);
            break;

        case 168:
            rcv->value(valInt);
            break;

        case 192:
            modulation->value(value);
            break;
        case 194:
            expression->value(value);
            break;
        case 197:
            filterq->value(value);
            break;
        case 198:
            filtercutoff->value(value);
            break;
        case 199:
            masterbandwidth->value(value);
            break;

        case 222:
            setinstrumentlabel();
            checkEngines();
            break;
        case 224:
            updatecontrollers();
            break;
        default:
            break;
    }} {}
  }
  Function {PartUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {//
    part = NULL;
    adnoteui = NULL;
    subnoteui = NULL;
    padnoteui = NULL;
    lastkititem = -1;} {}
  }
  Function {updatecontrollers()} {} {
    code {//
    enportamento->value(0);
    keymode->value(part->Pkeymode & 3);
    expmwh->value(part->ctl->modwheel.exponential);
    modwh->value(part->ctl->modwheel.depth);
    expbw->value(part->ctl->bandwidth.exponential);
    bwdpth->value(part->ctl->bandwidth.depth);
    pwheelbrng->value(part->ctl->pitchwheel.bendrange);
    panwidth->value(part->ctl->panning.depth);
    filtq->value(part->ctl->filterq.depth);
    fltcut->value(part->ctl->filtercutoff.depth);
    volrng->value(part->ctl->volume.data);
    expr->value(part->ctl->expression.receive);
    fmamp->value(part->ctl->fmamp.receive);
    vol->value(part->ctl->volume.receive);
    sustain->value(part->ctl->sustain.receive);

    cfdpth->value(part->ctl->resonancecenter.depth);
    rbwdpth->value(part->ctl->resonancebandwidth.depth);

    rcv->value(part->ctl->portamento.receive);
    thresh->value(part->ctl->portamento.pitchthresh);
    propta->value(part->ctl->portamento.propRate);
    proprt->value(part->ctl->portamento.proportional);
    if(proprt->value())
    {
        propta->activate();
        proptb->activate();
    }
    else
    {
        propta->deactivate();
        proptb->deactivate();
    }
    prtime->value(part->ctl->portamento.time);
    timedu->value(part->ctl->portamento.updowntimestretch);
    thtype->value(part->ctl->portamento.pitchthreshtype);
    proptb->value(part->ctl->portamento.propDepth);} {}
  }
  Function {init(Part *part_,int npart_,BankUI *bankui_)} {} {
    code {//
    synth = part_->getSynthEngine();
    bankui = bankui_;
    part = part_;
    npart = npart_;
    plgroup = &synth->getGuiMaster()->panelgroup;
    ninseff = 0;
    make_window();
    partgroup->position(this->parent()->x() + 2, this->parent()->y() + 2);
    partgroup->show();
    end();} {}
  }
  Function {checkEngines()} {} {
    code {//
    engine = 0;
    string instrumentName = part->Pname.c_str();
    if (synth->getRuntime().checksynthengines)
    {
        if (!partKitOn)
        {
            engine |= adsynenabledcheck->value();
            engine |= (subsynenabledcheck->value() << 1);
            engine |= (padsynenabledcheck->value() << 2);
        }
        else
        {
            for (int i = 0; i < NUM_KIT_ITEMS; ++i)
            {
                if (partkititem[i]->enabledcheck->value())
                { // nested so we don't access non existent
                    if (partkititem[i]->mutedcheck->value() == 0)
                    {
                        engine |= partkititem[i]->adcheck->value();
                        engine |= (partkititem[i]->subcheck->value() << 1);
                        engine |= (partkititem[i]->padcheck->value() << 2);
                    }
                }
            }
        }
    }
    if (engine & 1) // addsynth
    {
        addbox->color(ADD_COLOUR);
        instrumentaddbox->color(ADD_COLOUR);
    }
    else
    {
        addbox->color(BASE_COLOUR);
        instrumentaddbox->color(BASE_COLOUR);
    }
    if (engine & 2) // subynth
    {
        subbox->color(SUB_COLOUR);
        instrumentsubbox->color(SUB_COLOUR);
    }
    else
    {
        subbox->color(BASE_COLOUR);
        instrumentsubbox->color(BASE_COLOUR);
    }
    if (engine & 4) // padsynth
    {
        padbox->color(PAD_COLOUR);
        instrumentpadbox->color(PAD_COLOUR);
    }
    else
    {
        padbox->color(BASE_COLOUR);
        instrumentpadbox->color(BASE_COLOUR);
    }

    ADD->damage(1);
    instrumentaddbox->damage(1);
    SUB->damage(1);
    instrumentsubbox->damage(1);
    PAD->damage(1);
    instrumentpadbox->damage(1);
    instrumentlabel->copy_label(instrumentName.c_str());

    if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
    {
        int num = npart % NUM_MIDI_CHANNELS;
        if (engine & 1)
            synth->getGuiMaster()->panellistitem[num]->partadd->color(ADD_COLOUR);
        else
            synth->getGuiMaster()->panellistitem[num]->partadd->color(BASE_COLOUR);
        if (engine & 2)
            synth->getGuiMaster()->panellistitem[num]->partsub->color(SUB_COLOUR);
        else
            synth->getGuiMaster()->panellistitem[num]->partsub->color(BASE_COLOUR);
        if (engine & 4)
            synth->getGuiMaster()->panellistitem[num]->partpad->color(PAD_COLOUR);
        else
            synth->getGuiMaster()->panellistitem[num]->partpad->color(BASE_COLOUR);

        synth->getGuiMaster()->panellistitem[num]->partadd->damage(1);
        synth->getGuiMaster()->panellistitem[num]->partsub->damage(1);
        synth->getGuiMaster()->panellistitem[num]->partpad->damage(1);
        synth->getGuiMaster()->panellistitem[num]->partname->copy_label(instrumentName.c_str());
    }} {}
  }
  Function {showparameters(int kititem, int engine)} {} {
    code {//
    string tname;
    if (engine == -1)
    {   // this is used if I want to clear the engine from the part
        if (kititem == lastkititem)
            kititem = -1;
        else
            kititem = lastkititem;
    }
    checkEngines();
    if (part->Pname == "Simple Sound")
    {
        string instrumentName = "No Title";
        part->Pname = instrumentName;
        instrumentlabel->copy_label(instrumentName.c_str());
        if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
            synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->partname->copy_label(instrumentName.c_str());
    }

    if (kititem != lastkititem)
    {
        if (adnoteui != NULL)
            delete adnoteui;
        if (subnoteui != NULL)
            delete subnoteui;
        if (padnoteui != NULL)
            delete padnoteui;
        adnoteui = NULL;
        subnoteui = NULL;
        padnoteui = NULL;
        lastkititem = kititem;
        if (kititem >= NUM_KIT_ITEMS)
            return; // bad kit item
        if (kititem < 0)
            return;

        if (part->kit[kititem].adpars)
            adnoteui = new ADnoteUI(part->kit[kititem].adpars, npart, lastkititem);
        if (part->kit[kititem].subpars)
            subnoteui = new SUBnoteUI(part->kit[kititem].subpars, npart, lastkititem);

        if (part->kit[kititem].padpars)
            padnoteui = new PADnoteUI(part->kit[kititem].padpars, npart, lastkititem);
    }
    if (engine == 0 && adnoteui != NULL)
        tname = synth->getGuiMaster()->setPartWindowTitle("AddSynth");
    else if (engine == 1 && subnoteui != NULL)
        tname = synth->getGuiMaster()->setPartWindowTitle("SubSynth");
    else if (engine == 2 && padnoteui != NULL)
        tname = synth->getGuiMaster()->setPartWindowTitle("PadSynth");
    else return;

    if (part->Pkitmode)
    {
        tname += asString(kititem + 1);
        if(part->kit[kititem].Pname > "")
           tname += (" - " + part->kit[kititem].Pname);
    }

    if (engine == 0)
    {
        adnoteui->ADnoteGlobalParameters->copy_label(tname.c_str());
        adnoteui->ADnoteGlobalParameters->show();
    }
    else if (engine == 1)
    {
        subnoteui->SUBparameters->copy_label(tname.c_str());
        subnoteui->SUBparameters->show();
    }
    else
    {
        padnoteui->padnotewindow->copy_label(tname.c_str());
        padnoteui->padnotewindow->show();
    }} {}
  }
  Function {setinstrumentlabel()} {} {
    code {//
    engine = 0;
    if (synth->getRuntime().checksynthengines)
    {
        for(int i = 0; i < NUM_KIT_ITEMS; ++i)
        {
            if (part->kit[i].Padenabled)
                engine |= 1;
            if (part->kit[i].Psubenabled)
                engine |= 2;
            if (part->kit[i].Ppadenabled)
                engine |= 4;
        }
    }
    if (engine & 1)
        instrumentaddbox->color(ADD_COLOUR);
    else
        instrumentaddbox->color(BASE_COLOUR);
    if (engine & 2)
        instrumentsubbox->color(SUB_COLOUR);
    else
        instrumentsubbox->color(BASE_COLOUR);

    if (engine & 4)
        instrumentpadbox->color(PAD_COLOUR);
    else
        instrumentpadbox->color(BASE_COLOUR);
    if (part->PyoshiType)
        //instrumentlabel->labelfont(FL_TIMES_BOLD_ITALIC);
        instrumentlabel->labelcolor(YOSHI_COLOUR);
    else
        //instrumentlabel->labelfont(FL_HELVETICA_BOLD);
        instrumentlabel->labelcolor(0);
    instrumentlabel->copy_label(part->Pname.c_str());} {}
  }
  Function {seteditname()} {} {
    code {//
    instrumenteditwindow->copy_label(synth->getGuiMaster()->setPartWindowTitle("Edit").c_str());} {}
  }
  Function {ctlmidirefresh()} {} {
    code {//
    modulation->value(part->ctl->modwheel.data);
    expression->value(part->ctl->expression.data);
    filterq->value(part->ctl->filterq.data);
    filtercutoff->value(part->ctl->filtercutoff.data);
    masterbandwidth->value(part->ctl->bandwidth.data);} {}
  }
  Function {~PartUI()} {} {
    code {//
    if (adnoteui)
        delete adnoteui;
    if (subnoteui)
        delete subnoteui;
    if (padnoteui)
        delete padnoteui;
    partgroup->hide();
    ctlwindow->hide();
    delete ctlwindow;
    ctlmidi->hide();
    delete ctlmidi;
    partfx->hide();
    delete partfx;
    instrumentkitlist->hide();
    delete instrumentkitlist;
    instrumenteditwindow->hide();
    delete instrumenteditwindow;} {}
  }
  decl {Part *part;} {public local
  }
  decl {BankUI *bankui;} {private local
  }
  decl {ADnoteUI *adnoteui;} {public local
  }
  decl {SUBnoteUI *subnoteui;} {public local
  }
  decl {PADnoteUI *padnoteui;} {public local
  }
  decl {PartSysEffSend *psyef[NUM_SYS_EFX];} {private local
  }
  decl {int npart;} {public local
  }
  decl {int ninseff;} {private local
  }
  decl {int lastkititem;} {public local
  }
  decl {PartKitItem *partkititem[NUM_KIT_ITEMS];} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int *plgroup;} {private local
  }
  decl {int engine;} {private local
  }
  decl {bool partKitOn;} {public local
  }
}
