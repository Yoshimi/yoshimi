# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {FilterUI.h} {not_in_source in_header
}

comment {FilterUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2016-2018 Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code

Modified April 2018} {in_source in_header
}

decl {\#include "UI/MiscGui.h"} {public local
}

decl {\#include "UI/WidgetPDial.h"} {public local
}

decl {\#include "UI/WidgetMWSlider.h"} {public local
}

decl {\#include <FL/Fl_Group.H>} {public local
}

decl {\#include <FL/Fl_Box.H>} {public local
}

decl {\#include <FL/fl_draw.H>} {public local
}

decl {\#include <FL/fl_ask.H>} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

decl {\#include "Params/FilterParams.h"} {public local
}

decl {\#include "Misc/MiscFuncs.h"} {public local
}

decl {\#include <FL/Fl.H>} {private global
}

decl {\#include <FL/names.h>} {private global
}

decl {\#include "MasterUI.h"} {private global
}

decl {\#include "Misc/SynthEngine.h"} {public global
}

decl {class FilterUI;} {public global
}

class FormantFilterGraph {: {public Fl_Box, MiscFuncs}
} {
  Function {FormantFilterGraph(int x, int y, int w, int h, FilterUI& parent_,
            FilterParams *pars_, int *nvowel_, int *nformant_):
      Fl_Box(x,y,w,h), parent(parent_), pars(pars_), nvowel(nvowel_), nformant(nformant_)} {} {
    code {//
        selectedFormant = -1;
        hoverFormant = -1;
        qMode = false;
        graphpoints = new float [w];} {}
  }
  Function {draw_freq_line(float freq,int type)} {} {
    code {float freqx = pars->getfreqpos(freq);
        switch (type)
        {
            case 0:
                fl_line_style(FL_SOLID);
                break;
            case 1:
                fl_line_style(FL_DOT);
                break;
            case 2:
                fl_line_style(FL_DASH);
                break;
        }

        if (freqx > 0.0 && freqx < 1.0)
            fl_line(x() + (int) (freqx * w()), y(), x() + (int)(freqx * w()), y() + h());} {}
  }
  Function {draw()} {} {
    code {int maxdB = 30;
        int ox = x(), oy = y(), lx = w(), ly = h(), i, oiy;
        float freqx;

        fl_color(FL_BLACK);
        fl_rectf(ox, oy, lx, ly);

        //draw the lines
        fl_color(FL_GRAY);
        fl_line_style(FL_SOLID);

        freqx = pars->getfreqpos(1000.0);
        if (freqx > 0.0 && freqx < 1.0)
            fl_line(ox + (int)(freqx * lx), oy, ox + (int)(freqx * lx), oy + ly);

        for (i = 1; i < 10; ++i)
        {
            if (i == 1)
            {
                draw_freq_line(i * 100.0,0);
                draw_freq_line(i * 1000.0,0);
            }
            else if (i == 5)
            {
                draw_freq_line(i * 100.0,2);
                draw_freq_line(i * 1000.0,2);
            }
            else
            {
                draw_freq_line(i * 100.0,1);
                draw_freq_line(i * 1000.0,1);
            }
        }

        draw_freq_line(10000.0,0);
        draw_freq_line(20000.0,1);

        fl_line_style(FL_DOT);
        int GY = 10;
        if (ly < GY * 3 )
            GY = -1;
        for (i = 1; i < GY; ++i)
        {
            int tmp = (int)(ly / (float)GY * i);
            fl_line(ox + 2, oy + tmp, ox + lx - 2, oy + tmp);
        }

        fl_color(FL_YELLOW);
        fl_font(FL_HELVETICA, 10);
        if (*nformant < pars->Pnumformants)
        {
            draw_freq_line(pars->getformantfreq(pars->Pvowels[*nvowel].formants[*nformant].freq), 2);

            //show some information (like current formant frequency,amplitude)
            string tmpstr = asString((float)
                (pars->getformantfreq(pars->Pvowels[*nvowel].formants[*nformant].freq) / 1000.0))
                    + " kHz";
            fl_draw(tmpstr.c_str(), ox + 1, oy + 1, 40, 12, FL_ALIGN_LEFT, NULL, 0);
            tmpstr = asString((int)
                (rap2dB(1e-9 + pars->getformantamp(pars->Pvowels[*nvowel].formants[*nformant].amp)) + pars->getgain()))
                    + " dB";
            fl_draw(tmpstr.c_str(), ox + 1, oy + 15, 40, 12, FL_ALIGN_LEFT, NULL, 0);
        }

        if(hoverFormant >= 0 && hoverFormant != *nformant)
        {
            fl_color(fl_darker(FL_YELLOW));
            draw_freq_line(pars->getformantfreq(pars->Pvowels[*nvowel].formants[hoverFormant].freq), 0);
        }

        // draw the data
        fl_color(FL_RED);
        fl_line_style(FL_SOLID);

        pars->formantfilterH(*nvowel, lx, graphpoints);

        oiy = (int) ((graphpoints[0] / maxdB + 1.0) * ly / 2.0);
        for (i = 1; i < lx; ++i)
        {
            int iy = (int) ((graphpoints[i] / maxdB + 1.0) * ly / 2.0);
            if (iy >= 0 && oiy >= 0 && iy < ly && oiy < lx)
                fl_line(ox + i - 1, oy + ly - oiy, ox + i, oy + ly - iy);
            oiy = iy;
        }} {}
  }
  Function {~FormantFilterGraph()} {} {
    code {delete [] graphpoints;} {}
  }
  decl {FilterUI& parent;} {private local
  }
  decl {FilterParams *pars;} {private local
  }
  decl {int const *nvowel, *nformant;} {private local
  }
  decl {float *graphpoints;} {private local
  }
  decl {int selectedFormant, hoverFormant, yRef, xRef, qRef, ampRef, freqRef, cFreqRef;} {private local
  }
  decl {bool qMode;} {private local
  }
  Function {handle(int event)} {return_type int
  } {
    code {//

switch(event)
{
  case FL_ENTER: // enable keyboard and drag events
      Fl::focus(this);
      Fl::belowmouse(this);
      fl_cursor(FL_CURSOR_HAND);
      return 1;
  case FL_MOVE: // find formant closest to cursor
  {
      int minDiff = INT_MAX;
      int relPos = (int)(127.0f * ((float) Fl::event_x() / w()));
      for(int i = 0; i < pars->Pnumformants; ++i)
      {
          int diff = abs(pars->Pvowels[*nvowel].formants[i].freq - relPos);
          if(diff < minDiff)
          {
              minDiff = diff;
              hoverFormant = i;
          }
      }
      redraw();
      return 1;
  }
  case FL_PUSH:
      if(Fl::event_key() > FL_Button + FL_RIGHT_MOUSE)
      {
          handle(FL_KEYDOWN); // Non-LMB/MMB/RMB button - check for forward/backward
          return 0;
      }

      Fl::pushed(this);

       // select formant closest to cursor
      if(selectedFormant < 0 && Fl::event_button() != FL_MIDDLE_MOUSE)
      {
          selectedFormant = hoverFormant;
          delegate(parent.formantnumber, hoverFormant);
          hoverFormant = -1;
      }

      //Activate w. RMB, retain state when using MMB
      qMode = Fl::event_button() == FL_RIGHT_MOUSE
          || (Fl::event_button() == FL_MIDDLE_MOUSE && qMode);

      update_refs();

      return 1;
  case FL_DRAG: // change frequency/amplitude/q for selected formant
  {

      int hDiff = 127 * (xRef - Fl::event_x()) / w();
      int vDiff = 127 * (yRef - Fl::event_y()) / h();

      if(Fl::event_button2()) // Always prioritize center frequency changes
      {
          fl_cursor(FL_CURSOR_WE);
          delegate(parent.cfknob, limit(cFreqRef + hDiff, 0, 127));
      }
      else
      {
         fl_cursor(FL_CURSOR_MOVE);
          delegate(parent.formant_freq_dial, limit(freqRef - hDiff, 0, 127));

          if(qMode)
              delegate(parent.formant_q_dial, limit(qRef + vDiff, 0, 127));
          else
              delegate(parent.formant_amp_dial, limit(ampRef + vDiff, 0, 127));
      }
      return 1;
  }
  case FL_KEYDOWN: // changes active vowel with left/right , x/z, or forward/back mouse buttons

      if(Fl::event_key(FL_Left) || Fl::event_key(122) || Fl::event_key() == FL_Button + 8)
      {
          delegate(parent.vowelnumber, (FF_MAX_VOWELS + ((*nvowel) - 1)) % FF_MAX_VOWELS);
          hoverFormant = -1;
      }
      else if(Fl::event_key(FL_Right) || Fl::event_key(120) || Fl::event_key() == FL_Button + 9)
      {
          delegate(parent.vowelnumber, ((*nvowel) + 1) % FF_MAX_VOWELS);
          hoverFormant = -1;
      }
      return 1;
  case FL_MOUSEWHEEL:
  {
      int offset = Fl::event_dy() * (Fl::event_ctrl() ? 1 : 4);
      if(Fl::event_shift())
          delegate(parent.cfknob, limit(pars->Pcenterfreq + offset, 0, 127));
      else
          delegate(parent.octknob, limit(pars->Poctavesfreq + offset, 0, 127));
      return 1;
  }
  case FL_RELEASE:

      if(Fl::event_inside(this))
          fl_cursor(FL_CURSOR_HAND);

      if(Fl::event_button() == FL_RIGHT_MOUSE)
          qMode = false;
      else if(Fl::event_button() == FL_LEFT_MOUSE)
          qMode = true;

      if(!Fl::event_button1() && !Fl::event_button3())
      {
          selectedFormant = -1;
          return 1;
      }
      else
      {
          update_refs();
      }
      Fl::pushed(this);
      return 1;
  case FL_LEAVE:
      if(!Fl::event_inside(this)) // Cover for some strange events when clicking
      {
          hoverFormant = -1;
          qMode = false;
          redraw();
          fl_cursor(FL_CURSOR_DEFAULT);
      }
      return 1;
}

return Fl_Box::handle(event);} {}
  }
  Function {delegate(Fl_Valuator* w, int value)} {private return_type void
  } {
    code {// If widget value has changed, update and perform manual callback

        if(w->value() != value)
        {
            w->value(value);
            w->do_callback();
        }} {}
  }
  Function {update_refs()} {private return_type {inline void}
  } {
    code {//
        yRef = Fl::event_y();
        xRef = Fl::event_x();
        ampRef = pars->Pvowels[*nvowel].formants[selectedFormant].amp;
        freqRef = pars->Pvowels[*nvowel].formants[selectedFormant].freq;
        qRef = pars->Pvowels[*nvowel].formants[selectedFormant].q;
        cFreqRef = pars->Pcenterfreq;} {}
  }
}

class FilterUI {selected : {public Fl_Group,PresetsUI_}
} {
  Function {FilterUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {synth = NULL;
pars=NULL;
        velsnsamp=NULL;
        velsns=NULL;
        nvowel = 0;
        nformant = 0;
        nseqpos = 0;} {}
  }
  Function {~FilterUI()} {} {
    code {filterui->hide();
        formantparswindow->hide();
        hide();
        delete (formantparswindow);} {}
  }
  Function {make_window()} {} {
    Fl_Window filterui {
      xywh {460 79 275 75} type Double color 247 labelfont 1 labelsize 12 hide
      class Fl_Group
    } {
      Fl_Group filterparamswindow {
        label {               Filter Params}
        xywh {0 0 275 75} box PLASTIC_UP_BOX color 231 labelfont 1 labelsize 10 align 17
      } {
        Fl_Choice analogfiltertypechoice {
          label FilterType
          callback {//
          send_data(8, o->value(), 0xd0);}
          tooltip {The Filter type} xywh {5 43 50 15} down_box BORDER_BOX labelsize 10 align 6 textsize 10
          code1 {o->value(pars->Ptype);}
        } {
          MenuItem {} {
            label LPF1
            xywh {40 40 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label HPF1
            xywh {50 50 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LPF2
            xywh {60 60 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label HPF2
            xywh {70 70 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label BPF2
            xywh {82 82 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label NF2
            xywh {94 94 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label PkF2
            xywh {104 104 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LSh2
            xywh {114 114 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label HSh2
            xywh {124 124 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Choice svfiltertypechoice {
          label FilterType
          callback {//
          send_data(9, o->value(), 0xd0);}
          tooltip {The Filter type} xywh {5 43 50 15} down_box BORDER_BOX labelsize 10 align 6 textsize 10
          code1 {o->value(pars->Ptype);}
        } {
          MenuItem {} {
            label 1LPF
            xywh {134 134 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 1HPF
            xywh {144 144 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 1BPF
            xywh {154 154 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 1NF
            xywh {164 164 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Choice filtertype {
          label Category
          callback {//
          send_data(7, o->value(), 0xd0);}
          tooltip {The Category of the Filter (Analog/Formantic/etc.)} xywh {5 10 66 15} down_box BORDER_BOX labelsize 10 align 6 textsize 10
          code0 {o->value(pars->Pcategory);}
        } {
          MenuItem {} {
            label Analog
            xywh {50 50 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Formant
            xywh {60 60 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label StVarF
            xywh {70 70 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial cfreqdial {
          label {C.Freq}
          callback {//
          send_data(0, o->value(), 0xc8);}
          tooltip {Center Frequency of the Filter or the base position in the vowel's sequence} xywh {65 28 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(getFilterFreqType(filtertype->value()));}
          code1 {o->value(pars->Pfreq);}
          code2 {if (kititem == 0x88) o->init(45); else if (engine >= 0x80) o->init(50); else if (engine == 1) o->init(80); else o->init(94);}
          class WidgetPDial
        }
        Fl_Dial qdial {
          label Q
          callback {//
          send_data(1, o->value(), 0xd8);}
          tooltip {Filter resonance or bandwidth} xywh {100 28 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(pars->Pq);}
          code1 {if (kititem == 0x88) o->init(64); else if (engine >= 0x80) o->init(60); else o->init(40);}
          code2 {updateVCforQ();}
          class WidgetPDial
        }
        Fl_Dial freqtrdial {
          label {freq.tr.}
          callback {//
          send_data(2, o->value(), 0xd8);}
          tooltip {Filter frequency tracking} xywh {240 28 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code1 {o->value(pars->Pfreqtrack);}
          code2 {o->init(64);}
          class WidgetPDial
        }
        Fl_Dial vsnsadial {
          label {V.SnsA.}
          callback {//
          send_data(3, o->value(), 0xd8);}
          tooltip {Velocity sensing amount of the Filter} xywh {135 28 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {if (kititem == 0x88) o->init(4127); else if (engine >= 0x80) o->init(0); else o->init(64);}
          code1 {o->setValueType(VC_FilterVelocityAmp);}
          class WidgetPDial
        }
        Fl_Dial vsnsdial {
          label {V.Sns.}
          callback {//
          send_data(4, o->value(), 0xd8);}
          tooltip {Velocity Sensing Function of the Filter} xywh {170 28 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {if (kititem == 0x88) o->init(127); else o->init(64);}
          code1 {o->setValueType(VC_FilterVelocitySense);}
          code2 {o->setGraphicsType(VC_FilterVelocitySense);}
          class WidgetPDial
        }
        Fl_Dial gaindial {
          label gain
          callback {//
          send_data(5, o->value(), 0xd8);}
          tooltip {Filter output gain/damp} xywh {205 28 30 30} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(pars->Pgain);}
          code1 {o->init(64);}
          code2 {o->setValueType(VC_FilterGain);}
          class WidgetPDial
        }
        Fl_Choice stcounter {
          label St
          callback {//
          send_data(6, o->value(), 0xd0);}
          tooltip {Filter stages (in order to increase dB/oct. value and the order of the filter)} xywh {74 10 35 15} down_box BORDER_BOX labelsize 10 align 8 textfont 1 textsize 10
          code1 {for (int i=0;i<MAX_FILTER_STAGES;i++) {char tmp[10];snprintf(tmp,10,"%dx",i+1);o->add(tmp);};}
          code2 {o->value(pars->Pstages);}
        } {}
      }
      Fl_Button editbutton {
        label Edit
        callback {formantparswindow->show();}
        xywh {5 40 52 26} box PLASTIC_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars);}
        xywh {202 8 15 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 10 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
        xywh {220 8 15 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 10 labelcolor 7
      }
      Fl_Check_Button freqtrackoffset {
        label {0 /+}
        callback {//
        send_data(10, o->value(), 0xd0);}
        tooltip {Set frequency tracking range to 0%-200%} xywh {238 10 33 16} down_box DOWN_BOX labelsize 10 align 24
      }
    }
  }
  Function {make_formant_window()} {} {
    Fl_Window formantparswindow {
      label {Formant Filter Parameters}
      xywh {89 20 700 205} type Double labelfont 1 labelsize 12 hide
    } {
      Fl_Group {} {
        xywh {485 47 105 113} box THIN_UP_BOX
      } {
        Fl_Counter formantnumber {
          label {Formant }
          callback {//
          nformant = (int) o->value();
          update_formant_window();
          formantfiltergraph->redraw();
          //send_data(34, o->value(), 0xd0);}
          xywh {545 80 40 15} type Simple labelfont 1 labelsize 10 align 4 minimum 0 maximum 127 step 1 textsize 10
          code0 {o->bounds(0,FF_MAX_FORMANTS-1);}
          code1 {o->value(nformant);}
        }
        Fl_Counter vowelnumber {
          label {Vowel no.}
          callback {//
          nvowel = (int) o->value();
          update_formant_window();
          formantfiltergraph->redraw();
          //send_data(33, o->value(), 0xd0);}
          xywh {545 55 40 20} type Simple labelfont 1 labelsize 10 align 4 minimum 0 maximum 127 step 1 textfont 1 textsize 11
          code0 {o->bounds(0,FF_MAX_VOWELS-1);}
          code1 {o->value(nvowel);}
        }
        Fl_Group formantparsgroup {
          xywh {490 105 95 50} box ENGRAVED_FRAME
        } {
          Fl_Dial formant_freq_dial {
            label freq
            callback {//
            send_data(18, o->value(), 0xd8);}
            tooltip {Formant frequency} xywh {495 115 25 25} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
            code0 {o->init(-1);}
            class WidgetPDial
          }
          Fl_Dial formant_q_dial {
            label Q
            callback {//
            send_data(19, o->value(), 0xd8);}
            tooltip {Formant's Q} xywh {525 115 24 25} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
            code0 {o->init(64);}
            class WidgetPDial
          }
          Fl_Dial formant_amp_dial {
            label amp
            callback {//
            send_data(20, o->value(), 0xd0);}
            tooltip {Formant amplitude} xywh {555 115 24 25} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
            code0 {o->init(127);}
            class WidgetPDial
          }
        }
      }
      Fl_Group {} {
        xywh {590 47 102 113} box THIN_UP_BOX
      } {
        Fl_Counter seqsize {
          label {Seq.Size}
          callback {//
          send_data(35, o->value(), 0xd0);}
          xywh {595 62 55 20} type Simple labelfont 1 labelsize 10 align 5 minimum 0 maximum 127 step 1 textfont 1 textsize 11
          code0 {o->bounds(1,FF_MAX_SEQUENCE);}
          code1 {o->value(pars->Psequencesize);}
        }
        Fl_Counter seqpos {
          label {S.Pos.}
          callback {//
          nseqpos = (int) o->value();
          update_formant_window();
          send_data(36, o->value(), 0xc0);}
          tooltip {Current position in the sequence} xywh {595 97 40 15} type Simple labelfont 1 labelsize 10 align 9 minimum 0 maximum 127 step 1 textsize 10
          code0 {o->bounds(0,FF_MAX_SEQUENCE-1);}
          code1 {o->value(nseqpos);}
        }
        Fl_Counter vowel_counter {
          label Vowel
          callback {//
          send_data(37, o->value(), 0xd0);}
          tooltip {Vowel number at the sequence position} xywh {640 97 40 15} type Simple labelsize 10 align 1 minimum 0 maximum 127 step 1 textsize 10
          code0 {o->bounds(0,FF_MAX_VOWELS-1);}
        }
        Fl_Check_Button neginput {
          label {Neg.Input}
          callback {//
          send_data(38, o->value(), 0xd0);}
          tooltip {Negate the input from LFO/envelopes/etc.} xywh {625 132 60 20} down_box DOWN_BOX labelsize 10
          code0 {o->value(pars->Psequencereversed);}
        }
        Fl_Dial strchdial {
          label Strch
          callback {//
          send_data(21, o->value(), 0xd8);}
          tooltip {Sequence Stretch} xywh {595 130 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->init(40);}
          code1 {o->value(pars->Psequencestretch);}
          code2 {o->setValueType(VC_FormFilterStretch);}
          class WidgetPDial
        }
      }
      Fl_Counter formantcount {
        label Formants
        callback {//
        send_data(32, o->value(), 0xd0);}
        xywh {485 15 65 20} type Simple labelfont 1 labelsize 10 align 1 minimum 0 maximum 127 step 1 textsize 12
        code0 {o->bounds(1,FF_MAX_FORMANTS);}
        code1 {o->value(pars->Pnumformants);}
      }
      Fl_Dial frsldial {
        label {Fr.Sl.}
        callback {//
        send_data(16, o->value(), 0xd8);}
        tooltip {Formant's Slowness (Morphing)} xywh {565 15 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 align 1 maximum 127 step 1
        code0 {o->init(64);}
        code1 {o->value(pars->Pformantslowness);}
        code2 {o->setValueType(VC_FormFilterSlowness);}
        class WidgetPDial
      }
      Fl_Value_Output centerfreqvo {
        label {C.f.}
        callback {o->value(pars->getcenterfreq()/1000.0);}
        tooltip {Center Frequency (kHz)} xywh {512 164 35 16} box THIN_DOWN_BOX labelsize 12 when 3 minimum 1 maximum 10 value 1 textfont 1 textsize 11
        code0 {o->step(0.01, 1);}
        code1 {o->value(pars->getcenterfreq()/1000.0);}
      }
      Fl_Value_Output octavesfreqvo {
        label {Oct.}
        callback {o->value(pars->getoctavesfreq());}
        tooltip {No. of octaves} xywh {512 185 35 16} box THIN_DOWN_BOX labelsize 12 when 3 minimum 1 maximum 127 value 5 textfont 1 textsize 11
        code0 {o->step(0.01, 1);}
        code1 {o->value(pars->getoctavesfreq());}
      }
      Fl_Slider cfknob {
        callback {//
        if (Fl::event_button() == 3)
            o->value(64);
        send_data(22, o->value(), 0xd8);}
        xywh {547 164 89 16} type {Horz Knob} box THIN_DOWN_BOX maximum 127 step 1
        code0 {o->value(pars->Pcenterfreq);}
        class mwheel_slider_rev
      }
      Fl_Slider octknob {
        callback {//
        if (Fl::event_button() == 3)
            o->value(64);
        send_data(23, o->value(), 0xd8);}
        xywh {547 185 90 16} type {Horz Knob} box THIN_DOWN_BOX maximum 127 step 1
        code0 {o->value(pars->Poctavesfreq);}
        class mwheel_slider_rev
      }
      Fl_Dial wvknob {
        label {Vw.Cl.}
        callback {//
        send_data(17, o->value(), 0xd8);}
        tooltip {Vowel "clearness" (transition between vowels)} xywh {600 15 25 25} box ROUND_UP_BOX labelfont 1 labelsize 10 align 1 maximum 127 step 1
        code0 {o->init(64);}
        code1 {o->value(pars->Pvowelclearness);}
        code2 {o->setValueType(VC_FormFilterClearness);}
        code3 {o->setGraphicsType(VC_FormFilterClearness);}
        class WidgetPDial
      }
      Fl_Button {} {
        label Close
        callback {formantparswindow->hide();}
        xywh {643 170 50 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars,nvowel);}
        xywh {635 25 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this,nvowel);}
        xywh {665 25 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Box {} {
        label Vowel
        xywh {635 10 55 15}
      }
    }
    code {// Formant graph
{ FormantFilterGraph* o = formantfiltergraph = new FormantFilterGraph(5, 5, 475, 195, *this, pars, &nvowel, &nformant);
      formantfiltergraph->box(FL_BORDER_BOX);
      formantparswindow->add(o);
    } // FormantFilterGraph* formantfiltergraph} {}
  }
  Function {update_formant_window()} {} {
    code {//
        formant_freq_dial->value(pars->Pvowels[nvowel].formants[nformant].freq);
        formant_q_dial->value(pars->Pvowels[nvowel].formants[nformant].q);
        formant_amp_dial->value(pars->Pvowels[nvowel].formants[nformant].amp);
        if (nformant < pars->Pnumformants)
            formantparsgroup->activate();
        else
            formantparsgroup->deactivate();

        if (nseqpos < pars->Psequencesize)
            vowel_counter->activate();
        else
            vowel_counter->deactivate();

        vowel_counter->value(pars->Psequence[nseqpos].nvowel);} {}
  }
  Function {refresh()} {} {
    code {//
        update_formant_window();
        formantfiltergraph->redraw();

        if (pars->Pcategory == 0)
            svfiltertypechoice->value(pars->Ptype);
        if (pars->Pcategory == 2)
            analogfiltertypechoice->value(pars->Ptype);

        filtertype->value(pars->Pcategory);
        cfreqdial->value(pars->Pfreq);
        freqtrackoffset->value(pars->Pfreqtrackoffset);
        freqtrdial->setValueType(getFilterFreqTrackType(freqtrackoffset->value()));
        qdial->value(pars->Pq);
        freqtrdial->value(pars->Pfreqtrack);
        gaindial->value(pars->Pgain);
        stcounter->value(pars->Pstages);
        int categ = pars->Pcategory;

        if ( categ == 0 || categ == 2)
        {
            if (categ == 0)
            {
                analogfiltertypechoice->value(pars->Ptype);
                analogfiltertypechoice->show();
                svfiltertypechoice->hide();
            }
            else
            {
                svfiltertypechoice->value(pars->Ptype);
                svfiltertypechoice->show();
                analogfiltertypechoice->hide();
            }
            editbutton->hide();
            formantparswindow->hide();
            cfreqdial->label("C.freq");
        }
        else
        {
            analogfiltertypechoice->hide();
            svfiltertypechoice->hide();
            editbutton->show();
            cfreqdial->label("BS.pos");
        }
        filterparamswindow->redraw();} {}
  }
  Function {send_data(int control, float value, int type)} {} {
    code {//
    int parameter = 255;
    int par2 = 255;
    if (control == 37)
        parameter = nseqpos;
    else if (control >= 18 && control <= 20)
    {
        parameter = nformant;
        par2 = nvowel;
    }
    collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, engine, 1, parameter, par2);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char part = getData->data.part;
    unsigned char kititem = getData->data.kit;
    unsigned char eng = getData->data.engine;
    int value_int = lrint(value);

    if (part != npart || (kititem != 136 && eng != engine))
        return;

    switch(control)
    {
        case 0:
            cfreqdial->value(value);
            break;

        case 1:
            qdial->value(value);
            formantfiltergraph->redraw();
            break;

        case 2:
            freqtrdial->value(value);
            break;

        case 3:
            vsnsadial->value(value);
            if (velsnsamp != NULL)
                *velsnsamp = value_int;
            break;

        case 4:
            vsnsdial->value(value);
            if (velsns != NULL)
                *velsns = value_int;
            break;

        case 5:
            gaindial->value(value);
            formantfiltergraph->redraw();
            break;

        case 6:
            stcounter->value(value_int);
            formantfiltergraph->redraw();
            break;

        case 7:
            filtertype->value(value_int);
            updateVCforQ();
            refresh();
            break;

        case 8:
            analogfiltertypechoice->value(value_int);
            updateVCforQ();
            break;

        case 9:
            svfiltertypechoice->value(value_int);
            break;

        case 10:
            freqtrackoffset->value(value != 0);
            freqtrdial->setValueType(getFilterFreqTrackType(value != 0));
            break;

        case 16:
            frsldial->value(value);
            break;

        case 17:
            wvknob->value(value);
            break;

        case 18:
            formant_freq_dial->value(value);
            formantfiltergraph->redraw();
            break;

        case 19:
            formant_q_dial->value(value);
            formantfiltergraph->redraw();
            break;

        case 20:
            formant_amp_dial->value(value);
            formantfiltergraph->redraw();
            break;

        case 21:
            strchdial->value(value);
            break;

        case 22:
            cfknob->value(value);
            centerfreqvo->do_callback();
            formantfiltergraph->redraw();
            break;

        case 23:
            octknob->value(value);
            octavesfreqvo->do_callback();
            formantfiltergraph->redraw();
            break;

        case 32:
            formantcount->value(value_int);
            update_formant_window();
            formantfiltergraph->redraw();
            break;

        case 33:
            nformant = value_int;
            update_formant_window();
            formantfiltergraph->redraw();
            break;

        case 34:
            nvowel = value_int;
            update_formant_window();
            formantfiltergraph->redraw();
            break;

        case 35:
            seqsize->value(value_int);
            update_formant_window();
            break;

        case 36:
            update_formant_window();
            break;

        case 37:
            vowel_counter->value(value_int);
            break;

        case 38:
            neginput->value(value != 0);
            break;
    }} {}
  }
  Function {init(FilterParams *filterpars_,unsigned char *velsnsamp_,unsigned char *velsns_, int npart_, int kititem_, int engine_)} {} {
    code {//
    pars=filterpars_;
    synth = pars->getSynthEngine();
    velsnsamp = velsnsamp_;
    velsns = velsns_;
    npart = npart_;
    kititem = kititem_;
    engine = engine_;
    make_window();
    end();
    make_formant_window();
    filterui->resize(this->x(), this->y(), this->w(), this->h());

    if (velsnsamp == NULL)
    {
        vsnsadial->deactivate();
        vsnsadial->value(127);
    }
    else
        vsnsadial->value(*velsnsamp);

    if (velsns == NULL)
    {
        vsnsdial->deactivate();
        vsnsdial->value(127);
    }
    else
        vsnsdial->value(*velsns);
    switchcategory(pars->Pcategory);
    formantparswindow->label(this->label());
    update_formant_window();} {}
  }
  Function {switchcategory(int newcat)} {} {
    code {if (pars->Pcategory != newcat)
        {
            pars->Pgain = 64;
            gaindial->value(64);
            analogfiltertypechoice->value(0);
            analogfiltertypechoice->do_callback();
            svfiltertypechoice->value(0);
            svfiltertypechoice->do_callback();
        }
        pars->Pcategory=newcat;
        // Adjust GUI value conversion
        cfreqdial->setValueType(getFilterFreqType(filtertype->value()));
        refresh();} {}
  }
  Function {updateVCforQ()} {return_type void
  } {
    code {//
    switch (filtertype->value())
    {
        case 0:
            if (analogfiltertypechoice->value()<2)
                qdial->setValueType(VC_FilterQAnalogUnused);
            else
                qdial->setValueType(VC_FilterQ);
            break;
        case 1:
        case 2:
            qdial->setValueType(VC_FilterQ);
    }} {}
  }
  decl {FormantFilterGraph *formantfiltergraph;} {public local
  }
  decl {FilterParams *pars;} {private local
  }
  decl {unsigned char *velsnsamp,*velsns;} {private local
  }
  decl {int nvowel,nformant,nseqpos;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
  decl {int engine;} {private local
  }
}
